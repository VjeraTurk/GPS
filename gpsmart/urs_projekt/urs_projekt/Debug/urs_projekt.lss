
urs_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000774e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ae  00800060  0000774e  000077e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000be  0080020e  0080020e  00007990  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007990  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b8  00000000  00000000  000079ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000733f  00000000  00000000  00007ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd8  00000000  00000000  0000efe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001155  00000000  00000000  0000fbbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bb0  00000000  00000000  00010d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a44  00000000  00000000  000118c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004411  00000000  00000000  00012304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000340  00000000  00000000  00016715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__ctors_end>
       4:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
       8:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
       c:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      10:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      14:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      18:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      1c:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      20:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      24:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      28:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      2c:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      30:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      34:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__vector_13>
      38:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__vector_14>
      3c:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      40:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      44:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      48:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      4c:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      50:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__bad_interrupt>
      54:	07 2c       	mov	r0, r7
      56:	7a a5       	ldd	r23, Y+42	; 0x2a
      58:	ba 6c       	ori	r27, 0xCA	; 202
      5a:	c5 90       	lpm	r12, Z+
      5c:	da 3b       	cpi	r29, 0xBA	; 186
      5e:	93 65       	ori	r25, 0x53	; 83
      60:	fc 8b       	std	Y+20, r31	; 0x14
      62:	bc 53       	subi	r27, 0x3C	; 60
      64:	f8 10       	cpse	r15, r8
      66:	fd 3c       	cpi	r31, 0xCD	; 205
      68:	56 92       	lac	Z, r5
      6a:	83 4d       	sbci	r24, 0xD3	; 211
      6c:	bd 87       	std	Y+13, r27	; 0x0d
      6e:	9d 3a       	cpi	r25, 0xAD	; 173
      70:	b6 3d       	cpi	r27, 0xD6	; 214
      72:	cb c9       	rjmp	.-3178   	; 0xfffff40a <__eeprom_end+0xff7ef40a>
      74:	bf 5b       	subi	r27, 0xBF	; 191
      76:	be 73       	andi	r27, 0x3E	; 62
      78:	da 0f       	add	r29, r26
      7a:	c9 3f       	cpi	r28, 0xF9	; 249
      7c:	05 a8       	ldd	r0, Z+53	; 0x35
      7e:	4c cd       	rjmp	.-1384   	; 0xfffffb18 <__eeprom_end+0xff7efb18>
      80:	b2 d4       	rcall	.+2404   	; 0x9e6 <__stack+0x187>
      82:	4e b9       	out	0x0e, r20	; 14
      84:	38 36       	cpi	r19, 0x68	; 104
      86:	a9 02       	muls	r26, r25
      88:	0c 50       	subi	r16, 0x0C	; 12
      8a:	b9 91       	ld	r27, Y+
      8c:	86 88       	ldd	r8, Z+22	; 0x16
      8e:	08 3c       	cpi	r16, 0xC8	; 200
      90:	a6 aa       	std	Z+54, r10	; 0x36
      92:	aa 2a       	or	r10, r26
      94:	be 00       	.word	0x00be	; ????
      96:	00 00       	nop
      98:	80 3f       	cpi	r24, 0xF0	; 240

0000009a <__trampolines_end>:
      9a:	1b 08       	sbc	r1, r11
      9c:	10 21       	and	r17, r0
      9e:	01 20       	and	r0, r1
      a0:	f9 0a       	sbc	r15, r25
      a2:	02 06       	cpc	r0, r18
      a4:	0a 09       	sbc	r16, r10
      a6:	0e 09       	sbc	r16, r14
      a8:	03 06       	cpc	r0, r19
      aa:	06 07       	cpc	r16, r22
      ac:	08 03       	fmul	r16, r16
      ae:	07 03       	mulsu	r16, r23
      b0:	07 0a       	sbc	r0, r23
      b2:	0a 0a       	sbc	r0, r26
      b4:	0a 0a       	sbc	r0, r26
      b6:	0a 0a       	sbc	r0, r26
      b8:	0a 0a       	sbc	r0, r26
      ba:	0a 03       	fmul	r16, r18
      bc:	03 06       	cpc	r0, r19
      be:	07 06       	cpc	r0, r23
      c0:	09 0f       	add	r16, r25
      c2:	0a 0a       	sbc	r0, r26
      c4:	0a 0a       	sbc	r0, r26
      c6:	09 08       	sbc	r0, r9
      c8:	0b 0a       	sbc	r0, r27
      ca:	02 06       	cpc	r0, r18
      cc:	0a 08       	sbc	r0, r10
      ce:	0f 0c       	add	r0, r15
      d0:	0c 0a       	sbc	r0, r28
      d2:	0c 0a       	sbc	r0, r28
      d4:	0b 0a       	sbc	r0, r27
      d6:	0a 0c       	add	r0, r10
      d8:	0e 0b       	sbc	r16, r30
      da:	0c 0a       	sbc	r0, r28
      dc:	04 08       	sbc	r0, r4
      de:	04 08       	sbc	r0, r4
      e0:	09 05       	cpc	r16, r9
      e2:	09 09       	sbc	r16, r9
      e4:	08 09       	sbc	r16, r8
      e6:	0a 07       	cpc	r16, r26
      e8:	0a 09       	sbc	r16, r10
      ea:	02 03       	mulsu	r16, r18
      ec:	0a 02       	muls	r16, r26
      ee:	0e 09       	sbc	r16, r14
      f0:	09 09       	sbc	r16, r9
      f2:	09 06       	cpc	r0, r25
      f4:	09 07       	cpc	r16, r25
      f6:	09 09       	sbc	r16, r9
      f8:	0e 09       	sbc	r16, r14
      fa:	09 08       	sbc	r0, r9
      fc:	06 02       	muls	r16, r22
      fe:	06 0a       	sbc	r0, r22
	...
     120:	00 00       	nop
     122:	0a 09       	sbc	r16, r10
     124:	09 0a       	sbc	r0, r25
     126:	0a 0d       	add	r16, r10
     128:	07 09       	sbc	r16, r7
     12a:	0c 0b       	sbc	r16, r28
     12c:	0b 0e       	add	r0, r27
     12e:	0e 0c       	add	r0, r14
     130:	0c 0a       	sbc	r0, r28
     132:	0d 0f       	add	r16, r29
     134:	0f 0a       	sbc	r0, r31
     136:	0a 09       	sbc	r16, r10
     138:	0c 09       	sbc	r16, r12
     13a:	0d 0c       	add	r0, r13
     13c:	0c 09       	sbc	r16, r12
     13e:	09 0d       	add	r16, r9
     140:	0d 0c       	add	r0, r13
     142:	0a 09       	sbc	r16, r10
     144:	09 09       	sbc	r16, r9
     146:	09 0c       	add	r0, r9
     148:	08 0b       	sbc	r16, r24
     14a:	0e 0a       	sbc	r0, r30
     14c:	0c 0d       	add	r16, r12
     14e:	09 0a       	sbc	r0, r25
     150:	09 08       	sbc	r0, r9
     152:	09 07       	cpc	r16, r25
     154:	07 0a       	sbc	r0, r23
     156:	0a 0a       	sbc	r0, r26
     158:	0a 04       	cpc	r0, r10
     15a:	05 03       	mulsu	r16, r21
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	08 05       	cpc	r16, r8
     162:	0a 08       	sbc	r0, r10
     164:	08 09       	sbc	r16, r8
     166:	07 08       	sbc	r0, r7
     168:	08 02       	muls	r16, r24
     16a:	08 09       	sbc	r16, r8
     16c:	06 07       	cpc	r16, r22
     16e:	00 00       	nop
     170:	00 0b       	sbc	r16, r16
     172:	0b 0d       	add	r16, r11
     174:	0a 0c       	add	r0, r10
     176:	0c 0c       	add	r0, r12
     178:	0d 0c       	add	r0, r13
     17a:	0e 00       	.word	0x000e	; ????
	...
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <__trampolines_end+0x10c>
     1a6:	ff 0d       	add	r31, r15
     1a8:	00 80       	ld	r0, Z
     1aa:	ff 1b       	sub	r31, r31
     1ac:	00 00       	nop
     1ae:	08 00       	.word	0x0008	; ????
     1b0:	00 00       	nop
     1b2:	0e 00       	.word	0x000e	; ????
     1b4:	00 00       	nop
     1b6:	04 00       	.word	0x0004	; ????
     1b8:	00 00       	nop
     1ba:	60 00       	.word	0x0060	; ????
     1bc:	00 00       	nop
     1be:	70 00       	.word	0x0070	; ????
     1c0:	00 00       	nop
     1c2:	20 00       	.word	0x0020	; ????
     1c4:	00 00       	nop
     1c6:	00 44       	sbci	r16, 0x40	; 64
     1c8:	00 00       	nop
     1ca:	00 88       	ldd	r0, Z+16	; 0x10
     1cc:	1f 00       	.word	0x001f	; ????
     1ce:	00 f0       	brcs	.+0      	; 0x1d0 <__trampolines_end+0x136>
     1d0:	07 00       	.word	0x0007	; ????
     1d2:	00 7c       	andi	r16, 0xC0	; 192
     1d4:	02 00       	.word	0x0002	; ????
     1d6:	00 4c       	sbci	r16, 0xC0	; 192
     1d8:	04 00       	.word	0x0004	; ????
     1da:	00 80       	ld	r0, Z
     1dc:	e8 01       	movw	r28, r16
     1de:	00 00       	nop
     1e0:	7f 00       	.word	0x007f	; ????
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <__trampolines_end+0x14a>
     1e4:	2f 00       	.word	0x002f	; ????
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <__trampolines_end+0x14e>
     1e8:	45 00       	.word	0x0045	; ????
     1ea:	00 00       	nop
     1ec:	88 00       	.word	0x0088	; ????
     1ee:	00 00       	nop
     1f0:	38 0c       	add	r3, r8
     1f2:	00 00       	nop
     1f4:	f8 38       	cpi	r31, 0x88	; 136
     1f6:	00 00       	nop
     1f8:	18 c3       	rjmp	.+1584   	; 0x82a <__trampolines_end+0x790>
     1fa:	00 00       	nop
     1fc:	30 06       	cpc	r3, r16
     1fe:	01 00       	.word	0x0001	; ????
     200:	f0 ff       	sbrs	r31, 0
     202:	0f 00       	.word	0x000f	; ????
     204:	c0 10       	cpse	r12, r0
     206:	04 00       	.word	0x0004	; ????
     208:	80 61       	ori	r24, 0x10	; 16
     20a:	0c 00       	.word	0x000c	; ????
     20c:	00 8e       	std	Z+24, r0	; 0x18
     20e:	0f 00       	.word	0x000f	; ????
     210:	00 18       	sub	r0, r0
     212:	0e 00       	.word	0x000e	; ????
     214:	00 78       	andi	r16, 0x80	; 128
     216:	00 00       	nop
     218:	00 f8       	bld	r0, 0
     21a:	01 00       	.word	0x0001	; ????
     21c:	00 08       	sbc	r0, r0
     21e:	04 01       	movw	r0, r8
     220:	00 10       	cpse	r0, r0
     222:	08 03       	fmul	r16, r16
     224:	00 c0       	rjmp	.+0      	; 0x226 <__trampolines_end+0x18c>
     226:	8f 01       	movw	r16, r30
     228:	00 00       	nop
     22a:	8f 01       	movw	r16, r30
     22c:	00 00       	nop
     22e:	c0 00       	.word	0x00c0	; ????
     230:	00 00       	nop
     232:	c0 00       	.word	0x00c0	; ????
     234:	00 00       	nop
     236:	60 3c       	cpi	r22, 0xC0	; 192
     238:	00 00       	nop
     23a:	60 fc       	sbrc	r6, 0
     23c:	00 00       	nop
     23e:	30 04       	cpc	r3, r0
     240:	02 00       	.word	0x0002	; ????
     242:	20 08       	sbc	r2, r0
     244:	04 00       	.word	0x0004	; ????
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	07 00       	.word	0x0007	; ????
     24a:	00 80       	ld	r0, Z
     24c:	07 00       	.word	0x0007	; ????
     24e:	00 80       	ld	r0, Z
     250:	07 00       	.word	0x0007	; ????
     252:	00 bc       	out	0x20, r0	; 32
     254:	1f 00       	.word	0x001f	; ????
     256:	00 fc       	sbrc	r0, 0
     258:	43 00       	.word	0x0043	; ????
     25a:	00 18       	sub	r0, r0
     25c:	87 00       	.word	0x0087	; ????
     25e:	00 b0       	in	r0, 0x00	; 0
     260:	1b 01       	movw	r2, r22
     262:	00 c0       	rjmp	.+0      	; 0x264 <__trampolines_end+0x1ca>
     264:	63 02       	muls	r22, r19
     266:	00 00       	nop
     268:	80 07       	cpc	r24, r16
     26a:	00 00       	nop
     26c:	80 0f       	add	r24, r16
     26e:	00 00       	nop
     270:	00 1b       	sub	r16, r16
     272:	00 00       	nop
     274:	08 00       	.word	0x0008	; ????
     276:	00 00       	nop
     278:	0e 00       	.word	0x000e	; ????
     27a:	00 00       	nop
     27c:	04 00       	.word	0x0004	; ????
     27e:	00 00       	nop
     280:	c0 7f       	andi	r28, 0xF0	; 240
     282:	00 00       	nop
     284:	e0 ff       	sbrs	r30, 0
     286:	07 00       	.word	0x0007	; ????
     288:	f0 00       	.word	0x00f0	; ????
     28a:	1e 00       	.word	0x001e	; ????
     28c:	70 00       	.word	0x0070	; ????
     28e:	e0 00       	.word	0x00e0	; ????
     290:	30 00       	.word	0x0030	; ????
     292:	80 03       	fmuls	r16, r16
     294:	30 00       	.word	0x0030	; ????
     296:	00 0c       	add	r0, r0
     298:	20 00       	.word	0x0020	; ????
     29a:	00 18       	sub	r0, r0
     29c:	80 01       	movw	r16, r0
     29e:	00 18       	sub	r0, r0
     2a0:	00 06       	cpc	r0, r16
     2a2:	00 1c       	adc	r0, r0
     2a4:	00 78       	andi	r16, 0x80	; 128
     2a6:	00 1f       	adc	r16, r16
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <__trampolines_end+0x210>
     2aa:	ff 0f       	add	r31, r31
     2ac:	00 00       	nop
     2ae:	fe 03       	fmulsu	r23, r22
     2b0:	00 80       	ld	r0, Z
     2b2:	0d 00       	.word	0x000d	; ????
     2b4:	00 00       	nop
     2b6:	1a 00       	.word	0x001a	; ????
     2b8:	00 00       	nop
     2ba:	08 00       	.word	0x0008	; ????
     2bc:	00 00       	nop
     2be:	fe 01       	movw	r30, r28
     2c0:	00 00       	nop
     2c2:	20 00       	.word	0x0020	; ????
     2c4:	00 00       	nop
     2c6:	a0 00       	.word	0x00a0	; ????
     2c8:	00 00       	nop
     2ca:	60 03       	mulsu	r22, r16
     2cc:	00 00       	nop
     2ce:	00 20       	and	r0, r0
     2d0:	00 00       	nop
     2d2:	00 40       	sbci	r16, 0x00	; 0
     2d4:	00 00       	nop
     2d6:	00 80       	ld	r0, Z
     2d8:	00 00       	nop
     2da:	00 f0       	brcs	.+0      	; 0x2dc <__trampolines_end+0x242>
     2dc:	1f 00       	.word	0x001f	; ????
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	3f 00       	.word	0x003f	; ????
     2e2:	00 00       	nop
     2e4:	04 00       	.word	0x0004	; ????
     2e6:	00 00       	nop
     2e8:	08 00       	.word	0x0008	; ????
     2ea:	00 00       	nop
     2ec:	10 00       	.word	0x0010	; ????
     2ee:	00 00       	nop
     2f0:	00 4c       	sbci	r16, 0xC0	; 192
     2f2:	00 00       	nop
     2f4:	00 58       	subi	r16, 0x80	; 128
     2f6:	00 00       	nop
     2f8:	00 70       	andi	r16, 0x00	; 0
     2fa:	00 00       	nop
     2fc:	00 01       	movw	r0, r0
     2fe:	00 00       	nop
     300:	00 02       	muls	r16, r16
     302:	00 00       	nop
     304:	00 04       	cpc	r0, r0
     306:	00 00       	nop
     308:	00 08       	sbc	r0, r0
     30a:	00 00       	nop
     30c:	00 10       	cpse	r0, r0
     30e:	00 00       	nop
     310:	00 20       	and	r0, r0
     312:	00 00       	nop
     314:	00 40       	sbci	r16, 0x00	; 0
     316:	00 00       	nop
     318:	00 00       	nop
     31a:	30 00       	.word	0x0030	; ????
     31c:	00 00       	nop
     31e:	70 00       	.word	0x0070	; ????
     320:	00 00       	nop
     322:	c0 00       	.word	0x00c0	; ????
     324:	00 00       	nop
     326:	c0 01       	movw	r24, r0
     328:	00 00       	nop
     32a:	c0 00       	.word	0x00c0	; ????
     32c:	00 00       	nop
     32e:	60 00       	.word	0x0060	; ????
     330:	00 00       	nop
     332:	70 00       	.word	0x0070	; ????
     334:	00 00       	nop
     336:	30 00       	.word	0x0030	; ????
     338:	00 00       	nop
     33a:	18 00       	.word	0x0018	; ????
     33c:	00 00       	nop
     33e:	1c 00       	.word	0x001c	; ????
     340:	00 00       	nop
     342:	e0 1f       	adc	r30, r16
     344:	00 00       	nop
     346:	e0 7f       	andi	r30, 0xF0	; 240
     348:	00 00       	nop
     34a:	60 80       	ld	r6, Z
     34c:	01 00       	.word	0x0001	; ????
     34e:	60 00       	.word	0x0060	; ????
     350:	06 00       	.word	0x0006	; ????
     352:	40 00       	.word	0x0040	; ????
     354:	08 00       	.word	0x0008	; ????
     356:	80 00       	.word	0x0080	; ????
     358:	10 00       	.word	0x0010	; ????
     35a:	00 03       	mulsu	r16, r16
     35c:	30 00       	.word	0x0030	; ????
     35e:	00 0c       	add	r0, r0
     360:	30 00       	.word	0x0030	; ????
     362:	00 f0       	brcs	.+0      	; 0x364 <__trampolines_end+0x2ca>
     364:	3f 00       	.word	0x003f	; ????
     366:	00 c0       	rjmp	.+0      	; 0x368 <__trampolines_end+0x2ce>
     368:	1f 00       	.word	0x001f	; ????
	...
     372:	00 00       	nop
     374:	03 00       	.word	0x0003	; ????
     376:	00 00       	nop
     378:	03 00       	.word	0x0003	; ????
     37a:	00 00       	nop
     37c:	03 00       	.word	0x0003	; ????
     37e:	00 00       	nop
     380:	fe 7f       	andi	r31, 0xFE	; 254
     382:	00 00       	nop
     384:	fc ff       	.word	0xfffc	; ????
	...
     392:	00 00       	nop
     394:	00 06       	cpc	r0, r16
     396:	0f 00       	.word	0x000f	; ????
     398:	00 0f       	add	r16, r16
     39a:	1f 00       	.word	0x001f	; ????
     39c:	00 03       	mulsu	r16, r16
     39e:	23 00       	.word	0x0023	; ????
     3a0:	00 02       	muls	r16, r16
     3a2:	47 00       	.word	0x0047	; ????
     3a4:	00 04       	cpc	r0, r0
     3a6:	86 00       	.word	0x0086	; ????
     3a8:	00 08       	sbc	r0, r0
     3aa:	0e 01       	movw	r0, r28
     3ac:	00 10       	cpse	r0, r0
     3ae:	0c 02       	muls	r16, r28
     3b0:	00 60       	ori	r16, 0x00	; 0
     3b2:	1c 04       	cpc	r1, r12
     3b4:	00 80       	ld	r0, Z
     3b6:	1f 08       	sbc	r1, r15
     3b8:	00 00       	nop
     3ba:	1e 10       	cpse	r1, r14
     3bc:	00 00       	nop
     3be:	08 0c       	add	r0, r8
     3c0:	00 00       	nop
     3c2:	1c 38       	cpi	r17, 0x8C	; 140
     3c4:	00 00       	nop
     3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <__trampolines_end+0x346>
     3c8:	00 00       	nop
     3ca:	08 00       	.word	0x0008	; ????
     3cc:	01 00       	.word	0x0001	; ????
     3ce:	10 04       	cpc	r1, r0
     3d0:	02 00       	.word	0x0002	; ????
     3d2:	20 08       	sbc	r2, r0
     3d4:	04 00       	.word	0x0004	; ????
     3d6:	40 10       	cpse	r4, r0
     3d8:	08 00       	.word	0x0008	; ????
     3da:	80 51       	subi	r24, 0x10	; 16
     3dc:	18 00       	.word	0x0018	; ????
     3de:	00 be       	out	0x30, r0	; 48
     3e0:	19 00       	.word	0x0019	; ????
     3e2:	00 3c       	cpi	r16, 0xC0	; 192
     3e4:	3e 00       	.word	0x003e	; ????
     3e6:	00 00       	nop
     3e8:	0c 00       	.word	0x000c	; ????
     3ea:	00 00       	nop
     3ec:	1e 00       	.word	0x001e	; ????
     3ee:	00 00       	nop
     3f0:	26 00       	.word	0x0026	; ????
     3f2:	00 00       	nop
     3f4:	46 00       	.word	0x0046	; ????
     3f6:	00 00       	nop
     3f8:	87 00       	.word	0x0087	; ????
     3fa:	00 00       	nop
     3fc:	03 01       	movw	r0, r6
     3fe:	00 00       	nop
     400:	03 02       	muls	r16, r19
     402:	00 00       	nop
     404:	fe 7f       	andi	r31, 0xFE	; 254
     406:	00 00       	nop
     408:	fc ff       	.word	0xfffc	; ????
     40a:	00 00       	nop
     40c:	00 10       	cpse	r0, r0
     40e:	00 00       	nop
     410:	80 c3       	rjmp	.+1792   	; 0xb12 <__stack+0x2b3>
     412:	00 00       	nop
     414:	e0 87       	std	Z+8, r30	; 0x08
     416:	03 00       	.word	0x0003	; ????
     418:	40 04       	cpc	r4, r0
     41a:	0c 00       	.word	0x000c	; ????
     41c:	80 04       	cpc	r8, r0
     41e:	10 00       	.word	0x0010	; ????
     420:	00 09       	sbc	r16, r0
     422:	20 00       	.word	0x0020	; ????
     424:	00 12       	cpse	r0, r16
     426:	40 00       	.word	0x0040	; ????
     428:	00 24       	eor	r0, r0
     42a:	80 00       	.word	0x0080	; ????
     42c:	00 c8       	rjmp	.-4096   	; 0xfffff42e <__eeprom_end+0xff7ef42e>
     42e:	c1 01       	movw	r24, r2
     430:	00 10       	cpse	r0, r0
     432:	ff 01       	movw	r30, r30
     434:	00 00       	nop
     436:	fc 00       	.word	0x00fc	; ????
     438:	00 00       	nop
     43a:	fe 01       	movw	r30, r28
     43c:	00 00       	nop
     43e:	fe 0f       	add	r31, r30
     440:	00 00       	nop
     442:	22 10       	cpse	r2, r2
     444:	00 00       	nop
     446:	22 40       	sbci	r18, 0x02	; 2
     448:	00 00       	nop
     44a:	44 80       	ldd	r4, Z+4	; 0x04
     44c:	00 00       	nop
     44e:	88 00       	.word	0x0088	; ????
     450:	01 00       	.word	0x0001	; ????
     452:	10 01       	movw	r2, r0
     454:	02 00       	.word	0x0002	; ????
     456:	60 06       	cpc	r6, r16
     458:	06 00       	.word	0x0006	; ????
     45a:	80 f9       	bld	r24, 0
     45c:	07 00       	.word	0x0007	; ????
     45e:	00 e2       	ldi	r16, 0x20	; 32
     460:	07 00       	.word	0x0007	; ????
     462:	00 01       	movw	r0, r0
     464:	00 00       	nop
     466:	00 02       	muls	r16, r16
     468:	00 00       	nop
     46a:	00 04       	cpc	r0, r0
     46c:	80 00       	.word	0x0080	; ????
     46e:	00 08       	sbc	r0, r0
     470:	f0 01       	movw	r30, r0
     472:	00 10       	cpse	r0, r0
     474:	f8 03       	fmulsu	r23, r16
     476:	00 20       	and	r0, r0
     478:	3c 00       	.word	0x003c	; ????
     47a:	00 40       	sbci	r16, 0x00	; 0
     47c:	1e 00       	.word	0x001e	; ????
     47e:	00 80       	ld	r0, Z
     480:	0e 00       	.word	0x000e	; ????
     482:	00 00       	nop
     484:	07 00       	.word	0x0007	; ????
     486:	00 00       	nop
     488:	06 00       	.word	0x0006	; ????
     48a:	00 00       	nop
     48c:	70 3c       	cpi	r23, 0xC0	; 192
     48e:	00 00       	nop
     490:	f0 fd       	sbrc	r31, 0
     492:	00 00       	nop
     494:	30 0a       	sbc	r3, r16
     496:	01 00       	.word	0x0001	; ????
     498:	20 08       	sbc	r2, r0
     49a:	04 00       	.word	0x0004	; ????
     49c:	40 10       	cpse	r4, r0
     49e:	08 00       	.word	0x0008	; ????
     4a0:	80 20       	and	r8, r0
     4a2:	10 00       	.word	0x0010	; ????
     4a4:	00 41       	sbci	r16, 0x10	; 16
     4a6:	20 00       	.word	0x0020	; ????
     4a8:	00 46       	sbci	r16, 0x60	; 96
     4aa:	21 00       	.word	0x0021	; ????
     4ac:	00 f8       	bld	r0, 0
     4ae:	7e 00       	.word	0x007e	; ????
     4b0:	00 e0       	ldi	r16, 0x00	; 0
     4b2:	78 00       	.word	0x0078	; ????
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__trampolines_end+0x41c>
     4b6:	c7 00       	.word	0x00c7	; ????
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__trampolines_end+0x420>
     4ba:	9f 03       	fmulsu	r17, r23
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <__trampolines_end+0x424>
     4be:	60 0c       	add	r6, r0
     4c0:	00 80       	ld	r0, Z
     4c2:	80 10       	cpse	r8, r0
     4c4:	00 00       	nop
     4c6:	01 21       	and	r16, r1
     4c8:	00 00       	nop
     4ca:	02 42       	sbci	r16, 0x22	; 34
     4cc:	00 00       	nop
     4ce:	04 c6       	rjmp	.+3080   	; 0x10d8 <__stack+0x879>
     4d0:	00 00       	nop
     4d2:	30 c6       	rjmp	.+3168   	; 0x1134 <__stack+0x8d5>
     4d4:	00 00       	nop
     4d6:	e0 ff       	sbrs	r30, 0
     4d8:	00 00       	nop
     4da:	00 7f       	andi	r16, 0xF0	; 240
     4dc:	00 00       	nop
     4de:	80 01       	movw	r16, r0
     4e0:	0c 00       	.word	0x000c	; ????
     4e2:	00 07       	cpc	r16, r16
     4e4:	1c 00       	.word	0x001c	; ????
     4e6:	00 06       	cpc	r0, r16
     4e8:	30 00       	.word	0x0030	; ????
     4ea:	00 08       	sbc	r0, r0
     4ec:	60 02       	muls	r22, r16
     4ee:	00 38       	cpi	r16, 0x80	; 128
     4f0:	c0 02       	muls	r28, r16
     4f2:	00 20       	and	r0, r0
     4f4:	80 03       	fmuls	r16, r16
     4f6:	00 00       	nop
     4f8:	08 00       	.word	0x0008	; ????
     4fa:	00 00       	nop
     4fc:	28 00       	.word	0x0028	; ????
     4fe:	00 00       	nop
     500:	d8 00       	.word	0x00d8	; ????
     502:	00 00       	nop
     504:	10 01       	movw	r2, r0
     506:	00 00       	nop
     508:	10 04       	cpc	r1, r0
     50a:	00 00       	nop
     50c:	30 18       	sub	r3, r0
     50e:	00 00       	nop
     510:	80 08       	sbc	r8, r0
     512:	00 00       	nop
     514:	00 11       	cpse	r16, r0
     516:	00 00       	nop
     518:	00 22       	and	r0, r16
     51a:	00 00       	nop
     51c:	00 44       	sbci	r16, 0x40	; 64
     51e:	00 00       	nop
     520:	00 88       	ldd	r0, Z+16	; 0x10
     522:	00 00       	nop
     524:	00 10       	cpse	r0, r0
     526:	01 00       	.word	0x0001	; ????
     528:	00 20       	and	r0, r0
     52a:	02 00       	.word	0x0002	; ????
     52c:	00 30       	cpi	r16, 0x00	; 0
     52e:	18 00       	.word	0x0018	; ????
     530:	00 40       	sbci	r16, 0x00	; 0
     532:	10 00       	.word	0x0010	; ????
     534:	00 00       	nop
     536:	11 00       	.word	0x0011	; ????
     538:	00 00       	nop
     53a:	36 00       	.word	0x0036	; ????
     53c:	00 00       	nop
     53e:	28 00       	.word	0x0028	; ????
     540:	00 00       	nop
     542:	20 00       	.word	0x0020	; ????
     544:	00 00       	nop
     546:	0e 00       	.word	0x000e	; ????
     548:	00 00       	nop
     54a:	1e 00       	.word	0x001e	; ????
     54c:	00 00       	nop
     54e:	06 00       	.word	0x0006	; ????
     550:	00 00       	nop
     552:	04 00       	.word	0x0004	; ????
     554:	00 00       	nop
     556:	08 bc       	out	0x28, r0	; 40
     558:	01 00       	.word	0x0001	; ????
     55a:	10 7c       	andi	r17, 0xC0	; 192
     55c:	03 00       	.word	0x0003	; ????
     55e:	20 0c       	add	r2, r0
     560:	00 00       	nop
     562:	80 08       	sbc	r8, r0
     564:	00 00       	nop
     566:	00 0f       	add	r16, r16
     568:	00 00       	nop
     56a:	00 e0       	ldi	r16, 0x00	; 0
     56c:	03 00       	.word	0x0003	; ????
     56e:	00 f0       	brcs	.+0      	; 0x570 <__trampolines_end+0x4d6>
     570:	0f 00       	.word	0x000f	; ????
     572:	00 70       	andi	r16, 0x00	; 0
     574:	30 00       	.word	0x0030	; ????
     576:	00 20       	and	r0, r0
     578:	c0 00       	.word	0x00c0	; ????
     57a:	00 20       	and	r0, r0
     57c:	3c 01       	movw	r6, r24
     57e:	00 40       	sbci	r16, 0x00	; 0
     580:	fc 04       	cpc	r15, r12
     582:	00 40       	sbci	r16, 0x00	; 0
     584:	06 09       	sbc	r16, r6
     586:	00 80       	ld	r0, Z
     588:	0c 11       	cpse	r16, r12
     58a:	00 00       	nop
     58c:	19 23       	and	r17, r25
     58e:	00 00       	nop
     590:	e2 4f       	sbci	r30, 0xF2	; 242
     592:	00 00       	nop
     594:	cc d1       	rcall	.+920    	; 0x92e <__stack+0xcf>
     596:	00 00       	nop
     598:	90 20       	and	r9, r0
     59a:	01 00       	.word	0x0001	; ????
     59c:	60 20       	and	r6, r0
     59e:	00 00       	nop
     5a0:	80 73       	andi	r24, 0x30	; 48
     5a2:	00 00       	nop
     5a4:	00 3c       	cpi	r16, 0xC0	; 192
     5a6:	00 00       	nop
     5a8:	00 00       	nop
     5aa:	1e 00       	.word	0x001e	; ????
     5ac:	00 80       	ld	r0, Z
     5ae:	07 00       	.word	0x0007	; ????
     5b0:	00 e0       	ldi	r16, 0x00	; 0
     5b2:	07 00       	.word	0x0007	; ????
     5b4:	00 f8       	bld	r0, 0
     5b6:	08 00       	.word	0x0008	; ????
     5b8:	00 38       	cpi	r16, 0x80	; 128
     5ba:	10 00       	.word	0x0010	; ????
     5bc:	00 f0       	brcs	.+0      	; 0x5be <__trampolines_end+0x524>
     5be:	20 00       	.word	0x0020	; ????
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <__trampolines_end+0x528>
     5c2:	4f 00       	.word	0x004f	; ????
     5c4:	00 00       	nop
     5c6:	fc 00       	.word	0x00fc	; ????
     5c8:	00 00       	nop
     5ca:	c0 0f       	add	r28, r16
     5cc:	00 00       	nop
     5ce:	00 3c       	cpi	r16, 0xC0	; 192
     5d0:	00 00       	nop
     5d2:	fe 7f       	andi	r31, 0xFE	; 254
     5d4:	00 00       	nop
     5d6:	fc ff       	.word	0xfffc	; ????
     5d8:	00 00       	nop
     5da:	08 02       	muls	r16, r24
     5dc:	01 00       	.word	0x0001	; ????
     5de:	10 04       	cpc	r1, r0
     5e0:	02 00       	.word	0x0002	; ????
     5e2:	20 08       	sbc	r2, r0
     5e4:	04 00       	.word	0x0004	; ????
     5e6:	40 10       	cpse	r4, r0
     5e8:	08 00       	.word	0x0008	; ????
     5ea:	80 20       	and	r8, r0
     5ec:	10 00       	.word	0x0010	; ????
     5ee:	00 b7       	in	r16, 0x30	; 48
     5f0:	30 00       	.word	0x0030	; ????
     5f2:	00 7c       	andi	r16, 0xC0	; 192
     5f4:	3f 00       	.word	0x003f	; ????
     5f6:	00 20       	and	r0, r0
     5f8:	3c 00       	.word	0x003c	; ????
     5fa:	00 80       	ld	r0, Z
     5fc:	1f 00       	.word	0x001f	; ????
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <__trampolines_end+0x566>
     600:	ff 00       	.word	0x00ff	; ????
     602:	00 c0       	rjmp	.+0      	; 0x604 <__trampolines_end+0x56a>
     604:	81 03       	fmuls	r16, r17
     606:	00 c0       	rjmp	.+0      	; 0x608 <__trampolines_end+0x56e>
     608:	00 0c       	add	r0, r0
     60a:	00 80       	ld	r0, Z
     60c:	00 10       	cpse	r0, r0
     60e:	00 00       	nop
     610:	01 20       	and	r0, r1
     612:	00 00       	nop
     614:	02 40       	sbci	r16, 0x02	; 2
     616:	00 00       	nop
     618:	04 80       	ldd	r0, Z+4	; 0x04
     61a:	00 00       	nop
     61c:	10 80       	ld	r1, Z
     61e:	00 00       	nop
     620:	e0 e0       	ldi	r30, 0x00	; 0
     622:	01 00       	.word	0x0001	; ????
     624:	e0 ff       	sbrs	r30, 0
     626:	07 00       	.word	0x0007	; ????
     628:	c0 ff       	sbrs	r28, 0
     62a:	0f 00       	.word	0x000f	; ????
     62c:	80 00       	.word	0x0080	; ????
     62e:	10 00       	.word	0x0010	; ????
     630:	00 01       	movw	r0, r0
     632:	20 00       	.word	0x0020	; ????
     634:	00 02       	muls	r16, r16
     636:	40 00       	.word	0x0040	; ????
     638:	00 04       	cpc	r0, r0
     63a:	80 00       	.word	0x0080	; ????
     63c:	00 10       	cpse	r0, r0
     63e:	80 00       	.word	0x0080	; ????
     640:	00 e0       	ldi	r16, 0x00	; 0
     642:	c0 01       	movw	r24, r0
     644:	00 80       	ld	r0, Z
     646:	ff 01       	movw	r30, r30
     648:	00 00       	nop
     64a:	fc 00       	.word	0x00fc	; ????
     64c:	00 80       	ld	r0, Z
     64e:	ff 1f       	adc	r31, r31
     650:	00 00       	nop
     652:	ff 3f       	cpi	r31, 0xFF	; 255
     654:	00 00       	nop
     656:	82 40       	sbci	r24, 0x02	; 2
     658:	00 00       	nop
     65a:	04 81       	ldd	r16, Z+4	; 0x04
     65c:	00 00       	nop
     65e:	08 02       	muls	r16, r24
     660:	01 00       	.word	0x0001	; ????
     662:	10 04       	cpc	r1, r0
     664:	02 00       	.word	0x0002	; ????
     666:	20 08       	sbc	r2, r0
     668:	04 00       	.word	0x0004	; ????
     66a:	40 10       	cpse	r4, r0
     66c:	08 00       	.word	0x0008	; ????
     66e:	80 00       	.word	0x0080	; ????
     670:	10 00       	.word	0x0010	; ????
     672:	00 ff       	sbrs	r16, 0
     674:	3f 00       	.word	0x003f	; ????
     676:	00 fe       	sbrs	r0, 0
     678:	7f 00       	.word	0x007f	; ????
     67a:	00 04       	cpc	r0, r0
     67c:	01 00       	.word	0x0001	; ????
     67e:	00 08       	sbc	r0, r0
     680:	02 00       	.word	0x0002	; ????
     682:	00 10       	cpse	r0, r0
     684:	04 00       	.word	0x0004	; ????
     686:	00 20       	and	r0, r0
     688:	08 00       	.word	0x0008	; ????
     68a:	00 40       	sbci	r16, 0x00	; 0
     68c:	10 00       	.word	0x0010	; ????
     68e:	00 80       	ld	r0, Z
     690:	00 00       	nop
     692:	00 00       	nop
     694:	f0 03       	fmuls	r23, r16
     696:	00 00       	nop
     698:	f8 1f       	adc	r31, r24
     69a:	00 00       	nop
     69c:	38 70       	andi	r19, 0x08	; 8
     69e:	00 00       	nop
     6a0:	10 80       	ld	r1, Z
     6a2:	00 00       	nop
     6a4:	10 00       	.word	0x0010	; ????
     6a6:	02 00       	.word	0x0002	; ????
     6a8:	20 00       	.word	0x0020	; ????
     6aa:	04 00       	.word	0x0004	; ????
     6ac:	40 20       	and	r4, r0
     6ae:	08 00       	.word	0x0008	; ????
     6b0:	80 41       	sbci	r24, 0x10	; 16
     6b2:	18 00       	.word	0x0018	; ????
     6b4:	00 86       	std	Z+8, r0	; 0x08
     6b6:	18 00       	.word	0x0018	; ????
     6b8:	00 1c       	adc	r0, r0
     6ba:	3f 00       	.word	0x003f	; ????
     6bc:	00 20       	and	r0, r0
     6be:	fe 00       	.word	0x00fe	; ????
     6c0:	00 f8       	bld	r0, 0
     6c2:	ff 01       	movw	r30, r30
     6c4:	00 f0       	brcs	.+0      	; 0x6c6 <__trampolines_end+0x62c>
     6c6:	ff 03       	fmulsu	r23, r23
     6c8:	00 00       	nop
     6ca:	08 00       	.word	0x0008	; ????
     6cc:	00 00       	nop
     6ce:	10 00       	.word	0x0010	; ????
     6d0:	00 00       	nop
     6d2:	20 00       	.word	0x0020	; ????
     6d4:	00 00       	nop
     6d6:	40 00       	.word	0x0040	; ????
     6d8:	00 00       	nop
     6da:	80 00       	.word	0x0080	; ????
     6dc:	00 00       	nop
     6de:	00 01       	movw	r0, r0
     6e0:	00 00       	nop
     6e2:	f8 ff       	.word	0xfff8	; ????
     6e4:	01 00       	.word	0x0001	; ????
     6e6:	f0 ff       	sbrs	r31, 0
     6e8:	03 00       	.word	0x0003	; ????
     6ea:	e0 ff       	sbrs	r30, 0
     6ec:	07 00       	.word	0x0007	; ????
     6ee:	c0 ff       	sbrs	r28, 0
     6f0:	0f 00       	.word	0x000f	; ????
     6f2:	00 00       	nop
     6f4:	10 00       	.word	0x0010	; ????
     6f6:	00 00       	nop
     6f8:	20 00       	.word	0x0020	; ????
     6fa:	00 00       	nop
     6fc:	40 00       	.word	0x0040	; ????
     6fe:	00 00       	nop
     700:	c0 00       	.word	0x00c0	; ????
     702:	00 f8       	bld	r0, 0
     704:	ff 00       	.word	0x00ff	; ????
     706:	00 f0       	brcs	.+0      	; 0x708 <__trampolines_end+0x66e>
     708:	ff 00       	.word	0x00ff	; ????
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	ff 07       	cpc	r31, r31
     70e:	00 c0       	rjmp	.+0      	; 0x710 <__trampolines_end+0x676>
     710:	ff 0f       	add	r31, r31
     712:	00 00       	nop
     714:	c0 01       	movw	r24, r0
     716:	00 00       	nop
     718:	c0 00       	.word	0x00c0	; ????
     71a:	00 00       	nop
     71c:	c0 00       	.word	0x00c0	; ????
     71e:	00 00       	nop
     720:	e0 01       	movw	r28, r0
     722:	00 00       	nop
     724:	60 0e       	add	r6, r16
     726:	00 00       	nop
     728:	60 78       	andi	r22, 0x80	; 128
     72a:	00 00       	nop
     72c:	60 c0       	rjmp	.+192    	; 0x7ee <__trampolines_end+0x754>
     72e:	03 00       	.word	0x0003	; ????
     730:	40 00       	.word	0x0040	; ????
     732:	0e 00       	.word	0x000e	; ????
     734:	80 ff       	sbrs	r24, 0
     736:	1f 00       	.word	0x001f	; ????
     738:	00 ff       	sbrs	r16, 0
     73a:	3f 00       	.word	0x003f	; ????
     73c:	00 00       	nop
     73e:	40 00       	.word	0x0040	; ????
     740:	00 00       	nop
     742:	80 00       	.word	0x0080	; ????
     744:	00 00       	nop
     746:	00 01       	movw	r0, r0
     748:	00 00       	nop
     74a:	00 02       	muls	r16, r16
     74c:	00 00       	nop
     74e:	00 04       	cpc	r0, r0
     750:	00 00       	nop
     752:	00 08       	sbc	r0, r0
     754:	00 80       	ld	r0, Z
     756:	ff 1f       	adc	r31, r31
     758:	00 00       	nop
     75a:	ff 3f       	cpi	r31, 0xFF	; 255
     75c:	00 00       	nop
     75e:	0e 00       	.word	0x000e	; ????
     760:	00 00       	nop
     762:	78 00       	.word	0x0078	; ????
     764:	00 00       	nop
     766:	c0 07       	cpc	r28, r16
     768:	00 00       	nop
     76a:	00 3c       	cpi	r16, 0xC0	; 192
     76c:	00 00       	nop
     76e:	00 e0       	ldi	r16, 0x00	; 0
     770:	03 00       	.word	0x0003	; ????
     772:	00 00       	nop
     774:	0e 00       	.word	0x000e	; ????
     776:	00 00       	nop
     778:	0f 00       	.word	0x000f	; ????
     77a:	00 80       	ld	r0, Z
     77c:	03 00       	.word	0x0003	; ????
     77e:	00 e0       	ldi	r16, 0x00	; 0
     780:	01 00       	.word	0x0001	; ????
     782:	00 70       	andi	r16, 0x00	; 0
     784:	00 00       	nop
     786:	00 18       	sub	r0, r0
     788:	00 00       	nop
     78a:	00 f0       	brcs	.+0      	; 0x78c <__trampolines_end+0x6f2>
     78c:	ff 03       	fmulsu	r23, r23
     78e:	00 e0       	ldi	r16, 0x00	; 0
     790:	ff 07       	cpc	r31, r31
     792:	00 c0       	rjmp	.+0      	; 0x794 <__trampolines_end+0x6fa>
     794:	ff 0f       	add	r31, r31
     796:	00 80       	ld	r0, Z
     798:	ff 1f       	adc	r31, r31
     79a:	00 00       	nop
     79c:	03 00       	.word	0x0003	; ????
     79e:	00 00       	nop
     7a0:	1c 00       	.word	0x001c	; ????
     7a2:	00 00       	nop
     7a4:	60 00       	.word	0x0060	; ????
     7a6:	00 00       	nop
     7a8:	80 03       	fmuls	r16, r16
     7aa:	00 00       	nop
     7ac:	00 1c       	adc	r0, r0
     7ae:	00 00       	nop
     7b0:	00 70       	andi	r16, 0x00	; 0
     7b2:	00 00       	nop
     7b4:	00 80       	ld	r0, Z
     7b6:	03 00       	.word	0x0003	; ????
     7b8:	00 00       	nop
     7ba:	1c 00       	.word	0x001c	; ????
     7bc:	00 ff       	sbrs	r16, 0
     7be:	3f 00       	.word	0x003f	; ????
     7c0:	00 fe       	sbrs	r0, 0
     7c2:	7f 00       	.word	0x007f	; ????
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <__trampolines_end+0x72c>
     7c6:	0f 00       	.word	0x000f	; ????
     7c8:	00 e0       	ldi	r16, 0x00	; 0
     7ca:	7f 00       	.word	0x007f	; ????
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	c0 01       	movw	r24, r0
     7d0:	00 40       	sbci	r16, 0x00	; 0
     7d2:	00 02       	muls	r16, r16
     7d4:	00 40       	sbci	r16, 0x00	; 0
     7d6:	00 08       	sbc	r0, r0
     7d8:	00 80       	ld	r0, Z
     7da:	00 10       	cpse	r0, r0
     7dc:	00 00       	nop
     7de:	01 20       	and	r0, r1
     7e0:	00 00       	nop
     7e2:	02 40       	sbci	r16, 0x02	; 2
     7e4:	00 00       	nop
     7e6:	08 40       	sbci	r16, 0x08	; 8
     7e8:	00 00       	nop
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	00 00       	nop
     7ee:	c0 ff       	sbrs	r28, 0
     7f0:	00 00       	nop
     7f2:	00 7e       	andi	r16, 0xE0	; 224
     7f4:	00 00       	nop
     7f6:	c0 ff       	sbrs	r28, 0
     7f8:	0f 00       	.word	0x000f	; ????
     7fa:	80 ff       	sbrs	r24, 0
     7fc:	1f 00       	.word	0x001f	; ????
     7fe:	00 81       	ld	r16, Z
     800:	00 00       	nop
     802:	00 02       	muls	r16, r16
     804:	01 00       	.word	0x0001	; ????
     806:	00 04       	cpc	r0, r0
     808:	02 00       	.word	0x0002	; ????
     80a:	00 08       	sbc	r0, r0
     80c:	04 00       	.word	0x0004	; ????
     80e:	00 10       	cpse	r0, r0
     810:	08 00       	.word	0x0008	; ????
     812:	00 60       	ori	r16, 0x00	; 0
     814:	18 00       	.word	0x0018	; ????
     816:	00 80       	ld	r0, Z
     818:	1f 00       	.word	0x001f	; ????
     81a:	00 00       	nop
     81c:	1e 00       	.word	0x001e	; ????
     81e:	00 00       	nop
     820:	f0 03       	fmuls	r23, r16
     822:	00 00       	nop
     824:	f8 1f       	adc	r31, r24
     826:	00 00       	nop
     828:	38 70       	andi	r19, 0x08	; 8
     82a:	00 00       	nop
     82c:	10 80       	ld	r1, Z
     82e:	00 00       	nop
     830:	10 00       	.word	0x0010	; ????
     832:	02 00       	.word	0x0002	; ????
     834:	20 00       	.word	0x0020	; ????
     836:	04 00       	.word	0x0004	; ????
     838:	40 00       	.word	0x0040	; ????
     83a:	38 00       	.word	0x0038	; ????
     83c:	80 00       	.word	0x0080	; ????
     83e:	d0 00       	.word	0x00d0	; ????
     840:	00 03       	mulsu	r16, r16
     842:	30 01       	movw	r6, r0
     844:	00 1c       	adc	r0, r0
     846:	38 02       	muls	r19, r24
     848:	00 f0       	brcs	.+0      	; 0x84a <__trampolines_end+0x7b0>
     84a:	3f 04       	cpc	r3, r15
     84c:	00 80       	ld	r0, Z
     84e:	1f 00       	.word	0x001f	; ????
     850:	00 f0       	brcs	.+0      	; 0x852 <__trampolines_end+0x7b8>
     852:	ff 03       	fmulsu	r23, r23
     854:	00 e0       	ldi	r16, 0x00	; 0
     856:	ff 07       	cpc	r31, r31
     858:	00 40       	sbci	r16, 0x00	; 0
     85a:	20 00       	.word	0x0020	; ????
     85c:	00 80       	ld	r0, Z
     85e:	40 00       	.word	0x0040	; ????
     860:	00 00       	nop
     862:	81 00       	.word	0x0081	; ????
     864:	00 00       	nop
     866:	02 01       	movw	r0, r4
     868:	00 00       	nop
     86a:	04 0e       	add	r0, r20
     86c:	00 00       	nop
     86e:	18 fe       	.word	0xfe18	; ????
     870:	00 00       	nop
     872:	e0 87       	std	Z+8, r30	; 0x08
     874:	03 00       	.word	0x0003	; ????
     876:	80 07       	cpc	r24, r16
     878:	04 00       	.word	0x0004	; ????
     87a:	00 0f       	add	r16, r16
     87c:	03 00       	.word	0x0003	; ????
     87e:	00 3f       	cpi	r16, 0xF0	; 240
     880:	0c 00       	.word	0x000c	; ????
     882:	00 63       	ori	r16, 0x30	; 48
     884:	30 00       	.word	0x0030	; ????
     886:	00 c2       	rjmp	.+1024   	; 0xc88 <__stack+0x429>
     888:	40 00       	.word	0x0040	; ????
     88a:	00 04       	cpc	r0, r0
     88c:	83 00       	.word	0x0083	; ????
     88e:	00 08       	sbc	r0, r0
     890:	06 01       	movw	r0, r12
     892:	00 10       	cpse	r0, r0
     894:	0c 02       	muls	r16, r28
     896:	00 60       	ori	r16, 0x00	; 0
     898:	18 04       	cpc	r1, r8
     89a:	00 80       	ld	r0, Z
     89c:	63 04       	cpc	r6, r3
     89e:	00 00       	nop
     8a0:	c2 0f       	add	r28, r18
     8a2:	00 00       	nop
     8a4:	00 0f       	add	r16, r16
     8a6:	00 00       	nop
     8a8:	02 00       	.word	0x0002	; ????
     8aa:	00 00       	nop
     8ac:	04 00       	.word	0x0004	; ????
     8ae:	00 00       	nop
     8b0:	08 00       	.word	0x0008	; ????
     8b2:	00 00       	nop
     8b4:	10 00       	.word	0x0010	; ????
     8b6:	00 00       	nop
     8b8:	e0 ff       	sbrs	r30, 0
     8ba:	07 00       	.word	0x0007	; ????
     8bc:	c0 ff       	sbrs	r28, 0
     8be:	0f 00       	.word	0x000f	; ????
     8c0:	80 00       	.word	0x0080	; ????
     8c2:	00 00       	nop
     8c4:	00 01       	movw	r0, r0
     8c6:	00 00       	nop
     8c8:	00 02       	muls	r16, r16
     8ca:	00 00       	nop
     8cc:	00 04       	cpc	r0, r0
     8ce:	00 00       	nop
     8d0:	00 f8       	bld	r0, 0
     8d2:	7f 00       	.word	0x007f	; ????
     8d4:	00 f0       	brcs	.+0      	; 0x8d6 <__stack+0x77>
     8d6:	ff 01       	movw	r30, r30
     8d8:	00 00       	nop
     8da:	00 06       	cpc	r0, r16
     8dc:	00 00       	nop
     8de:	00 08       	sbc	r0, r0
     8e0:	00 00       	nop
     8e2:	00 10       	cpse	r0, r0
     8e4:	00 00       	nop
     8e6:	00 20       	and	r0, r0
     8e8:	00 00       	nop
     8ea:	00 40       	sbci	r16, 0x00	; 0
     8ec:	00 00       	nop
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <__stack+0x91>
     8f0:	00 00       	nop
     8f2:	f8 ff       	.word	0xfff8	; ????
     8f4:	00 00       	nop
     8f6:	f0 ff       	sbrs	r31, 0
     8f8:	00 00       	nop
     8fa:	20 00       	.word	0x0020	; ????
     8fc:	00 00       	nop
     8fe:	c0 03       	fmuls	r20, r16
     900:	00 00       	nop
     902:	00 3f       	cpi	r16, 0xF0	; 240
     904:	00 00       	nop
     906:	00 f0       	brcs	.+0      	; 0x908 <__stack+0xa9>
     908:	03 00       	.word	0x0003	; ????
     90a:	00 00       	nop
     90c:	1f 00       	.word	0x001f	; ????
     90e:	00 00       	nop
     910:	f0 00       	.word	0x00f0	; ????
     912:	00 00       	nop
     914:	c0 01       	movw	r24, r0
     916:	00 00       	nop
     918:	f0 00       	.word	0x00f0	; ????
     91a:	00 00       	nop
     91c:	7c 00       	.word	0x007c	; ????
     91e:	00 00       	nop
     920:	1f 00       	.word	0x001f	; ????
     922:	00 80       	ld	r0, Z
     924:	07 00       	.word	0x0007	; ????
     926:	00 00       	nop
     928:	01 00       	.word	0x0001	; ????
     92a:	00 00       	nop
     92c:	7e 00       	.word	0x007e	; ????
     92e:	00 00       	nop
     930:	fc 07       	cpc	r31, r28
     932:	00 00       	nop
     934:	00 fe       	sbrs	r0, 0
     936:	00 00       	nop
     938:	00 c0       	rjmp	.+0      	; 0x93a <__stack+0xdb>
     93a:	03 00       	.word	0x0003	; ????
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0xdf>
     93e:	07 00       	.word	0x0007	; ????
     940:	00 fe       	sbrs	r0, 0
     942:	00 00       	nop
     944:	80 1f       	adc	r24, r16
     946:	00 00       	nop
     948:	00 3f       	cpi	r16, 0xF0	; 240
     94a:	00 00       	nop
     94c:	00 f0       	brcs	.+0      	; 0x94e <__stack+0xef>
     94e:	07 00       	.word	0x0007	; ????
     950:	00 00       	nop
     952:	7e 00       	.word	0x007e	; ????
     954:	00 00       	nop
     956:	c0 01       	movw	r24, r0
     958:	00 00       	nop
     95a:	f0 03       	fmuls	r23, r16
     95c:	00 e0       	ldi	r16, 0x00	; 0
     95e:	7f 00       	.word	0x007f	; ????
     960:	00 c0       	rjmp	.+0      	; 0x962 <__stack+0x103>
     962:	0f 00       	.word	0x000f	; ????
     964:	00 80       	ld	r0, Z
     966:	00 10       	cpse	r0, r0
     968:	00 00       	nop
     96a:	03 30       	cpi	r16, 0x03	; 3
     96c:	00 00       	nop
     96e:	0e 38       	cpi	r16, 0x8E	; 142
     970:	00 00       	nop
     972:	70 1c       	adc	r7, r0
     974:	00 00       	nop
     976:	c0 0f       	add	r28, r16
     978:	00 00       	nop
     97a:	00 0e       	add	r0, r16
     97c:	00 00       	nop
     97e:	00 7e       	andi	r16, 0xE0	; 224
     980:	00 00       	nop
     982:	00 c7       	rjmp	.+3584   	; 0x1784 <__stack+0xf25>
     984:	03 00       	.word	0x0003	; ????
     986:	80 03       	fmuls	r16, r16
     988:	0e 00       	.word	0x000e	; ????
     98a:	00 01       	movw	r0, r0
     98c:	38 00       	.word	0x0038	; ????
     98e:	00 00       	nop
     990:	40 00       	.word	0x0040	; ????
     992:	00 04       	cpc	r0, r0
     994:	00 00       	nop
     996:	00 18       	sub	r0, r0
     998:	00 00       	nop
     99a:	00 f0       	brcs	.+0      	; 0x99c <__stack+0x13d>
     99c:	00 00       	nop
     99e:	00 80       	ld	r0, Z
     9a0:	07 00       	.word	0x0007	; ????
     9a2:	00 00       	nop
     9a4:	1e 00       	.word	0x001e	; ????
     9a6:	00 00       	nop
     9a8:	f0 1f       	adc	r31, r16
     9aa:	00 00       	nop
     9ac:	c0 3f       	cpi	r28, 0xF0	; 240
     9ae:	00 00       	nop
     9b0:	e0 00       	.word	0x00e0	; ????
     9b2:	00 00       	nop
     9b4:	e0 00       	.word	0x00e0	; ????
     9b6:	00 00       	nop
     9b8:	70 00       	.word	0x0070	; ????
     9ba:	00 00       	nop
     9bc:	30 00       	.word	0x0030	; ????
     9be:	00 00       	nop
     9c0:	20 00       	.word	0x0020	; ????
     9c2:	00 00       	nop
     9c4:	40 00       	.word	0x0040	; ????
     9c6:	0c 00       	.word	0x000c	; ????
     9c8:	80 00       	.word	0x0080	; ????
     9ca:	1c 00       	.word	0x001c	; ????
     9cc:	00 01       	movw	r0, r0
     9ce:	2e 00       	.word	0x002e	; ????
     9d0:	00 02       	muls	r16, r16
     9d2:	4e 00       	.word	0x004e	; ????
     9d4:	00 04       	cpc	r0, r0
     9d6:	87 00       	.word	0x0087	; ????
     9d8:	00 88       	ldd	r0, Z+16	; 0x10
     9da:	03 01       	movw	r0, r6
     9dc:	00 90 03 02 	lds	r0, 0x0203
     9e0:	00 e0       	ldi	r16, 0x00	; 0
     9e2:	01 04       	cpc	r0, r1
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <__stack+0x187>
     9e6:	01 08       	sbc	r0, r1
     9e8:	00 80       	ld	r0, Z
     9ea:	00 10       	cpse	r0, r0
     9ec:	00 00       	nop
     9ee:	ff ff       	.word	0xffff	; ????
     9f0:	01 00       	.word	0x0001	; ????
     9f2:	fe ff       	.word	0xfffe	; ????
     9f4:	03 00       	.word	0x0003	; ????
     9f6:	04 00       	.word	0x0004	; ????
     9f8:	04 00       	.word	0x0004	; ????
     9fa:	08 00       	.word	0x0008	; ????
     9fc:	08 00       	.word	0x0008	; ????
     9fe:	30 00       	.word	0x0030	; ????
     a00:	00 00       	nop
     a02:	80 01       	movw	r16, r0
     a04:	00 00       	nop
     a06:	00 0e       	add	r0, r16
     a08:	00 00       	nop
     a0a:	00 30       	cpi	r16, 0x00	; 0
     a0c:	00 00       	nop
     a0e:	00 80       	ld	r0, Z
     a10:	01 00       	.word	0x0001	; ????
     a12:	00 00       	nop
     a14:	0e 00       	.word	0x000e	; ????
     a16:	00 00       	nop
     a18:	30 00       	.word	0x0030	; ????
     a1a:	00 00       	nop
     a1c:	80 01       	movw	r16, r0
     a1e:	00 10       	cpse	r0, r0
     a20:	00 10       	cpse	r0, r0
     a22:	00 20       	and	r0, r0
     a24:	00 20       	and	r0, r0
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <__stack+0x1c9>
     a28:	ff 7f       	andi	r31, 0xFF	; 255
     a2a:	00 80       	ld	r0, Z
     a2c:	ff ff       	.word	0xffff	; ????
     a2e:	00 00       	nop
     a30:	80 01       	movw	r16, r0
     a32:	00 00       	nop
     a34:	c0 01       	movw	r24, r0
     a36:	00 00       	nop
     a38:	70 00       	.word	0x0070	; ????
     a3a:	00 00       	nop
     a3c:	38 00       	.word	0x0038	; ????
     a3e:	00 00       	nop
     a40:	70 00       	.word	0x0070	; ????
     a42:	00 00       	nop
     a44:	00 03       	mulsu	r16, r16
     a46:	00 00       	nop
     a48:	00 38       	cpi	r16, 0x80	; 128
     a4a:	00 00       	nop
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <__stack+0x1ef>
     a4e:	00 00       	nop
     a50:	00 00       	nop
     a52:	00 01       	movw	r0, r0
     a54:	00 00       	nop
     a56:	00 02       	muls	r16, r16
     a58:	00 00       	nop
     a5a:	00 04       	cpc	r0, r0
     a5c:	00 00       	nop
     a5e:	00 08       	sbc	r0, r0
     a60:	00 00       	nop
     a62:	00 10       	cpse	r0, r0
     a64:	00 00       	nop
     a66:	00 20       	and	r0, r0
     a68:	00 00       	nop
     a6a:	00 40       	sbci	r16, 0x00	; 0
     a6c:	00 00       	nop
     a6e:	00 80       	ld	r0, Z
     a70:	00 00       	nop
     a72:	00 00       	nop
     a74:	01 00       	.word	0x0001	; ????
     a76:	03 00       	.word	0x0003	; ????
     a78:	00 00       	nop
     a7a:	06 00       	.word	0x0006	; ????
     a7c:	00 00       	nop
     a7e:	08 00       	.word	0x0008	; ????
     a80:	00 00       	nop
     a82:	20 00       	.word	0x0020	; ????
     a84:	00 00       	nop
     a86:	40 00       	.word	0x0040	; ????
     a88:	00 00       	nop
     a8a:	00 08       	sbc	r0, r0
     a8c:	07 00       	.word	0x0007	; ????
     a8e:	00 38       	cpi	r16, 0x80	; 128
     a90:	1f 00       	.word	0x001f	; ????
     a92:	00 18       	sub	r0, r0
     a94:	33 00       	.word	0x0033	; ????
     a96:	00 10       	cpse	r0, r0
     a98:	42 00       	.word	0x0042	; ????
     a9a:	00 20       	and	r0, r0
     a9c:	84 00       	.word	0x0084	; ????
     a9e:	00 40       	sbci	r16, 0x00	; 0
     aa0:	08 01       	movw	r0, r16
     aa2:	00 80       	ld	r0, Z
     aa4:	11 01       	movw	r2, r2
     aa6:	00 00       	nop
     aa8:	fe 07       	cpc	r31, r30
     aaa:	00 00       	nop
     aac:	f8 0f       	add	r31, r24
     aae:	00 80       	ld	r0, Z
     ab0:	ff 1f       	adc	r31, r31
     ab2:	00 00       	nop
     ab4:	ff 1f       	adc	r31, r31
     ab6:	00 00       	nop
     ab8:	20 20       	and	r2, r0
     aba:	00 00       	nop
     abc:	20 80       	ld	r2, Z
     abe:	00 00       	nop
     ac0:	40 00       	.word	0x0040	; ????
     ac2:	01 00       	.word	0x0001	; ????
     ac4:	80 00       	.word	0x0080	; ????
     ac6:	02 00       	.word	0x0002	; ????
     ac8:	00 07       	cpc	r16, r16
     aca:	06 00       	.word	0x0006	; ????
     acc:	00 fc       	sbrc	r0, 0
     ace:	07 00       	.word	0x0007	; ????
     ad0:	00 e0       	ldi	r16, 0x00	; 0
     ad2:	03 00       	.word	0x0003	; ????
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <__stack+0x277>
     ad6:	07 00       	.word	0x0007	; ????
     ad8:	00 e0       	ldi	r16, 0x00	; 0
     ada:	3f 00       	.word	0x003f	; ????
     adc:	00 e0       	ldi	r16, 0x00	; 0
     ade:	e0 00       	.word	0x00e0	; ????
     ae0:	00 40       	sbci	r16, 0x00	; 0
     ae2:	00 01       	movw	r0, r0
     ae4:	00 80       	ld	r0, Z
     ae6:	00 02       	muls	r16, r16
     ae8:	00 00       	nop
     aea:	01 04       	cpc	r0, r1
     aec:	00 00       	nop
     aee:	04 04       	cpc	r0, r4
     af0:	00 00       	nop
     af2:	38 06       	cpc	r3, r24
     af4:	00 00       	nop
     af6:	c0 07       	cpc	r28, r16
     af8:	00 00       	nop
     afa:	e0 3f       	cpi	r30, 0xF0	; 240
     afc:	00 00       	nop
     afe:	e0 e0       	ldi	r30, 0x00	; 0
     b00:	00 00       	nop
     b02:	40 00       	.word	0x0040	; ????
     b04:	01 00       	.word	0x0001	; ????
     b06:	80 00       	.word	0x0080	; ????
     b08:	02 00       	.word	0x0002	; ????
     b0a:	00 01       	movw	r0, r0
     b0c:	04 00       	.word	0x0004	; ????
     b0e:	00 04       	cpc	r0, r0
     b10:	04 00       	.word	0x0004	; ????
     b12:	80 ff       	sbrs	r24, 0
     b14:	1f 00       	.word	0x001f	; ????
     b16:	00 ff       	sbrs	r16, 0
     b18:	3f 00       	.word	0x003f	; ????
     b1a:	00 80       	ld	r0, Z
     b1c:	0f 00       	.word	0x000f	; ????
     b1e:	00 80       	ld	r0, Z
     b20:	7f 00       	.word	0x007f	; ????
     b22:	00 80       	ld	r0, Z
     b24:	c9 00       	.word	0x00c9	; ????
     b26:	00 80       	ld	r0, Z
     b28:	11 03       	mulsu	r17, r17
     b2a:	00 00       	nop
     b2c:	21 04       	cpc	r2, r1
     b2e:	00 00       	nop
     b30:	42 08       	sbc	r4, r2
     b32:	00 00       	nop
     b34:	84 10       	cpse	r8, r4
     b36:	00 00       	nop
     b38:	10 31       	cpi	r17, 0x10	; 16
     b3a:	00 00       	nop
     b3c:	e0 33       	cpi	r30, 0x30	; 48
     b3e:	00 00       	nop
     b40:	00 27       	eor	r16, r16
     b42:	00 00       	nop
     b44:	40 00       	.word	0x0040	; ????
     b46:	00 00       	nop
     b48:	80 00       	.word	0x0080	; ????
     b4a:	00 00       	nop
     b4c:	c0 ff       	sbrs	r28, 0
     b4e:	07 00       	.word	0x0007	; ????
     b50:	c0 ff       	sbrs	r28, 0
     b52:	0f 00       	.word	0x000f	; ????
     b54:	80 04       	cpc	r8, r0
     b56:	00 00       	nop
     b58:	00 09       	sbc	r16, r0
     b5a:	00 00       	nop
     b5c:	00 02       	muls	r16, r16
     b5e:	00 00       	nop
     b60:	00 00       	nop
     b62:	00 02       	muls	r16, r16
     b64:	00 00       	nop
     b66:	e7 0e       	add	r14, r23
     b68:	00 00       	nop
     b6a:	ff 13       	cpse	r31, r31
     b6c:	00 00       	nop
     b6e:	63 24       	eor	r6, r3
     b70:	00 00       	nop
     b72:	82 48       	sbci	r24, 0x82	; 130
     b74:	00 00       	nop
     b76:	04 91       	lpm	r16, Z
     b78:	00 00       	nop
     b7a:	18 23       	and	r17, r24
     b7c:	01 00       	.word	0x0001	; ????
     b7e:	f8 43       	sbci	r31, 0x38	; 56
     b80:	02 00       	.word	0x0002	; ????
     b82:	90 83       	st	Z, r25
     b84:	07 00       	.word	0x0007	; ????
     b86:	00 00       	nop
     b88:	06 00       	.word	0x0006	; ????
     b8a:	f0 ff       	sbrs	r31, 0
     b8c:	03 00       	.word	0x0003	; ????
     b8e:	e0 ff       	sbrs	r30, 0
     b90:	07 00       	.word	0x0007	; ????
     b92:	00 08       	sbc	r0, r0
     b94:	00 00       	nop
     b96:	00 08       	sbc	r0, r0
     b98:	00 00       	nop
     b9a:	00 08       	sbc	r0, r0
     b9c:	00 00       	nop
     b9e:	00 10       	cpse	r0, r0
     ba0:	00 00       	nop
     ba2:	00 60       	ori	r16, 0x00	; 0
     ba4:	00 00       	nop
     ba6:	00 80       	ld	r0, Z
     ba8:	ff 01       	movw	r30, r30
     baa:	00 00       	nop
     bac:	fe 03       	fmulsu	r23, r22
     bae:	00 20       	and	r0, r0
     bb0:	ff 07       	cpc	r31, r31
     bb2:	00 40       	sbci	r16, 0x00	; 0
     bb4:	fe 0f       	add	r31, r30
     bb6:	00 00       	nop
     bb8:	00 80       	ld	r0, Z
     bba:	00 00       	nop
     bbc:	f9 ff       	.word	0xfff9	; ????
     bbe:	01 00       	.word	0x0001	; ????
     bc0:	f2 ff       	sbrs	r31, 2
     bc2:	01 00       	.word	0x0001	; ????
     bc4:	fc ff       	.word	0xfffc	; ????
     bc6:	00 00       	nop
     bc8:	f8 ff       	.word	0xfff8	; ????
     bca:	01 00       	.word	0x0001	; ????
     bcc:	00 30       	cpi	r16, 0x00	; 0
     bce:	00 00       	nop
     bd0:	00 30       	cpi	r16, 0x00	; 0
     bd2:	00 00       	nop
     bd4:	00 30       	cpi	r16, 0x00	; 0
     bd6:	00 00       	nop
     bd8:	00 f0       	brcs	.+0      	; 0xbda <__stack+0x37b>
     bda:	01 00       	.word	0x0001	; ????
     bdc:	00 30       	cpi	r16, 0x00	; 0
     bde:	0f 00       	.word	0x000f	; ????
     be0:	00 30       	cpi	r16, 0x00	; 0
     be2:	38 00       	.word	0x0038	; ????
     be4:	00 20       	and	r0, r0
     be6:	c0 00       	.word	0x00c0	; ????
     be8:	00 00       	nop
     bea:	00 01       	movw	r0, r0
     bec:	00 f0       	brcs	.+0      	; 0xbee <__stack+0x38f>
     bee:	ff 03       	fmulsu	r23, r23
     bf0:	00 e0       	ldi	r16, 0x00	; 0
     bf2:	ff 07       	cpc	r31, r31
     bf4:	00 00       	nop
     bf6:	fe 0f       	add	r31, r30
     bf8:	00 00       	nop
     bfa:	fc 1f       	adc	r31, r28
     bfc:	00 00       	nop
     bfe:	10 00       	.word	0x0010	; ????
     c00:	00 00       	nop
     c02:	10 00       	.word	0x0010	; ????
     c04:	00 00       	nop
     c06:	20 00       	.word	0x0020	; ????
     c08:	00 00       	nop
     c0a:	c0 00       	.word	0x00c0	; ????
     c0c:	00 00       	nop
     c0e:	00 ff       	sbrs	r16, 0
     c10:	03 00       	.word	0x0003	; ????
     c12:	00 fc       	sbrc	r0, 0
     c14:	07 00       	.word	0x0007	; ????
     c16:	00 04       	cpc	r0, r0
     c18:	00 00       	nop
     c1a:	00 04       	cpc	r0, r0
     c1c:	00 00       	nop
     c1e:	00 08       	sbc	r0, r0
     c20:	00 00       	nop
     c22:	00 30       	cpi	r16, 0x00	; 0
     c24:	00 00       	nop
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	ff 00       	.word	0x00ff	; ????
     c2a:	00 00       	nop
     c2c:	ff 01       	movw	r30, r30
     c2e:	00 80       	ld	r0, Z
     c30:	ff 03       	fmulsu	r23, r23
     c32:	00 00       	nop
     c34:	ff 07       	cpc	r31, r31
     c36:	00 00       	nop
     c38:	0c 00       	.word	0x000c	; ????
     c3a:	00 00       	nop
     c3c:	08 00       	.word	0x0008	; ????
     c3e:	00 00       	nop
     c40:	18 00       	.word	0x0018	; ????
     c42:	00 00       	nop
     c44:	30 00       	.word	0x0030	; ????
     c46:	00 00       	nop
     c48:	60 00       	.word	0x0060	; ????
     c4a:	00 00       	nop
     c4c:	80 ff       	sbrs	r24, 0
     c4e:	01 00       	.word	0x0001	; ????
     c50:	00 fe       	sbrs	r0, 0
     c52:	03 00       	.word	0x0003	; ????
     c54:	00 f8       	bld	r0, 0
     c56:	00 00       	nop
     c58:	00 fc       	sbrc	r0, 0
     c5a:	07 00       	.word	0x0007	; ????
     c5c:	00 1c       	adc	r0, r0
     c5e:	18 00       	.word	0x0018	; ????
     c60:	00 08       	sbc	r0, r0
     c62:	20 00       	.word	0x0020	; ????
     c64:	00 10       	cpse	r0, r0
     c66:	40 00       	.word	0x0040	; ????
     c68:	00 20       	and	r0, r0
     c6a:	80 00       	.word	0x0080	; ????
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <__stack+0x40f>
     c6e:	80 01       	movw	r16, r0
     c70:	00 00       	nop
     c72:	ff 01       	movw	r30, r30
     c74:	00 00       	nop
     c76:	f8 00       	.word	0x00f8	; ????
     c78:	00 00       	nop
     c7a:	fe 7f       	andi	r31, 0xFE	; 254
     c7c:	00 00       	nop
     c7e:	fc ff       	.word	0xfffc	; ????
     c80:	00 00       	nop
     c82:	10 18       	sub	r1, r0
     c84:	00 00       	nop
     c86:	10 40       	sbci	r17, 0x00	; 0
     c88:	00 00       	nop
     c8a:	20 80       	ld	r2, Z
     c8c:	00 00       	nop
     c8e:	40 00       	.word	0x0040	; ????
     c90:	01 00       	.word	0x0001	; ????
     c92:	80 81       	ld	r24, Z
     c94:	03 00       	.word	0x0003	; ????
     c96:	00 fe       	sbrs	r0, 0
     c98:	03 00       	.word	0x0003	; ????
     c9a:	00 f0       	brcs	.+0      	; 0xc9c <__stack+0x43d>
     c9c:	01 00       	.word	0x0001	; ????
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	03 00       	.word	0x0003	; ????
     ca2:	00 f0       	brcs	.+0      	; 0xca4 <__stack+0x445>
     ca4:	1f 00       	.word	0x001f	; ????
     ca6:	00 70       	andi	r16, 0x00	; 0
     ca8:	70 00       	.word	0x0070	; ????
     caa:	00 20       	and	r0, r0
     cac:	80 00       	.word	0x0080	; ????
     cae:	00 40       	sbci	r16, 0x00	; 0
     cb0:	00 01       	movw	r0, r0
     cb2:	00 80       	ld	r0, Z
     cb4:	00 02       	muls	r16, r16
     cb6:	00 00       	nop
     cb8:	02 03       	mulsu	r16, r18
     cba:	00 00       	nop
     cbc:	fc 7f       	andi	r31, 0xFC	; 252
     cbe:	00 00       	nop
     cc0:	fc ff       	.word	0xfffc	; ????
     cc2:	00 00       	nop
     cc4:	f8 3f       	cpi	r31, 0xF8	; 248
     cc6:	00 00       	nop
     cc8:	f0 7f       	andi	r31, 0xF0	; 240
     cca:	00 00       	nop
     ccc:	c0 00       	.word	0x00c0	; ????
     cce:	00 00       	nop
     cd0:	c0 00       	.word	0x00c0	; ????
     cd2:	00 00       	nop
     cd4:	80 00       	.word	0x0080	; ????
     cd6:	00 00       	nop
     cd8:	00 01       	movw	r0, r0
     cda:	00 00       	nop
     cdc:	00 10       	cpse	r0, r0
     cde:	02 00       	.word	0x0002	; ????
     ce0:	00 78       	andi	r16, 0x80	; 128
     ce2:	0c 00       	.word	0x000c	; ????
     ce4:	00 98       	cbi	0x00, 0	; 0
     ce6:	31 00       	.word	0x0031	; ????
     ce8:	00 10       	cpse	r0, r0
     cea:	43 00       	.word	0x0043	; ????
     cec:	00 20       	and	r0, r0
     cee:	84 00       	.word	0x0084	; ????
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <__stack+0x493>
     cf2:	18 01       	movw	r2, r16
     cf4:	00 80       	ld	r0, Z
     cf6:	31 02       	muls	r19, r17
     cf8:	00 00       	nop
     cfa:	e6 03       	fmuls	r22, r22
     cfc:	00 00       	nop
     cfe:	90 03       	fmuls	r17, r16
     d00:	00 00       	nop
     d02:	04 00       	.word	0x0004	; ????
     d04:	00 00       	nop
     d06:	08 00       	.word	0x0008	; ????
     d08:	00 00       	nop
     d0a:	fe 3f       	cpi	r31, 0xFE	; 254
     d0c:	00 00       	nop
     d0e:	fc ff       	.word	0xfffc	; ????
     d10:	00 00       	nop
     d12:	40 00       	.word	0x0040	; ????
     d14:	01 00       	.word	0x0001	; ????
     d16:	80 00       	.word	0x0080	; ????
     d18:	02 00       	.word	0x0002	; ????
     d1a:	00 00       	nop
     d1c:	04 00       	.word	0x0004	; ????
     d1e:	00 fe       	sbrs	r0, 0
     d20:	03 00       	.word	0x0003	; ????
     d22:	00 fc       	sbrc	r0, 0
     d24:	0f 00       	.word	0x000f	; ????
     d26:	00 00       	nop
     d28:	30 00       	.word	0x0030	; ????
     d2a:	00 00       	nop
     d2c:	40 00       	.word	0x0040	; ????
     d2e:	00 00       	nop
     d30:	80 00       	.word	0x0080	; ????
     d32:	00 00       	nop
     d34:	00 01       	movw	r0, r0
     d36:	00 00       	nop
     d38:	80 01       	movw	r16, r0
     d3a:	00 00       	nop
     d3c:	ff 07       	cpc	r31, r31
     d3e:	00 00       	nop
     d40:	fe 0f       	add	r31, r30
     d42:	00 00       	nop
     d44:	04 00       	.word	0x0004	; ????
     d46:	00 00       	nop
     d48:	78 00       	.word	0x0078	; ????
     d4a:	00 00       	nop
     d4c:	c0 07       	cpc	r28, r16
     d4e:	00 00       	nop
     d50:	00 7c       	andi	r16, 0xC0	; 192
     d52:	00 00       	nop
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <__stack+0x4f7>
     d56:	01 00       	.word	0x0001	; ????
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <__stack+0x4fb>
     d5a:	03 00       	.word	0x0003	; ????
     d5c:	00 f8       	bld	r0, 0
     d5e:	00 00       	nop
     d60:	00 3e       	cpi	r16, 0xE0	; 224
     d62:	00 00       	nop
     d64:	00 0c       	add	r0, r0
     d66:	00 00       	nop
     d68:	00 18       	sub	r0, r0
     d6a:	00 00       	nop
     d6c:	00 f0       	brcs	.+0      	; 0xd6e <__stack+0x50f>
     d6e:	01 00       	.word	0x0001	; ????
     d70:	00 00       	nop
     d72:	1f 00       	.word	0x001f	; ????
     d74:	00 00       	nop
     d76:	f0 01       	movw	r30, r0
     d78:	00 00       	nop
     d7a:	c0 03       	fmuls	r20, r16
     d7c:	00 00       	nop
     d7e:	f8 00       	.word	0x00f8	; ????
     d80:	00 00       	nop
     d82:	3e 00       	.word	0x003e	; ????
     d84:	00 00       	nop
     d86:	7c 00       	.word	0x007c	; ????
     d88:	00 00       	nop
     d8a:	c0 07       	cpc	r28, r16
     d8c:	00 00       	nop
     d8e:	00 7c       	andi	r16, 0xC0	; 192
     d90:	00 00       	nop
     d92:	00 f0       	brcs	.+0      	; 0xd94 <__stack+0x535>
     d94:	00 00       	nop
     d96:	00 7c       	andi	r16, 0xC0	; 192
     d98:	00 00       	nop
     d9a:	80 0f       	add	r24, r16
     d9c:	00 00       	nop
     d9e:	00 03       	mulsu	r16, r16
     da0:	00 00       	nop
     da2:	00 02       	muls	r16, r16
     da4:	08 00       	.word	0x0008	; ????
     da6:	00 0c       	add	r0, r0
     da8:	18 00       	.word	0x0018	; ????
     daa:	00 38       	cpi	r16, 0x80	; 128
     dac:	1c 00       	.word	0x001c	; ????
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <__stack+0x551>
     db0:	0f 00       	.word	0x000f	; ????
     db2:	00 00       	nop
     db4:	0e 00       	.word	0x000e	; ????
     db6:	00 00       	nop
     db8:	3f 00       	.word	0x003f	; ????
     dba:	00 00       	nop
     dbc:	c3 01       	movw	r24, r6
     dbe:	00 00       	nop
     dc0:	01 06       	cpc	r0, r17
     dc2:	00 00       	nop
     dc4:	00 08       	sbc	r0, r0
     dc6:	00 00       	nop
     dc8:	04 80       	ldd	r0, Z+4	; 0x04
     dca:	00 00       	nop
     dcc:	78 00       	.word	0x0078	; ????
     dce:	01 00       	.word	0x0001	; ????
     dd0:	c0 07       	cpc	r28, r16
     dd2:	02 00       	.word	0x0002	; ????
     dd4:	00 7c       	andi	r16, 0xC0	; 192
     dd6:	03 00       	.word	0x0003	; ????
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <__stack+0x57b>
     dda:	03 00       	.word	0x0003	; ????
     ddc:	00 e0       	ldi	r16, 0x00	; 0
     dde:	00 00       	nop
     de0:	00 78       	andi	r16, 0x80	; 128
     de2:	00 00       	nop
     de4:	00 1e       	adc	r0, r16
     de6:	00 00       	nop
     de8:	00 04       	cpc	r0, r0
     dea:	00 00       	nop
     dec:	00 08       	sbc	r0, r0
     dee:	30 00       	.word	0x0030	; ????
     df0:	00 10       	cpse	r0, r0
     df2:	70 00       	.word	0x0070	; ????
     df4:	00 20       	and	r0, r0
     df6:	b8 00       	.word	0x00b8	; ????
     df8:	00 40       	sbci	r16, 0x00	; 0
     dfa:	38 01       	movw	r6, r16
     dfc:	00 80       	ld	r0, Z
     dfe:	1c 02       	muls	r17, r28
     e00:	00 00       	nop
     e02:	1f 04       	cpc	r1, r15
     e04:	00 00       	nop
     e06:	0e 08       	sbc	r0, r14
     e08:	00 00       	nop
     e0a:	04 10       	cpse	r0, r4
     e0c:	00 00       	nop
     e0e:	00 01       	movw	r0, r0
     e10:	00 00       	nop
     e12:	00 07       	cpc	r16, r16
     e14:	00 00       	nop
     e16:	f8 fb       	.word	0xfbf8	; ????
     e18:	03 00       	.word	0x0003	; ????
     e1a:	f8 e3       	ldi	r31, 0x38	; 56
     e1c:	0f 00       	.word	0x000f	; ????
     e1e:	10 00       	.word	0x0010	; ????
     e20:	10 00       	.word	0x0010	; ????
     e22:	20 00       	.word	0x0020	; ????
     e24:	20 00       	.word	0x0020	; ????
     e26:	c0 ff       	sbrs	r28, 0
     e28:	0f 00       	.word	0x000f	; ????
     e2a:	80 ff       	sbrs	r24, 0
     e2c:	1f 00       	.word	0x001f	; ????
     e2e:	00 01       	movw	r0, r0
     e30:	00 01       	movw	r0, r0
     e32:	00 02       	muls	r16, r16
     e34:	00 02       	muls	r16, r16
     e36:	00 fc       	sbrc	r0, 0
     e38:	f1 07       	cpc	r31, r17
     e3a:	00 f0       	brcs	.+0      	; 0xe3c <__stack+0x5dd>
     e3c:	f7 07       	cpc	r31, r23
     e3e:	00 00       	nop
     e40:	38 00       	.word	0x0038	; ????
     e42:	00 00       	nop
     e44:	20 00       	.word	0x0020	; ????
     e46:	00 00       	nop
     e48:	c0 00       	.word	0x00c0	; ????
     e4a:	00 00       	nop
     e4c:	c0 00       	.word	0x00c0	; ????
     e4e:	00 00       	nop
     e50:	c0 00       	.word	0x00c0	; ????
     e52:	00 00       	nop
     e54:	80 01       	movw	r16, r0
     e56:	00 00       	nop
     e58:	00 06       	cpc	r0, r16
     e5a:	00 00       	nop
     e5c:	00 08       	sbc	r0, r0
     e5e:	00 00       	nop
     e60:	00 30       	cpi	r16, 0x00	; 0
     e62:	00 00       	nop
     e64:	00 40       	sbci	r16, 0x00	; 0
     e66:	00 00       	nop
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <__stack+0x60b>
     e6a:	00 00       	nop
     e6c:	00 c0       	rjmp	.+0      	; 0xe6e <__stack+0x60f>
     e6e:	00 00       	nop
     e70:	00 dc       	rcall	.-2048   	; 0x672 <__trampolines_end+0x5d8>
     e72:	3f 00       	.word	0x003f	; ????
     e74:	00 f8       	bld	r0, 0
     e76:	7f 00       	.word	0x007f	; ????
     e78:	00 c8       	rjmp	.-4096   	; 0xfffffe7a <__eeprom_end+0xff7efe7a>
     e7a:	00 00       	nop
     e7c:	00 90 00 00 	lds	r0, 0x0000
     e80:	00 20       	and	r0, r0
     e82:	00 00       	nop
     e84:	00 40       	sbci	r16, 0x00	; 0
     e86:	00 00       	nop
     e88:	00 80       	ld	r0, Z
     e8a:	00 00       	nop
     e8c:	00 00       	nop
     e8e:	03 00       	.word	0x0003	; ????
     e90:	00 00       	nop
     e92:	fc 3f       	cpi	r31, 0xFC	; 252
     e94:	00 00       	nop
     e96:	f8 7f       	andi	r31, 0xF8	; 248
     e98:	00 00       	nop
     e9a:	70 00       	.word	0x0070	; ????
     e9c:	00 00       	nop
     e9e:	a0 01       	movw	r20, r0
     ea0:	00 00       	nop
     ea2:	60 f2       	brcs	.-104    	; 0xe3c <__stack+0x5dd>
     ea4:	03 00       	.word	0x0003	; ????
     ea6:	c0 f4       	brcc	.+48     	; 0xed8 <__stack+0x679>
     ea8:	07 00       	.word	0x0007	; ????
     eaa:	80 36       	cpi	r24, 0x60	; 96
     eac:	08 00       	.word	0x0008	; ????
     eae:	00 3e       	cpi	r16, 0xE0	; 224
     eb0:	10 00       	.word	0x0010	; ????
     eb2:	00 00       	nop
     eb4:	20 00       	.word	0x0020	; ????
     eb6:	00 fc       	sbrc	r0, 0
     eb8:	7f 00       	.word	0x007f	; ????
     eba:	00 f8       	bld	r0, 0
     ebc:	ff 00       	.word	0x00ff	; ????
     ebe:	00 e0       	ldi	r16, 0x00	; 0
     ec0:	01 00       	.word	0x0001	; ????
     ec2:	00 60       	ori	r16, 0x00	; 0
     ec4:	02 00       	.word	0x0002	; ????
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <__stack+0x669>
     ec8:	e4 07       	cpc	r30, r20
     eca:	00 80       	ld	r0, Z
     ecc:	ef 0f       	add	r30, r31
     ece:	00 00       	nop
     ed0:	62 10       	cpse	r6, r2
     ed2:	00 00       	nop
     ed4:	7e 20       	and	r7, r14
     ed6:	00 00       	nop
     ed8:	00 40       	sbci	r16, 0x00	; 0
     eda:	00 00       	nop
     edc:	f8 ff       	.word	0xfff8	; ????
     ede:	00 00       	nop
     ee0:	f0 ff       	sbrs	r31, 0
     ee2:	01 00       	.word	0x0001	; ????
     ee4:	c0 ff       	sbrs	r28, 0
     ee6:	03 00       	.word	0x0003	; ????
     ee8:	80 ff       	sbrs	r24, 0
     eea:	07 00       	.word	0x0007	; ????
     eec:	80 e1       	ldi	r24, 0x10	; 16
     eee:	03 00       	.word	0x0003	; ????
     ef0:	00 f1       	brcs	.+64     	; 0xf32 <__stack+0x6d3>
     ef2:	00 00       	nop
     ef4:	00 f2       	brcs	.-128    	; 0xe76 <__stack+0x617>
     ef6:	01 00       	.word	0x0001	; ????
     ef8:	00 44       	sbci	r16, 0x40	; 64
     efa:	02 00       	.word	0x0002	; ????
     efc:	00 88       	ldd	r0, Z+16	; 0x10
     efe:	03 00       	.word	0x0003	; ????
     f00:	00 30       	cpi	r16, 0x00	; 0
     f02:	00 00       	nop
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <__stack+0x6a7>
     f06:	ff 03       	fmulsu	r23, r23
     f08:	00 80       	ld	r0, Z
     f0a:	ff 07       	cpc	r31, r31
     f0c:	00 00       	nop
     f0e:	fe 0f       	add	r31, r30
     f10:	00 00       	nop
     f12:	fe 1f       	adc	r31, r30
     f14:	00 00       	nop
     f16:	06 0f       	add	r16, r22
     f18:	00 00       	nop
     f1a:	8c 03       	fmulsu	r16, r20
     f1c:	00 00       	nop
     f1e:	b0 07       	cpc	r27, r16
     f20:	00 00       	nop
     f22:	60 09       	sbc	r22, r0
     f24:	00 00       	nop
     f26:	60 1c       	adc	r6, r0
     f28:	00 00       	nop
     f2a:	c0 00       	.word	0x00c0	; ????
     f2c:	00 00       	nop
     f2e:	00 ff       	sbrs	r16, 0
     f30:	0f 00       	.word	0x000f	; ????
     f32:	00 fc       	sbrc	r0, 0
     f34:	1f 00       	.word	0x001f	; ????
     f36:	00 18       	sub	r0, r0
     f38:	00 00       	nop
     f3a:	00 78       	andi	r16, 0x80	; 128
     f3c:	00 00       	nop
     f3e:	00 98       	cbi	0x00, 0	; 0
     f40:	78 00       	.word	0x0078	; ????
     f42:	00 30       	cpi	r16, 0x00	; 0
     f44:	f9 01       	movw	r30, r18
     f46:	00 e0       	ldi	r16, 0x00	; 0
     f48:	11 02       	muls	r17, r17
     f4a:	00 80       	ld	r0, Z
     f4c:	f9 07       	cpc	r31, r25
     f4e:	00 80       	ld	r0, Z
     f50:	f9 07       	cpc	r31, r25
     f52:	00 00       	nop
     f54:	9f 00       	.word	0x009f	; ????
     f56:	00 00       	nop
     f58:	00 03       	mulsu	r16, r16
     f5a:	00 00       	nop
     f5c:	00 0c       	add	r0, r0
     f5e:	00 00       	nop
     f60:	00 30       	cpi	r16, 0x00	; 0
     f62:	00 00       	nop
     f64:	f0 ff       	sbrs	r31, 0
     f66:	01 00       	.word	0x0001	; ????
     f68:	e0 ff       	sbrs	r30, 0
     f6a:	03 00       	.word	0x0003	; ????
     f6c:	00 1c       	adc	r0, r0
     f6e:	00 00       	nop
     f70:	00 e0       	ldi	r16, 0x00	; 0
     f72:	00 00       	nop
     f74:	00 0e       	add	r0, r16
     f76:	07 00       	.word	0x0007	; ????
     f78:	00 16       	cp	r0, r16
     f7a:	30 00       	.word	0x0030	; ????
     f7c:	00 24       	eor	r0, r0
     f7e:	40 00       	.word	0x0040	; ????
     f80:	00 f8       	bld	r0, 0
     f82:	ff 00       	.word	0x00ff	; ????
     f84:	00 e0       	ldi	r16, 0x00	; 0
     f86:	ff 00       	.word	0x00ff	; ????
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <__stack+0x72b>
     f8a:	00 00       	nop
     f8c:	00 80       	ld	r0, Z
     f8e:	38 00       	.word	0x0038	; ????
     f90:	00 80       	ld	r0, Z
     f92:	58 00       	.word	0x0058	; ????
     f94:	00 00       	nop
     f96:	b1 00       	.word	0x00b1	; ????
     f98:	00 00       	nop
     f9a:	c2 0f       	add	r28, r18
     f9c:	00 00       	nop
     f9e:	04 60       	ori	r16, 0x04	; 4
     fa0:	00 00       	nop
     fa2:	18 80       	ld	r1, Y
     fa4:	00 00       	nop
     fa6:	f0 ff       	sbrs	r31, 0
     fa8:	01 00       	.word	0x0001	; ????
     faa:	c0 ff       	sbrs	r28, 0
     fac:	01 00       	.word	0x0001	; ????
     fae:	00 30       	cpi	r16, 0x00	; 0
     fb0:	00 00       	nop
     fb2:	00 93 00 00 	sts	0x0000, r16
     fb6:	00 22       	and	r0, r16
     fb8:	01 00       	.word	0x0001	; ????
     fba:	00 c2       	rjmp	.+1024   	; 0x13bc <__stack+0xb5d>
     fbc:	3f 00       	.word	0x003f	; ????
     fbe:	00 04       	cpc	r0, r0
     fc0:	7f 00       	.word	0x007f	; ????
     fc2:	00 08       	sbc	r0, r0
     fc4:	60 00       	.word	0x0060	; ????
     fc6:	00 10       	cpse	r0, r0
     fc8:	60 00       	.word	0x0060	; ????
     fca:	00 20       	and	r0, r0
     fcc:	e0 01       	movw	r28, r0
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <__stack+0x771>
     fd0:	c0 04       	cpc	r12, r0
     fd2:	00 00       	nop
     fd4:	ff 09       	sbc	r31, r15
     fd6:	00 00       	nop
     fd8:	fe 1e       	adc	r15, r30
     fda:	00 00       	nop
     fdc:	00 18       	sub	r0, r0
     fde:	00 00       	nop
     fe0:	30 00       	.word	0x0030	; ????
     fe2:	00 00       	nop
     fe4:	d0 00       	.word	0x00d0	; ????
     fe6:	00 00       	nop
     fe8:	30 f9       	bld	r19, 0
     fea:	01 00       	.word	0x0001	; ????
     fec:	60 fa       	bst	r6, 0
     fee:	03 00       	.word	0x0003	; ????
     ff0:	c0 1b       	sub	r28, r16
     ff2:	04 00       	.word	0x0004	; ????
     ff4:	00 1b       	sub	r16, r16
     ff6:	08 00       	.word	0x0008	; ????
     ff8:	00 0c       	add	r0, r0
     ffa:	10 00       	.word	0x0010	; ????
     ffc:	00 08       	sbc	r0, r0
     ffe:	20 00       	.word	0x0020	; ????
    1000:	00 f8       	bld	r0, 0
    1002:	7f 00       	.word	0x007f	; ????
    1004:	00 dc       	rcall	.-2048   	; 0x806 <__trampolines_end+0x76c>
    1006:	ff 00       	.word	0x00ff	; ????
    1008:	00 18       	sub	r0, r0
    100a:	00 00       	nop
    100c:	00 c0       	rjmp	.+0      	; 0x100e <__stack+0x7af>
    100e:	03 00       	.word	0x0003	; ????
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <__stack+0x7b3>
    1012:	04 00       	.word	0x0004	; ????
    1014:	00 80       	ld	r0, Z
    1016:	c9 0f       	add	r28, r25
    1018:	00 00       	nop
    101a:	df 1f       	adc	r29, r31
    101c:	00 00       	nop
    101e:	cc 20       	and	r12, r12
    1020:	00 00       	nop
    1022:	cc 40       	sbci	r28, 0x0C	; 12
    1024:	00 00       	nop
    1026:	f0 80       	ld	r15, Z
    1028:	00 00       	nop
    102a:	40 00       	.word	0x0040	; ????
    102c:	01 00       	.word	0x0001	; ????
    102e:	c0 ff       	sbrs	r28, 0
    1030:	03 00       	.word	0x0003	; ????
    1032:	e0 fe       	sbrs	r14, 0
    1034:	07 00       	.word	0x0007	; ????
    1036:	c0 00       	.word	0x00c0	; ????
    1038:	00 00       	nop
    103a:	00 ee       	ldi	r16, 0xE0	; 224
    103c:	0f 00       	.word	0x000f	; ????
    103e:	00 fe       	sbrs	r0, 0
    1040:	3f 00       	.word	0x003f	; ????
    1042:	00 64       	ori	r16, 0x40	; 64
    1044:	48 00       	.word	0x0048	; ????
    1046:	00 48       	sbci	r16, 0x80	; 128
    1048:	90 00       	.word	0x0090	; ????
    104a:	00 10       	cpse	r0, r0
    104c:	c0 00       	.word	0x00c0	; ????
    104e:	00 20       	and	r0, r0
    1050:	00 00       	nop
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <__stack+0x7f5>
    1054:	80 03       	fmuls	r16, r16
    1056:	00 00       	nop
    1058:	ff 09       	sbc	r31, r15
    105a:	00 00       	nop
    105c:	fe 13       	cpse	r31, r30
    105e:	00 00       	nop
    1060:	00 3e       	cpi	r16, 0xE0	; 224
    1062:	00 00       	nop
    1064:	00 08       	sbc	r0, r0
    1066:	00 00       	nop
    1068:	00 20       	and	r0, r0
    106a:	00 00       	nop
    106c:	f0 ff       	sbrs	r31, 0
    106e:	01 00       	.word	0x0001	; ????
    1070:	e0 ff       	sbrs	r30, 0
    1072:	03 00       	.word	0x0003	; ????
    1074:	80 fb       	bst	r24, 0
    1076:	03 00       	.word	0x0003	; ????
    1078:	80 ff       	sbrs	r24, 0
    107a:	0f 00       	.word	0x000f	; ????
    107c:	00 19       	sub	r16, r0
    107e:	12 00       	.word	0x0012	; ????
    1080:	00 12       	cpse	r0, r16
    1082:	24 00       	.word	0x0024	; ????
    1084:	00 04       	cpc	r0, r0
    1086:	30 00       	.word	0x0030	; ????
    1088:	00 08       	sbc	r0, r0
    108a:	00 00       	nop
    108c:	00 30       	cpi	r16, 0x00	; 0
    108e:	00 18       	sub	r0, r0
    1090:	00 c0       	rjmp	.+0      	; 0x1092 <__stack+0x833>
    1092:	ff 79       	andi	r31, 0x9F	; 159
    1094:	00 80       	ld	r0, Z
    1096:	ff d7       	rcall	.+4094   	; 0x2096 <CalcTextWidth+0xb0>
    1098:	00 00       	nop
    109a:	00 e8       	ldi	r16, 0x80	; 128
    109c:	01 00       	.word	0x0001	; ????
    109e:	00 10       	cpse	r0, r0
    10a0:	02 00       	.word	0x0002	; ????
    10a2:	00 20       	and	r0, r0
    10a4:	04 00       	.word	0x0004	; ????
    10a6:	fc 7f       	andi	r31, 0xFC	; 252
    10a8:	0f 00       	.word	0x000f	; ????
    10aa:	f8 7f       	andi	r31, 0xF8	; 248
    10ac:	0e 00       	.word	0x000e	; ????
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <__stack+0x851>
    10b0:	00 00       	nop
    10b2:	00 40       	sbci	r16, 0x00	; 0
    10b4:	02 00       	.word	0x0002	; ????
    10b6:	00 80       	ld	r0, Z
    10b8:	e4 00       	.word	0x00e4	; ????
    10ba:	00 f7       	brcc	.-64     	; 0x107c <__stack+0x81d>
    10bc:	6f 03       	fmul	r22, r23
    10be:	00 ff       	sbrs	r16, 0
    10c0:	cf 06       	cpc	r12, r31
    10c2:	00 32       	cpi	r16, 0x20	; 32
    10c4:	80 05       	cpc	r24, r0
    10c6:	00 24       	eor	r0, r0
    10c8:	00 07       	cpc	r16, r16
    10ca:	00 08       	sbc	r0, r0
    10cc:	00 06       	cpc	r0, r16
    10ce:	00 10       	cpse	r0, r0
    10d0:	00 18       	sub	r0, r0
    10d2:	00 20       	and	r0, r0
    10d4:	00 60       	ori	r16, 0x00	; 0
    10d6:	00 80       	ld	r0, Z
    10d8:	ff ff       	.word	0xffff	; ????
    10da:	01 00       	.word	0x0001	; ????
    10dc:	ff ff       	.word	0xffff	; ????
    10de:	01 00       	.word	0x0001	; ????
    10e0:	00 0c       	add	r0, r0
    10e2:	00 00       	nop
    10e4:	00 24       	eor	r0, r0
    10e6:	07 00       	.word	0x0007	; ????
    10e8:	00 48       	sbci	r16, 0x80	; 128
    10ea:	0e 00       	.word	0x000e	; ????
    10ec:	70 ff       	sbrs	r23, 0
    10ee:	34 00       	.word	0x0034	; ????
    10f0:	f0 ff       	sbrs	r31, 0
    10f2:	28 00       	.word	0x0028	; ????
    10f4:	20 03       	mulsu	r18, r16
    10f6:	7c 00       	.word	0x007c	; ????
    10f8:	40 02       	muls	r20, r16
    10fa:	38 00       	.word	0x0038	; ????
    10fc:	80 00       	.word	0x0080	; ????
    10fe:	80 01       	movw	r16, r0
    1100:	00 01       	movw	r0, r0
    1102:	c0 00       	.word	0x00c0	; ????
    1104:	00 06       	cpc	r0, r16
    1106:	00 03       	mulsu	r16, r16
    1108:	00 f8       	bld	r0, 0
    110a:	ff 0f       	add	r31, r31
    110c:	00 f0       	brcs	.+0      	; 0x110e <__stack+0x8af>
    110e:	ff 1f       	adc	r31, r31
    1110:	00 00       	nop
    1112:	00 f0       	brcs	.+0      	; 0x1114 <__stack+0x8b5>
    1114:	00 80       	ld	r0, Z
    1116:	01 20       	and	r0, r1
    1118:	01 80       	ldd	r0, Z+1	; 0x01
    111a:	33 c0       	rjmp	.+102    	; 0x1182 <__stack+0x923>
    111c:	01 80       	ldd	r0, Z+1	; 0x01
    111e:	b5 e0       	ldi	r27, 0x05	; 5
    1120:	03 00       	.word	0x0003	; ????
    1122:	29 01       	movw	r4, r18
    1124:	0f 00       	.word	0x000f	; ????
    1126:	d2 03       	fmuls	r21, r18
    1128:	0c 00       	.word	0x000c	; ????
    112a:	2c 78       	andi	r18, 0x8C	; 140
    112c:	17 00       	.word	0x0017	; ????
    112e:	d0 80       	ld	r13, Z
    1130:	4a 00       	.word	0x004a	; ????
    1132:	a0 ff       	sbrs	r26, 0
    1134:	f5 00       	.word	0x00f5	; ????
    1136:	60 fe       	sbrs	r6, 0
    1138:	f1 00       	.word	0x00f1	; ????
    113a:	80 07       	cpc	r24, r16
    113c:	00 00       	nop
    113e:	80 09       	sbc	r24, r0
    1140:	00 00       	nop
    1142:	00 13       	cpse	r16, r16
    1144:	00 00       	nop
    1146:	00 3a       	cpi	r16, 0xA0	; 160
    1148:	00 00       	nop
    114a:	00 98       	cbi	0x00, 0	; 0
    114c:	7f 00       	.word	0x007f	; ????
    114e:	00 98       	cbi	0x00, 0	; 0
    1150:	ff 00       	.word	0x00ff	; ????
    1152:	00 f0       	brcs	.+0      	; 0x1154 <__stack+0x8f5>
    1154:	79 00       	.word	0x0079	; ????
    1156:	00 c0       	rjmp	.+0      	; 0x1158 <__stack+0x8f9>
    1158:	1c 00       	.word	0x001c	; ????
    115a:	00 00       	nop
    115c:	06 00       	.word	0x0006	; ????
    115e:	00 00       	nop
    1160:	03 00       	.word	0x0003	; ????
    1162:	00 00       	nop
    1164:	03 00       	.word	0x0003	; ????
    1166:	00 00       	nop
    1168:	fe 3f       	cpi	r31, 0xFE	; 254
    116a:	00 00       	nop
    116c:	f8 7f       	andi	r31, 0xF8	; 248
    116e:	00 00       	nop
    1170:	e0 ff       	sbrs	r30, 0
    1172:	00 00       	nop
    1174:	e0 ff       	sbrs	r30, 0
    1176:	01 00       	.word	0x0001	; ????
    1178:	60 00       	.word	0x0060	; ????
    117a:	03 00       	.word	0x0003	; ????
    117c:	c0 18       	sub	r12, r0
    117e:	01 00       	.word	0x0001	; ????
    1180:	00 5b       	subi	r16, 0xB0	; 176
    1182:	01 00       	.word	0x0001	; ????
    1184:	00 b6       	in	r0, 0x30	; 48
    1186:	01 00       	.word	0x0001	; ????
    1188:	00 c6       	rjmp	.+3072   	; 0x1d8a <DrawChar+0x150>
    118a:	1d 00       	.word	0x001d	; ????
    118c:	00 0c       	add	r0, r0
    118e:	7c 00       	.word	0x007c	; ????
    1190:	00 f0       	brcs	.+0      	; 0x1192 <__stack+0x933>
    1192:	9f 00       	.word	0x009f	; ????
    1194:	00 c0       	rjmp	.+0      	; 0x1196 <__stack+0x937>
    1196:	3f 01       	movw	r6, r30
    1198:	00 00       	nop
    119a:	e0 01       	movw	r28, r0
    119c:	00 00       	nop
    119e:	80 00       	.word	0x0080	; ????
    11a0:	00 00       	nop
    11a2:	00 02       	muls	r16, r16
    11a4:	00 00       	nop
    11a6:	ff 1f       	adc	r31, r31
    11a8:	00 00       	nop
    11aa:	fe 3f       	cpi	r31, 0xFE	; 254
    11ac:	00 00       	nop
    11ae:	b8 3f       	cpi	r27, 0xF8	; 248
    11b0:	00 00       	nop
    11b2:	f8 ff       	.word	0xfff8	; ????
    11b4:	00 00       	nop
    11b6:	90 21       	and	r25, r0
    11b8:	01 00       	.word	0x0001	; ????
    11ba:	20 41       	sbci	r18, 0x10	; 16
    11bc:	02 00       	.word	0x0002	; ????
    11be:	40 00       	.word	0x0040	; ????
    11c0:	03 00       	.word	0x0003	; ????
    11c2:	80 00       	.word	0x0080	; ????
    11c4:	00 00       	nop
    11c6:	00 03       	mulsu	r16, r16
    11c8:	00 00       	nop
    11ca:	00 fc       	sbrc	r0, 0
    11cc:	3f 00       	.word	0x003f	; ????
    11ce:	00 f8       	bld	r0, 0
    11d0:	7f 00       	.word	0x007f	; ????
    11d2:	00 00       	nop
    11d4:	20 00       	.word	0x0020	; ????
    11d6:	00 00       	nop
    11d8:	e0 00       	.word	0x00e0	; ????
    11da:	00 00       	nop
    11dc:	60 03       	mulsu	r22, r16
    11de:	00 c0       	rjmp	.+0      	; 0x11e0 <__stack+0x981>
    11e0:	ff 04       	cpc	r15, r15
    11e2:	00 80       	ld	r0, Z
    11e4:	7f 0d       	add	r23, r15
    11e6:	00 00       	nop
    11e8:	00 0e       	add	r0, r16
    11ea:	00 00       	nop
    11ec:	fc 3f       	cpi	r31, 0xFC	; 252
    11ee:	00 00       	nop
    11f0:	f8 7f       	andi	r31, 0xF8	; 248
    11f2:	00 00       	nop
    11f4:	18 c0       	rjmp	.+48     	; 0x1226 <__stack+0x9c7>
    11f6:	00 00       	nop
    11f8:	10 47       	sbci	r17, 0x70	; 112
    11fa:	00 00       	nop
    11fc:	20 7b       	andi	r18, 0xB0	; 176
    11fe:	00 00       	nop
    1200:	40 76       	andi	r20, 0x60	; 96
    1202:	00 00       	nop
    1204:	80 38       	cpi	r24, 0x80	; 128
    1206:	00 00       	nop
    1208:	00 03       	mulsu	r16, r16
    120a:	00 00       	nop
    120c:	00 fc       	sbrc	r0, 0
    120e:	3f 00       	.word	0x003f	; ????
    1210:	00 f8       	bld	r0, 0
    1212:	7f 00       	.word	0x007f	; ????
    1214:	00 e0       	ldi	r16, 0x00	; 0
    1216:	ff 00       	.word	0x00ff	; ????
    1218:	00 e0       	ldi	r16, 0x00	; 0
    121a:	ff 01       	movw	r30, r30
    121c:	00 60       	ori	r16, 0x00	; 0
    121e:	00 03       	mulsu	r16, r16
    1220:	00 c0       	rjmp	.+0      	; 0x1222 <__stack+0x9c3>
    1222:	18 01       	movw	r2, r16
    1224:	00 00       	nop
    1226:	5b 01       	movw	r10, r22
    1228:	00 00       	nop
    122a:	b6 01       	movw	r22, r12
    122c:	00 00       	nop
    122e:	c6 01       	movw	r24, r12
    1230:	00 00       	nop
    1232:	0c 00       	.word	0x000c	; ????
    1234:	00 00       	nop
    1236:	f0 ff       	sbrs	r31, 0
    1238:	00 00       	nop
    123a:	c0 ff       	sbrs	r28, 0
    123c:	01 00       	.word	0x0001	; ????
    123e:	c0 fd       	sbrc	r28, 0
    1240:	01 00       	.word	0x0001	; ????
    1242:	c0 ff       	sbrs	r28, 0
    1244:	07 00       	.word	0x0007	; ????
    1246:	80 0c       	add	r8, r0
    1248:	09 00       	.word	0x0009	; ????
    124a:	00 09       	sbc	r16, r0
    124c:	1e 00       	.word	0x001e	; ????
    124e:	00 02       	muls	r16, r16
    1250:	10 00       	.word	0x0010	; ????
    1252:	00 04       	cpc	r0, r0
    1254:	00 00       	nop
    1256:	00 18       	sub	r0, r0
    1258:	00 00       	nop
    125a:	00 e0       	ldi	r16, 0x00	; 0
    125c:	ff 01       	movw	r30, r30
    125e:	00 c0       	rjmp	.+0      	; 0x1260 <__stack+0xa01>
    1260:	ff 03       	fmulsu	r23, r23
    1262:	00 80       	ld	r0, Z
    1264:	03 00       	.word	0x0003	; ????
    1266:	00 80       	ld	r0, Z
    1268:	05 00       	.word	0x0005	; ????
    126a:	00 00       	nop
    126c:	09 00       	.word	0x0009	; ????
    126e:	00 00       	nop
    1270:	fe 3f       	cpi	r31, 0xFE	; 254
    1272:	00 00       	nop
    1274:	f8 7f       	andi	r31, 0xF8	; 248
    1276:	00 00       	nop
    1278:	00 1e       	adc	r0, r16
    127a:	00 00       	nop
    127c:	00 03       	mulsu	r16, r16
    127e:	00 00       	nop
    1280:	80 01       	movw	r16, r0
    1282:	00 00       	nop
    1284:	80 00       	.word	0x0080	; ????
    1286:	00 00       	nop
    1288:	80 01       	movw	r16, r0
    128a:	00 00       	nop
    128c:	00 ff       	sbrs	r16, 0
    128e:	1f 00       	.word	0x001f	; ????
    1290:	00 fc       	sbrc	r0, 0
    1292:	3f 00       	.word	0x003f	; ????
    1294:	00 38       	cpi	r16, 0x80	; 128
    1296:	3f 00       	.word	0x003f	; ????
    1298:	00 50       	subi	r16, 0x00	; 0
    129a:	fe 00       	.word	0x00fe	; ????
    129c:	00 b0       	in	r0, 0x00	; 0
    129e:	00 01       	movw	r0, r0
    12a0:	00 20       	and	r0, r0
    12a2:	01 02       	muls	r16, r17
    12a4:	00 40       	sbci	r16, 0x00	; 0
    12a6:	02 04       	cpc	r0, r2
    12a8:	00 80       	ld	r0, Z
    12aa:	05 08       	sbc	r0, r5
    12ac:	00 00       	nop
    12ae:	1a 10       	cpse	r1, r10
    12b0:	00 00       	nop
    12b2:	e4 3f       	cpi	r30, 0xF4	; 244
    12b4:	00 00       	nop
    12b6:	cc 3f       	cpi	r28, 0xFC	; 252
    12b8:	00 00       	nop
    12ba:	70 00       	.word	0x0070	; ????
    12bc:	00 00       	nop
    12be:	b0 00       	.word	0x00b0	; ????
    12c0:	00 00       	nop
    12c2:	20 01       	movw	r4, r0
    12c4:	00 00       	nop
    12c6:	c0 ff       	sbrs	r28, 0
    12c8:	07 00       	.word	0x0007	; ????
    12ca:	00 ff       	sbrs	r16, 0
    12cc:	0f 00       	.word	0x000f	; ????
    12ce:	00 00       	nop
    12d0:	0e 00       	.word	0x000e	; ????
    12d2:	00 00       	nop
    12d4:	06 00       	.word	0x0006	; ????
    12d6:	00 00       	nop
    12d8:	06 00       	.word	0x0006	; ????
    12da:	00 00       	nop
    12dc:	04 00       	.word	0x0004	; ????
    12de:	00 f0       	brcs	.+0      	; 0x12e0 <__stack+0xa81>
    12e0:	ff 00       	.word	0x00ff	; ????
    12e2:	00 e0       	ldi	r16, 0x00	; 0
    12e4:	ff 03       	fmulsu	r23, r23
    12e6:	00 00       	nop
    12e8:	60 06       	cpc	r6, r16
    12ea:	00 00       	nop
    12ec:	80 07       	cpc	r24, r16
    12ee:	00 00       	nop
    12f0:	0e 00       	.word	0x000e	; ????
    12f2:	00 00       	nop
    12f4:	16 00       	.word	0x0016	; ????
    12f6:	00 00       	nop
    12f8:	24 00       	.word	0x0024	; ????
    12fa:	00 00       	nop
    12fc:	f8 7f       	andi	r31, 0xF8	; 248
    12fe:	00 00       	nop
    1300:	e0 ff       	sbrs	r30, 0
    1302:	01 00       	.word	0x0001	; ????
    1304:	00 00       	nop
    1306:	02 00       	.word	0x0002	; ????
    1308:	00 00       	nop
    130a:	04 00       	.word	0x0004	; ????
    130c:	00 00       	nop
    130e:	08 00       	.word	0x0008	; ????
    1310:	00 00       	nop
    1312:	10 00       	.word	0x0010	; ????
    1314:	00 00       	nop
    1316:	20 00       	.word	0x0020	; ????
    1318:	00 fc       	sbrc	r0, 0
    131a:	7f 00       	.word	0x007f	; ????
    131c:	00 f8       	bld	r0, 0
    131e:	7f 00       	.word	0x007f	; ????
    1320:	00 e0       	ldi	r16, 0x00	; 0
    1322:	00 00       	nop
    1324:	00 60       	ori	r16, 0x00	; 0
    1326:	01 00       	.word	0x0001	; ????
    1328:	00 40       	sbci	r16, 0x00	; 0
    132a:	02 00       	.word	0x0002	; ????
    132c:	00 80       	ld	r0, Z
    132e:	ff 07       	cpc	r31, r31
    1330:	00 00       	nop
    1332:	fe 1f       	adc	r31, r30
    1334:	00 00       	nop
    1336:	00 20       	and	r0, r0
    1338:	00 00       	nop
    133a:	00 40       	sbci	r16, 0x00	; 0
    133c:	00 00       	nop
    133e:	00 80       	ld	r0, Z
    1340:	00 00       	nop
    1342:	00 00       	nop
    1344:	01 00       	.word	0x0001	; ????
    1346:	00 00       	nop
    1348:	02 00       	.word	0x0002	; ????
    134a:	ff ff       	.word	0xffff	; ????
    134c:	07 00       	.word	0x0007	; ????
    134e:	fe ff       	.word	0xfffe	; ????
    1350:	07 00       	.word	0x0007	; ????
    1352:	00 fe       	sbrs	r0, 0
    1354:	1f 00       	.word	0x001f	; ????
    1356:	00 fe       	sbrs	r0, 0
    1358:	3f 00       	.word	0x003f	; ????
    135a:	00 24       	eor	r0, r0
    135c:	70 00       	.word	0x0070	; ????
    135e:	00 78       	andi	r16, 0x80	; 128
    1360:	38 00       	.word	0x0038	; ????
    1362:	00 00       	nop
    1364:	18 00       	.word	0x0018	; ????
    1366:	00 00       	nop
    1368:	e0 00       	.word	0x00e0	; ????
    136a:	00 00       	nop
    136c:	00 07       	cpc	r16, r16
    136e:	00 80       	ld	r0, Z
    1370:	ff 0f       	add	r31, r31
    1372:	00 00       	nop
    1374:	ff 1f       	adc	r31, r31
    1376:	00 00       	nop
    1378:	fc 3f       	cpi	r31, 0xFC	; 252
    137a:	00 00       	nop
    137c:	fc 7f       	andi	r31, 0xFC	; 252
    137e:	00 00       	nop
    1380:	48 e0       	ldi	r20, 0x08	; 8
    1382:	00 00       	nop
    1384:	f0 70       	andi	r31, 0x00	; 0
    1386:	00 00       	nop
    1388:	00 30       	cpi	r16, 0x00	; 0
    138a:	00 00       	nop
    138c:	00 c0       	rjmp	.+0      	; 0x138e <__stack+0xb2f>
    138e:	01 00       	.word	0x0001	; ????
    1390:	00 00       	nop
    1392:	0e 00       	.word	0x000e	; ????
    1394:	fc ff       	.word	0xfffc	; ????
    1396:	1f 00       	.word	0x001f	; ????
    1398:	f8 ff       	.word	0xfff8	; ????
    139a:	3f 00       	.word	0x003f	; ????
    139c:	00 38       	cpi	r16, 0x80	; 128
    139e:	00 00       	nop
    13a0:	00 58       	subi	r16, 0x80	; 128
    13a2:	00 00       	nop
    13a4:	00 90 00 00 	lds	r0, 0x0000
    13a8:	00 e0       	ldi	r16, 0x00	; 0
    13aa:	ff 03       	fmulsu	r23, r23
    13ac:	00 80       	ld	r0, Z
    13ae:	ff 07       	cpc	r31, r31
    13b0:	00 00       	nop
    13b2:	c0 07       	cpc	r28, r16
    13b4:	00 00       	nop
    13b6:	f8 00       	.word	0x00f8	; ????
    13b8:	00 00       	nop
    13ba:	3e 00       	.word	0x003e	; ????
    13bc:	00 00       	nop
    13be:	7c 00       	.word	0x007c	; ????
    13c0:	00 00       	nop
    13c2:	80 0f       	add	r24, r16
    13c4:	00 00       	nop
    13c6:	00 f0       	brcs	.+0      	; 0x13c8 <__stack+0xb69>
    13c8:	00 00       	nop
    13ca:	e0 ff       	sbrs	r30, 0
    13cc:	03 00       	.word	0x0003	; ????
    13ce:	c0 ff       	sbrs	r28, 0
    13d0:	07 00       	.word	0x0007	; ????
    13d2:	00 07       	cpc	r16, r16
    13d4:	00 00       	nop
    13d6:	00 0b       	sbc	r16, r16
    13d8:	00 00       	nop
    13da:	00 12       	cpse	r0, r16
    13dc:	00 00       	nop
    13de:	00 fc       	sbrc	r0, 0
    13e0:	7f 00       	.word	0x007f	; ????
    13e2:	00 f0       	brcs	.+0      	; 0x13e4 <__stack+0xb85>
    13e4:	ff 00       	.word	0x00ff	; ????
    13e6:	00 00       	nop
    13e8:	f8 00       	.word	0x00f8	; ????
    13ea:	00 00       	nop
    13ec:	1f 00       	.word	0x001f	; ????
    13ee:	00 c0       	rjmp	.+0      	; 0x13f0 <__stack+0xb91>
    13f0:	03 00       	.word	0x0003	; ????
    13f2:	00 80       	ld	r0, Z
    13f4:	0f 00       	.word	0x000f	; ????
    13f6:	00 00       	nop
    13f8:	f0 01       	movw	r30, r0
    13fa:	00 00       	nop
    13fc:	00 1e       	adc	r0, r16
    13fe:	00 f0       	brcs	.+0      	; 0x1400 <__stack+0xba1>
    1400:	ff 7f       	andi	r31, 0xFF	; 255
    1402:	00 e0       	ldi	r16, 0x00	; 0
    1404:	ff ff       	.word	0xffff	; ????
    1406:	00 00       	nop
    1408:	00 c0       	rjmp	.+0      	; 0x140a <__stack+0xbab>
    140a:	00 00       	nop
    140c:	00 40       	sbci	r16, 0x00	; 0
    140e:	02 00       	.word	0x0002	; ????
    1410:	00 80       	ld	r0, Z
    1412:	04 00       	.word	0x0004	; ????
    1414:	00 f7       	brcc	.-64     	; 0x13d6 <__stack+0xb77>
    1416:	0f 00       	.word	0x000f	; ????
    1418:	00 ff       	sbrs	r16, 0
    141a:	0f 00       	.word	0x000f	; ????
    141c:	00 32       	cpi	r16, 0x20	; 32
    141e:	00 00       	nop
    1420:	00 24       	eor	r0, r0
    1422:	00 00       	nop
    1424:	00 08       	sbc	r0, r0
    1426:	00 00       	nop
    1428:	00 10       	cpse	r0, r0
    142a:	00 00       	nop
    142c:	00 60       	ori	r16, 0x00	; 0
    142e:	00 00       	nop
    1430:	00 80       	ld	r0, Z
    1432:	ff 07       	cpc	r31, r31
    1434:	00 00       	nop
    1436:	ff 0f       	add	r31, r31
    1438:	00 00       	nop
    143a:	0e 0f       	add	r16, r30
    143c:	00 00       	nop
    143e:	1e 3f       	cpi	r17, 0xFE	; 254
    1440:	00 00       	nop
    1442:	24 42       	sbci	r18, 0x24	; 36
    1444:	00 00       	nop
    1446:	f8 ff       	.word	0xfff8	; ????
    1448:	00 00       	nop
    144a:	e0 ff       	sbrs	r30, 0
    144c:	00 00       	nop
    144e:	00 30       	cpi	r16, 0x00	; 0
    1450:	00 00       	nop
    1452:	00 c0       	rjmp	.+0      	; 0x1454 <__stack+0xbf5>
    1454:	00 00       	nop
    1456:	00 00       	nop
    1458:	03 00       	.word	0x0003	; ????
    145a:	00 ff       	sbrs	r16, 0
    145c:	1f 00       	.word	0x001f	; ????
    145e:	00 fe       	sbrs	r0, 0
    1460:	3f 00       	.word	0x003f	; ????
    1462:	00 78       	andi	r16, 0x80	; 128
    1464:	3c 00       	.word	0x003c	; ????
    1466:	00 78       	andi	r16, 0x80	; 128
    1468:	fd 00       	.word	0x00fd	; ????
    146a:	00 10       	cpse	r0, r0
    146c:	05 01       	movw	r0, r10
    146e:	00 20       	and	r0, r0
    1470:	0a 02       	muls	r16, r26
    1472:	00 80       	ld	r0, Z
    1474:	13 04       	cpc	r1, r3
    1476:	00 00       	nop
    1478:	00 08       	sbc	r0, r0
    147a:	00 00       	nop
    147c:	00 10       	cpse	r0, r0
    147e:	00 00       	nop
    1480:	fe 3f       	cpi	r31, 0xFE	; 254
    1482:	00 00       	nop
    1484:	fc 3f       	cpi	r31, 0xFC	; 252
    1486:	00 00       	nop
    1488:	60 00       	.word	0x0060	; ????
    148a:	00 00       	nop
    148c:	e0 00       	.word	0x00e0	; ????
    148e:	00 00       	nop
    1490:	60 01       	movw	r12, r0
    1492:	00 00       	nop
    1494:	40 02       	muls	r20, r16
    1496:	00 00       	nop
    1498:	80 04       	cpc	r8, r0
    149a:	06 00       	.word	0x0006	; ????
    149c:	00 1b       	sub	r16, r16
    149e:	12 00       	.word	0x0012	; ????
    14a0:	00 26       	eor	r0, r16
    14a2:	24 00       	.word	0x0024	; ????
    14a4:	00 c8       	rjmp	.-4096   	; 0x4a6 <__trampolines_end+0x40c>
    14a6:	7f 00       	.word	0x007f	; ????
    14a8:	00 18       	sub	r0, r0
    14aa:	7f 00       	.word	0x007f	; ????
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	fe 00       	.word	0x00fe	; ????
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	ff 03       	fmulsu	r23, r23
    14b4:	00 40       	sbci	r16, 0x00	; 0
    14b6:	86 04       	cpc	r8, r6
    14b8:	00 80       	ld	r0, Z
    14ba:	04 0f       	add	r16, r20
    14bc:	00 00       	nop
    14be:	01 08       	sbc	r0, r1
    14c0:	00 00       	nop
    14c2:	02 00       	.word	0x0002	; ????
    14c4:	00 00       	nop
    14c6:	0c 00       	.word	0x000c	; ????
    14c8:	00 00       	nop
    14ca:	f0 ff       	sbrs	r31, 0
    14cc:	1f 00       	.word	0x001f	; ????
    14ce:	e0 ff       	sbrs	r30, 0
    14d0:	3f 00       	.word	0x003f	; ????
    14d2:	c0 fc       	sbrc	r12, 0
    14d4:	01 00       	.word	0x0001	; ????
    14d6:	c0 fd       	sbrc	r28, 0
    14d8:	07 00       	.word	0x0007	; ????
    14da:	80 18       	sub	r8, r0
    14dc:	09 00       	.word	0x0009	; ????
    14de:	00 19       	sub	r16, r0
    14e0:	1e 00       	.word	0x001e	; ????
    14e2:	00 22       	and	r0, r16
    14e4:	10 00       	.word	0x0010	; ????
    14e6:	00 c4       	rjmp	.+2048   	; 0x1ce8 <DrawChar+0xae>
    14e8:	00 00       	nop
    14ea:	00 18       	sub	r0, r0
    14ec:	0e 00       	.word	0x000e	; ????
    14ee:	00 e0       	ldi	r16, 0x00	; 0
    14f0:	ff 01       	movw	r30, r30
    14f2:	00 c0       	rjmp	.+0      	; 0x14f4 <__stack+0xc95>
    14f4:	ff 03       	fmulsu	r23, r23
    14f6:	00 00       	nop
    14f8:	00 03       	mulsu	r16, r16
    14fa:	00 00       	nop
    14fc:	00 09       	sbc	r16, r0
    14fe:	00 00       	nop
    1500:	00 12       	cpse	r0, r16
    1502:	00 00       	nop
    1504:	dc 3f       	cpi	r29, 0xFC	; 252
    1506:	00 00       	nop
    1508:	fc 3f       	cpi	r31, 0xFC	; 252
    150a:	00 00       	nop
    150c:	c8 00       	.word	0x00c8	; ????
    150e:	00 00       	nop
    1510:	90 00       	.word	0x0090	; ????
    1512:	00 00       	nop
    1514:	20 00       	.word	0x0020	; ????
    1516:	00 00       	nop
    1518:	40 00       	.word	0x0040	; ????
    151a:	00 00       	nop
    151c:	80 01       	movw	r16, r0
    151e:	00 00       	nop
    1520:	00 fe       	sbrs	r0, 0
    1522:	ff 03       	fmulsu	r23, r23
    1524:	00 fc       	sbrc	r0, 0
    1526:	ff 07       	cpc	r31, r31
    1528:	00 18       	sub	r0, r0
    152a:	00 00       	nop
    152c:	00 18       	sub	r0, r0
    152e:	00 00       	nop
    1530:	00 10       	cpse	r0, r0
    1532:	00 00       	nop
    1534:	00 20       	and	r0, r0
    1536:	80 01       	movw	r16, r0
    1538:	00 40       	sbci	r16, 0x00	; 0
    153a:	80 04       	cpc	r8, r0
    153c:	00 80       	ld	r0, Z
    153e:	00 09       	sbc	r16, r0
    1540:	00 00       	nop
    1542:	ff 1f       	adc	r31, r31
    1544:	00 00       	nop
    1546:	fc 1f       	adc	r31, r28
    1548:	00 00       	nop
    154a:	f8 7f       	andi	r31, 0xF8	; 248
    154c:	00 00       	nop
    154e:	f0 ff       	sbrs	r31, 0
    1550:	00 00       	nop
    1552:	30 7c       	andi	r19, 0xC0	; 192
    1554:	00 00       	nop
    1556:	20 1e       	adc	r2, r16
    1558:	00 00       	nop
    155a:	40 3e       	cpi	r20, 0xE0	; 224
    155c:	00 00       	nop
    155e:	80 48       	sbci	r24, 0x80	; 128
    1560:	00 00       	nop
    1562:	00 71       	andi	r16, 0x10	; 16
    1564:	00 00       	nop
    1566:	00 06       	cpc	r0, r16
    1568:	00 00       	nop
    156a:	00 fc       	sbrc	r0, 0
    156c:	7f 00       	.word	0x007f	; ????
    156e:	00 fe       	sbrs	r0, 0
    1570:	ff 00       	.word	0x00ff	; ????
    1572:	00 0c       	add	r0, r0
    1574:	00 00       	nop
    1576:	00 c0       	rjmp	.+0      	; 0x1578 <__stack+0xd19>
    1578:	01 00       	.word	0x0001	; ????
    157a:	00 c0       	rjmp	.+0      	; 0x157c <__stack+0xd1d>
    157c:	02 00       	.word	0x0002	; ????
    157e:	00 80       	ld	r0, Z
    1580:	04 00       	.word	0x0004	; ????
    1582:	00 00       	nop
    1584:	ff 0f       	add	r31, r31
    1586:	00 00       	nop
    1588:	fc 3f       	cpi	r31, 0xFC	; 252
    158a:	00 00       	nop
    158c:	00 40       	sbci	r16, 0x00	; 0
    158e:	00 00       	nop
    1590:	00 87       	std	Z+8, r16	; 0x08
    1592:	00 00       	nop
    1594:	00 1a       	sub	r0, r16
    1596:	01 00       	.word	0x0001	; ????
    1598:	00 3c       	cpi	r16, 0xC0	; 192
    159a:	02 00       	.word	0x0002	; ????
    159c:	00 40       	sbci	r16, 0x00	; 0
    159e:	04 00       	.word	0x0004	; ????
    15a0:	80 ff       	sbrs	r24, 0
    15a2:	0f 00       	.word	0x000f	; ????
    15a4:	00 ff       	sbrs	r16, 0
    15a6:	0f 00       	.word	0x000f	; ????
    15a8:	00 00       	nop
    15aa:	03 00       	.word	0x0003	; ????
    15ac:	00 80       	ld	r0, Z
    15ae:	03 00       	.word	0x0003	; ????
    15b0:	00 30       	cpi	r16, 0x00	; 0
    15b2:	7f 00       	.word	0x007f	; ????
    15b4:	00 70       	andi	r16, 0x00	; 0
    15b6:	ff 01       	movw	r30, r30
    15b8:	00 20       	and	r0, r0
    15ba:	46 02       	muls	r20, r22
    15bc:	00 40       	sbci	r16, 0x00	; 0
    15be:	86 07       	cpc	r24, r22
    15c0:	00 80       	ld	r0, Z
    15c2:	08 04       	cpc	r0, r8
    15c4:	00 00       	nop
    15c6:	31 00       	.word	0x0031	; ????
    15c8:	00 00       	nop
    15ca:	86 03       	fmuls	r16, r22
    15cc:	00 00       	nop
    15ce:	fc 7f       	andi	r31, 0xFC	; 252
    15d0:	00 00       	nop
    15d2:	fe ff       	.word	0xfffe	; ????
    15d4:	00 00       	nop
    15d6:	0c 00       	.word	0x000c	; ????
    15d8:	00 00       	nop
    15da:	c0 01       	movw	r24, r0
    15dc:	00 00       	nop
    15de:	c0 02       	muls	r28, r16
    15e0:	00 00       	nop
    15e2:	80 04       	cpc	r8, r0
    15e4:	00 00       	nop
    15e6:	00 ff       	sbrs	r16, 0
    15e8:	1f 00       	.word	0x001f	; ????
    15ea:	00 fc       	sbrc	r0, 0
    15ec:	3f 00       	.word	0x003f	; ????
    15ee:	00 00       	nop
    15f0:	07 00       	.word	0x0007	; ????
    15f2:	00 00       	nop
    15f4:	03 00       	.word	0x0003	; ????
    15f6:	00 60       	ori	r16, 0x00	; 0
    15f8:	03 00       	.word	0x0003	; ????
    15fa:	00 20       	and	r0, r0
    15fc:	03 00       	.word	0x0003	; ????
    15fe:	00 40       	sbci	r16, 0x00	; 0
    1600:	06 00       	.word	0x0006	; ????
    1602:	00 80       	ld	r0, Z
    1604:	ff 0f       	add	r31, r31
    1606:	00 00       	nop
    1608:	e6 1f       	adc	r30, r22
    160a:	00 00       	nop
    160c:	1c 00       	.word	0x001c	; ????
    160e:	00 00       	nop
    1610:	2c 00       	.word	0x002c	; ????
    1612:	00 00       	nop
    1614:	48 00       	.word	0x0048	; ????
    1616:	00 00       	nop
    1618:	f0 ff       	sbrs	r31, 0
    161a:	01 00       	.word	0x0001	; ????
    161c:	c0 ff       	sbrs	r28, 0
    161e:	03 00       	.word	0x0003	; ????
    1620:	00 80       	ld	r0, Z
    1622:	03 00       	.word	0x0003	; ????
    1624:	00 c0       	rjmp	.+0      	; 0x1626 <__stack+0xdc7>
    1626:	01 00       	.word	0x0001	; ????
    1628:	80 e3       	ldi	r24, 0x30	; 48
    162a:	00 00       	nop
    162c:	00 05       	cpc	r16, r0
    162e:	07 00       	.word	0x0007	; ????
    1630:	00 0a       	sbc	r0, r16
    1632:	38 00       	.word	0x0038	; ????
    1634:	00 fc       	sbrc	r0, 0
    1636:	ff 00       	.word	0x00ff	; ????
    1638:	00 f8       	bld	r0, 0
    163a:	ff 01       	movw	r30, r30
    163c:	00 3c       	cpi	r16, 0xC0	; 192
    163e:	00 00       	nop
    1640:	00 80       	ld	r0, Z
    1642:	f9 03       	fmulsu	r23, r17
    1644:	00 80       	ld	r0, Z
    1646:	fb 0f       	add	r31, r27
    1648:	00 00       	nop
    164a:	91 10       	cpse	r9, r1
    164c:	00 00       	nop
    164e:	62 21       	and	r22, r2
    1650:	00 00       	nop
    1652:	04 41       	sbci	r16, 0x14	; 20
    1654:	00 00       	nop
    1656:	08 80       	ld	r0, Y
    1658:	00 00       	nop
    165a:	30 00       	.word	0x0030	; ????
    165c:	01 00       	.word	0x0001	; ????
    165e:	c0 ff       	sbrs	r28, 0
    1660:	03 00       	.word	0x0003	; ????
    1662:	80 ff       	sbrs	r24, 0
    1664:	03 00       	.word	0x0003	; ????
    1666:	00 f3       	brcs	.-64     	; 0x1628 <__stack+0xdc9>
    1668:	07 00       	.word	0x0007	; ????
    166a:	00 b5       	in	r16, 0x20	; 32
    166c:	1f 00       	.word	0x001f	; ????
    166e:	00 2a       	or	r0, r16
    1670:	22 00       	.word	0x0022	; ????
    1672:	00 94       	com	r0
    1674:	47 00       	.word	0x0047	; ????
    1676:	00 28       	or	r0, r0
    1678:	80 00       	.word	0x0080	; ????
    167a:	00 50       	subi	r16, 0x00	; 0
    167c:	00 01       	movw	r0, r0
    167e:	00 e0       	ldi	r16, 0x00	; 0
    1680:	00 02       	muls	r16, r16
    1682:	00 c0       	rjmp	.+0      	; 0x1684 <__stack+0xe25>
    1684:	ff 07       	cpc	r31, r31
    1686:	00 c0       	rjmp	.+0      	; 0x1688 <__stack+0xe29>
    1688:	ff 07       	cpc	r31, r31
    168a:	00 80       	ld	r0, Z
    168c:	00 00       	nop
    168e:	00 00       	nop
    1690:	0c 00       	.word	0x000c	; ????
    1692:	00 00       	nop
    1694:	3c 00       	.word	0x003c	; ????
    1696:	00 00       	nop
    1698:	c8 00       	.word	0x00c8	; ????
    169a:	00 00       	nop
    169c:	f0 01       	movw	r30, r0
    169e:	00 00       	nop
    16a0:	c0 02       	muls	r28, r16
    16a2:	00 00       	nop
    16a4:	00 02       	muls	r16, r16
    16a6:	04 00       	.word	0x0004	; ????
    16a8:	00 06       	cpc	r0, r16
    16aa:	0c 00       	.word	0x000c	; ????
    16ac:	00 ff       	sbrs	r16, 0
    16ae:	1f 00       	.word	0x001f	; ????
    16b0:	00 fc       	sbrc	r0, 0
    16b2:	1f 00       	.word	0x001f	; ????
    16b4:	00 30       	cpi	r16, 0x00	; 0
    16b6:	18 00       	.word	0x0018	; ????
    16b8:	00 90 48 00 	lds	r0, 0x0048
    16bc:	00 20       	and	r0, r0
    16be:	91 00       	.word	0x0091	; ????
    16c0:	00 80       	ld	r0, Z
    16c2:	c3 01       	movw	r24, r6
    16c4:	00 00       	nop
    16c6:	04 02       	muls	r16, r20
    16c8:	00 00       	nop
    16ca:	0c 04       	cpc	r0, r12
    16cc:	00 00       	nop
    16ce:	1e 0f       	add	r17, r30
    16d0:	00 00       	nop
    16d2:	0c 0e       	add	r0, r28
    16d4:	00 60       	ori	r16, 0x00	; 0
    16d6:	00 00       	nop
    16d8:	00 20       	and	r0, r0
    16da:	01 00       	.word	0x0001	; ????
    16dc:	00 40       	sbci	r16, 0x00	; 0
    16de:	02 00       	.word	0x0002	; ????
    16e0:	00 00       	nop
    16e2:	07 00       	.word	0x0007	; ????
    16e4:	00 00       	nop
    16e6:	08 00       	.word	0x0008	; ????
    16e8:	00 00       	nop
    16ea:	18 00       	.word	0x0018	; ????
    16ec:	00 00       	nop
    16ee:	18 00       	.word	0x0018	; ????
    16f0:	00 00       	nop
    16f2:	18 00       	.word	0x0018	; ????
    16f4:	00 00       	nop
    16f6:	10 00       	.word	0x0010	; ????
    16f8:	00 00       	nop
    16fa:	00 30       	cpi	r16, 0x00	; 0
    16fc:	00 00       	nop
    16fe:	00 30       	cpi	r16, 0x00	; 0
    1700:	00 00       	nop
    1702:	00 20       	and	r0, r0
    1704:	00 00       	nop
    1706:	00 40       	sbci	r16, 0x00	; 0
    1708:	00 00       	nop
    170a:	00 80       	ld	r0, Z
    170c:	00 00       	nop
    170e:	00 00       	nop
    1710:	ff 1f       	adc	r31, r31
    1712:	00 00       	nop
    1714:	fc 3f       	cpi	r31, 0xFC	; 252
    1716:	00 00       	nop
    1718:	18 00       	.word	0x0018	; ????
    171a:	00 00       	nop
    171c:	18 00       	.word	0x0018	; ????
    171e:	00 00       	nop
    1720:	10 00       	.word	0x0010	; ????
    1722:	00 00       	nop
    1724:	20 00       	.word	0x0020	; ????
    1726:	00 00       	nop
    1728:	40 00       	.word	0x0040	; ????
    172a:	00 00       	nop
    172c:	00 ff       	sbrs	r16, 0
    172e:	0f 00       	.word	0x000f	; ????
    1730:	00 fe       	sbrs	r0, 0
    1732:	1f 00       	.word	0x001f	; ????
    1734:	30 00       	.word	0x0030	; ????
    1736:	00 00       	nop
    1738:	50 00       	.word	0x0050	; ????
    173a:	00 00       	nop
    173c:	a0 00       	.word	0x00a0	; ????
    173e:	00 00       	nop
    1740:	20 01       	movw	r4, r0
    1742:	00 00       	nop
    1744:	40 02       	muls	r20, r16
    1746:	00 00       	nop
    1748:	80 04       	cpc	r8, r0
    174a:	00 00       	nop
    174c:	00 0a       	sbc	r0, r16
    174e:	00 00       	nop
    1750:	00 14       	cp	r0, r0
    1752:	00 00       	nop
    1754:	00 30       	cpi	r16, 0x00	; 0
    1756:	00 00       	nop
    1758:	00 60       	ori	r16, 0x00	; 0
    175a:	00 00       	nop
    175c:	00 c0       	rjmp	.+0      	; 0x175e <__stack+0xeff>
    175e:	00 00       	nop
    1760:	00 40       	sbci	r16, 0x00	; 0
    1762:	01 00       	.word	0x0001	; ????
    1764:	00 40       	sbci	r16, 0x00	; 0
    1766:	02 00       	.word	0x0002	; ????
    1768:	00 80       	ld	r0, Z
    176a:	04 00       	.word	0x0004	; ????
    176c:	00 00       	nop
    176e:	09 00       	.word	0x0009	; ????
    1770:	00 00       	nop
    1772:	12 00       	.word	0x0012	; ????
    1774:	00 00       	nop
    1776:	28 00       	.word	0x0028	; ????
    1778:	00 00       	nop
    177a:	60 00       	.word	0x0060	; ????
    177c:	00 00       	nop
    177e:	f0 00       	.word	0x00f0	; ????
    1780:	00 00       	nop
    1782:	e0 01       	movw	r28, r0
    1784:	00 00       	nop
    1786:	00 03       	mulsu	r16, r16
    1788:	00 00       	nop
    178a:	00 05       	cpc	r16, r0
    178c:	00 00       	nop
    178e:	00 09       	sbc	r16, r0
    1790:	00 00       	nop
    1792:	00 12       	cpse	r0, r16
    1794:	00 00       	nop
    1796:	00 24       	eor	r0, r0
    1798:	00 00       	nop
    179a:	00 50       	subi	r16, 0x00	; 0
    179c:	00 00       	nop
    179e:	00 e0       	ldi	r16, 0x00	; 0
    17a0:	00 00       	nop
    17a2:	00 20       	and	r0, r0
    17a4:	01 00       	.word	0x0001	; ????
    17a6:	00 40       	sbci	r16, 0x00	; 0
    17a8:	02 00       	.word	0x0002	; ????
    17aa:	00 00       	nop
    17ac:	03 00       	.word	0x0003	; ????
    17ae:	00 00       	nop
    17b0:	0c 00       	.word	0x000c	; ????
    17b2:	00 00       	nop
    17b4:	14 00       	.word	0x0014	; ????
    17b6:	00 00       	nop
    17b8:	24 00       	.word	0x0024	; ????
    17ba:	00 00       	nop
    17bc:	48 00       	.word	0x0048	; ????
    17be:	00 00       	nop
    17c0:	90 00       	.word	0x0090	; ????
    17c2:	00 00       	nop
    17c4:	40 01       	movw	r8, r0
    17c6:	00 00       	nop
    17c8:	00 03       	mulsu	r16, r16
    17ca:	00 00       	nop
    17cc:	80 07       	cpc	r24, r16
    17ce:	00 00       	nop
    17d0:	00 08       	sbc	r0, r0
    17d2:	00 00       	nop
    17d4:	00 1e       	adc	r0, r16
    17d6:	00 00       	nop
    17d8:	00 00       	nop
    17da:	00 80       	ld	r0, Z
    17dc:	03 00       	.word	0x0003	; ????
    17de:	00 00       	nop
    17e0:	05 00       	.word	0x0005	; ????
    17e2:	00 00       	nop
    17e4:	3e 00       	.word	0x003e	; ????
    17e6:	00 00       	nop
    17e8:	7c 00       	.word	0x007c	; ????
    17ea:	00 00       	nop
    17ec:	38 00       	.word	0x0038	; ????
    17ee:	00 00       	nop
    17f0:	50 00       	.word	0x0050	; ????
    17f2:	00 00       	nop
    17f4:	e0 03       	fmuls	r22, r16
    17f6:	00 00       	nop
    17f8:	00 04       	cpc	r0, r0
    17fa:	00 00       	nop
    17fc:	80 0f       	add	r24, r16
    17fe:	00 00       	nop
    1800:	00 07       	cpc	r16, r16
    1802:	00 00       	nop
    1804:	00 0a       	sbc	r0, r16
    1806:	00 00       	nop
    1808:	00 1c       	adc	r0, r0
    180a:	00 e0       	ldi	r16, 0x00	; 0
    180c:	ff 03       	fmulsu	r23, r23
    180e:	00 c0       	rjmp	.+0      	; 0x1810 <__stack+0xfb1>
    1810:	ff 07       	cpc	r31, r31
    1812:	00 80       	ld	r0, Z
    1814:	20 08       	sbc	r2, r0
    1816:	00 c0       	rjmp	.+0      	; 0x1818 <__stack+0xfb9>
    1818:	ff 7f       	andi	r31, 0xFF	; 255
    181a:	00 80       	ld	r0, Z
    181c:	ff ff       	.word	0xffff	; ????
    181e:	00 00       	nop
    1820:	04 41       	sbci	r16, 0x14	; 20
    1822:	00 00       	nop
    1824:	18 c5       	rjmp	.+2608   	; 0x2256 <Line+0xf2>
    1826:	00 00       	nop
    1828:	e0 fb       	bst	r30, 0
    182a:	00 00       	nop
    182c:	e0 ff       	sbrs	r30, 0
    182e:	01 00       	.word	0x0001	; ????
    1830:	c0 ff       	sbrs	r28, 0
    1832:	07 00       	.word	0x0007	; ????
    1834:	00 00       	nop
    1836:	09 00       	.word	0x0009	; ????
    1838:	00 00       	nop
    183a:	12 00       	.word	0x0012	; ????
    183c:	00 00       	nop
    183e:	18 00       	.word	0x0018	; ????
    1840:	00 fc       	sbrc	r0, 0
    1842:	3f 00       	.word	0x003f	; ????
    1844:	00 f8       	bld	r0, 0
    1846:	ff 00       	.word	0x00ff	; ????
    1848:	00 00       	nop
    184a:	20 01       	movw	r4, r0
    184c:	00 00       	nop
    184e:	c0 03       	fmuls	r20, r16
    1850:	00 00       	nop
    1852:	00 00       	nop
    1854:	00 80       	ld	r0, Z
    1856:	ff 07       	cpc	r31, r31
    1858:	00 00       	nop
    185a:	ff 1f       	adc	r31, r31
    185c:	00 00       	nop
    185e:	00 24       	eor	r0, r0
    1860:	00 00       	nop
    1862:	00 48       	sbci	r16, 0x80	; 128
    1864:	00 00       	nop
    1866:	00 60       	ori	r16, 0x00	; 0
    1868:	00 30       	cpi	r16, 0x00	; 0
    186a:	00 00       	nop
    186c:	00 70       	andi	r16, 0x00	; 0
    186e:	00 00       	nop
    1870:	00 a0       	ldd	r0, Z+32	; 0x20
    1872:	00 00       	nop
    1874:	00 60       	ori	r16, 0x00	; 0
    1876:	ff ff       	.word	0xffff	; ????
    1878:	07 c0       	rjmp	.+14     	; 0x1888 <__stack+0x1029>
    187a:	fc ff       	.word	0xfffc	; ????
    187c:	1f 80       	ldd	r1, Y+7	; 0x07
    187e:	01 00       	.word	0x0001	; ????
    1880:	24 00       	.word	0x0024	; ????
    1882:	06 00       	.word	0x0006	; ????
    1884:	48 00       	.word	0x0048	; ????
    1886:	08 00       	.word	0x0008	; ????
    1888:	60 00       	.word	0x0060	; ????
    188a:	f0 00       	.word	0x00f0	; ????
    188c:	00 00       	nop
    188e:	50 02       	muls	r21, r16
    1890:	00 00       	nop
    1892:	20 03       	mulsu	r18, r16
    1894:	00 00       	nop
    1896:	40 f0       	brcs	.+16     	; 0x18a8 <__stack+0x1049>
    1898:	ff 07       	cpc	r31, r31
    189a:	80 fb       	bst	r24, 0
    189c:	ff 1f       	adc	r31, r31
    189e:	00 1e       	adc	r0, r16
    18a0:	00 24       	eor	r0, r0
    18a2:	00 00       	nop
    18a4:	00 48       	sbci	r16, 0x80	; 128
    18a6:	00 00       	nop
    18a8:	00 60       	ori	r16, 0x00	; 0
    18aa:	00 78       	andi	r16, 0x80	; 128
    18ac:	00 00       	nop
    18ae:	00 c0       	rjmp	.+0      	; 0x18b0 <__stack+0x1051>
    18b0:	01 00       	.word	0x0001	; ????
    18b2:	00 80       	ld	r0, Z
    18b4:	03 00       	.word	0x0003	; ????
    18b6:	00 c0       	rjmp	.+0      	; 0x18b8 <__stack+0x1059>
    18b8:	03 00       	.word	0x0003	; ????
    18ba:	00 80       	ld	r0, Z
    18bc:	f8 ff       	.word	0xfff8	; ????
    18be:	0f 00       	.word	0x000f	; ????
    18c0:	ff ff       	.word	0xffff	; ????
    18c2:	3f 00       	.word	0x003f	; ????
    18c4:	1e 00       	.word	0x001e	; ????
    18c6:	48 00       	.word	0x0048	; ????
    18c8:	00 00       	nop
    18ca:	90 00       	.word	0x0090	; ????
    18cc:	00 00       	nop
    18ce:	c0 00       	.word	0x00c0	; ????
    18d0:	00 c0       	rjmp	.+0      	; 0x18d2 <__stack+0x1073>
    18d2:	00 00       	nop
    18d4:	00 40       	sbci	r16, 0x00	; 0
    18d6:	00 00       	nop
    18d8:	00 80       	ld	r0, Z
    18da:	00 00       	nop
    18dc:	00 00       	nop
    18de:	01 00       	.word	0x0001	; ????
    18e0:	00 00       	nop
    18e2:	02 00       	.word	0x0002	; ????
    18e4:	00 00       	nop
    18e6:	f8 ff       	.word	0xfff8	; ????
    18e8:	0f 00       	.word	0x000f	; ????
    18ea:	f0 ff       	sbrs	r31, 0
    18ec:	1f 00       	.word	0x001f	; ????
    18ee:	e0 01       	movw	r28, r0
    18f0:	00 00       	nop
    18f2:	60 02       	muls	r22, r16
    18f4:	00 00       	nop
    18f6:	c0 07       	cpc	r28, r16
    18f8:	00 00       	nop
    18fa:	80 01       	movw	r16, r0
    18fc:	00 00       	nop
    18fe:	00 0e       	add	r0, r16
    1900:	80 00       	.word	0x0080	; ????
    1902:	00 06       	cpc	r0, r16
    1904:	80 01       	movw	r16, r0
    1906:	00 fc       	sbrc	r0, 0
    1908:	ff 01       	movw	r30, r30
    190a:	00 f0       	brcs	.+0      	; 0x190c <__stack+0x10ad>
    190c:	ff 01       	movw	r30, r30
    190e:	e0 00       	.word	0x00e0	; ????
    1910:	00 00       	nop
    1912:	20 01       	movw	r4, r0
    1914:	00 00       	nop
    1916:	20 01       	movw	r4, r0
    1918:	00 00       	nop
    191a:	40 04       	cpc	r4, r0
    191c:	00 00       	nop
    191e:	80 0c       	add	r8, r0
    1920:	00 00       	nop
    1922:	00 15       	cp	r16, r0
    1924:	00 00       	nop
    1926:	00 1b       	sub	r16, r16
    1928:	00 00       	nop
    192a:	00 02       	muls	r16, r16
    192c:	00 00       	nop
    192e:	00 0f       	add	r16, r16
    1930:	00 00       	nop
    1932:	00 1e       	adc	r0, r16
    1934:	00 00       	nop
    1936:	00 2c       	mov	r0, r0
    1938:	00 00       	nop
    193a:	00 68       	ori	r16, 0x80	; 128
    193c:	00 00       	nop
    193e:	00 b0       	in	r0, 0x00	; 0
    1940:	00 00       	nop
    1942:	00 00       	nop
    1944:	01 00       	.word	0x0001	; ????
    1946:	00 00       	nop
    1948:	02 00       	.word	0x0002	; ????
    194a:	00 00       	nop
    194c:	06 00       	.word	0x0006	; ????
    194e:	00 00       	nop
    1950:	07 00       	.word	0x0007	; ????
    1952:	00 00       	nop
    1954:	06 00       	.word	0x0006	; ????
    1956:	00 00       	nop
    1958:	30 00       	.word	0x0030	; ????
    195a:	00 00       	nop
    195c:	b0 00       	.word	0x00b0	; ????
    195e:	00 00       	nop
    1960:	a0 01       	movw	r20, r0
    1962:	00 00       	nop
    1964:	80 01       	movw	r16, r0
    1966:	00 00       	nop
    1968:	80 00       	.word	0x0080	; ????
    196a:	00 00       	nop
    196c:	00 0b       	sbc	r16, r16
    196e:	00 00       	nop
    1970:	00 0c       	add	r0, r0
    1972:	00 00       	nop
    1974:	00 10       	cpse	r0, r0
    1976:	00 00       	nop
    1978:	00 18       	sub	r0, r0
    197a:	00 00       	nop
    197c:	00 10       	cpse	r0, r0
    197e:	00 00       	nop
    1980:	00 20       	and	r0, r0
    1982:	00 00       	nop
    1984:	00 f0       	brcs	.+0      	; 0x1986 <__stack+0x1127>
    1986:	01 00       	.word	0x0001	; ????
    1988:	00 e0       	ldi	r16, 0x00	; 0
    198a:	03 00       	.word	0x0003	; ????
    198c:	00 00       	nop
    198e:	01 00       	.word	0x0001	; ????
    1990:	00 00       	nop
    1992:	02 00       	.word	0x0002	; ????
    1994:	00 00       	nop
    1996:	38 00       	.word	0x0038	; ????
    1998:	00 00       	nop
    199a:	50 00       	.word	0x0050	; ????
    199c:	00 00       	nop
    199e:	e0 00       	.word	0x00e0	; ????
    19a0:	00 00       	nop
    19a2:	40 00       	.word	0x0040	; ????
    19a4:	00 00       	nop
    19a6:	00 01       	movw	r0, r0
    19a8:	00 00       	nop
    19aa:	80 01       	movw	r16, r0
    19ac:	00 00       	nop
    19ae:	00 01       	movw	r0, r0
    19b0:	00 00       	nop
    19b2:	00 00       	nop
    19b4:	00 3c       	cpi	r16, 0xC0	; 192
    19b6:	00 00       	nop
    19b8:	00 fe       	sbrs	r0, 0
    19ba:	01 00       	.word	0x0001	; ????
    19bc:	00 0c       	add	r0, r0
    19be:	03 00       	.word	0x0003	; ????
    19c0:	00 0c       	add	r0, r0
    19c2:	0c 00       	.word	0x000c	; ????
    19c4:	00 08       	sbc	r0, r0
    19c6:	10 00       	.word	0x0010	; ????
    19c8:	00 10       	cpse	r0, r0
    19ca:	20 00       	.word	0x0020	; ????
    19cc:	00 20       	and	r0, r0
    19ce:	40 00       	.word	0x0040	; ????
    19d0:	00 40       	sbci	r16, 0x00	; 0
    19d2:	80 00       	.word	0x0080	; ????
    19d4:	00 80       	ld	r0, Z
    19d6:	81 01       	movw	r16, r2
    19d8:	00 00       	nop
    19da:	86 01       	movw	r16, r12
    19dc:	00 00       	nop
    19de:	f8 01       	movw	r30, r16
    19e0:	00 00       	nop
    19e2:	e0 03       	fmuls	r22, r16
    19e4:	00 00       	nop
    19e6:	e0 0c       	add	r14, r0
    19e8:	00 00       	nop
    19ea:	40 20       	and	r4, r0
    19ec:	00 00       	nop
    19ee:	40 5c       	subi	r20, 0xC0	; 192
    19f0:	00 00       	nop
    19f2:	80 a8       	ldd	r8, Z+48	; 0x30
    19f4:	00 00       	nop
    19f6:	00 d1       	rcall	.+512    	; 0x1bf8 <__do_copy_data+0xe>
    19f8:	01 00       	.word	0x0001	; ????
    19fa:	00 e2       	ldi	r16, 0x20	; 32
    19fc:	01 00       	.word	0x0001	; ????
    19fe:	00 84       	ldd	r0, Z+8	; 0x08
    1a00:	09 00       	.word	0x0009	; ????
    1a02:	00 10       	cpse	r0, r0
    1a04:	18 00       	.word	0x0018	; ????
    1a06:	00 e0       	ldi	r16, 0x00	; 0
    1a08:	1f 00       	.word	0x001f	; ????
    1a0a:	00 00       	nop
    1a0c:	1f 00       	.word	0x001f	; ????
    1a0e:	00 02       	muls	r16, r16
    1a10:	00 00       	nop
    1a12:	00 0c       	add	r0, r0
    1a14:	00 00       	nop
    1a16:	00 f8       	bld	r0, 0
    1a18:	ff 00       	.word	0x00ff	; ????
    1a1a:	00 e0       	ldi	r16, 0x00	; 0
    1a1c:	ff 03       	fmulsu	r23, r23
    1a1e:	00 00       	nop
    1a20:	00 04       	cpc	r0, r0
    1a22:	00 00       	nop
    1a24:	f0 09       	sbc	r31, r0
    1a26:	00 00       	nop
    1a28:	f0 17       	cp	r31, r16
    1a2a:	00 00       	nop
    1a2c:	20 29       	or	r18, r0
    1a2e:	00 00       	nop
    1a30:	40 5e       	subi	r20, 0xE0	; 224
    1a32:	00 00       	nop
    1a34:	80 91 00 00 	lds	r24, 0x0000
    1a38:	00 01       	movw	r0, r0
    1a3a:	01 00       	.word	0x0001	; ????
    1a3c:	00 fe       	sbrs	r0, 0
    1a3e:	03 00       	.word	0x0003	; ????
    1a40:	00 fc       	sbrc	r0, 0
    1a42:	03 00       	.word	0x0003	; ????
    1a44:	00 f0       	brcs	.+0      	; 0x1a46 <__stack+0x11e7>
    1a46:	07 00       	.word	0x0007	; ????
    1a48:	00 30       	cpi	r16, 0x00	; 0
    1a4a:	1c 00       	.word	0x001c	; ????
    1a4c:	00 20       	and	r0, r0
    1a4e:	24 00       	.word	0x0024	; ????
    1a50:	00 40       	sbci	r16, 0x00	; 0
    1a52:	48 00       	.word	0x0048	; ????
    1a54:	00 80       	ld	r0, Z
    1a56:	77 00       	.word	0x0077	; ????
    1a58:	00 00       	nop
    1a5a:	0e 00       	.word	0x000e	; ????
    1a5c:	00 00       	nop
    1a5e:	02 00       	.word	0x0002	; ????
    1a60:	00 00       	nop
    1a62:	04 00       	.word	0x0004	; ????
    1a64:	00 00       	nop
    1a66:	f8 0f       	add	r31, r24
    1a68:	00 00       	nop
    1a6a:	e0 1f       	adc	r30, r16
    1a6c:	00 00       	nop
    1a6e:	80 0f       	add	r24, r16
    1a70:	00 00       	nop
    1a72:	80 3f       	cpi	r24, 0xF0	; 240
    1a74:	00 00       	nop
    1a76:	80 c1       	rjmp	.+768    	; 0x1d78 <DrawChar+0x13e>
    1a78:	00 00       	nop
    1a7a:	00 01       	movw	r0, r0
    1a7c:	01 00       	.word	0x0001	; ????
    1a7e:	00 72       	andi	r16, 0x20	; 32
    1a80:	02 00       	.word	0x0002	; ????
    1a82:	00 b4       	in	r0, 0x20	; 32
    1a84:	05 00       	.word	0x0005	; ????
    1a86:	00 68       	ori	r16, 0x80	; 128
    1a88:	07 00       	.word	0x0007	; ????
    1a8a:	00 90 0b 00 	lds	r0, 0x000B
    1a8e:	00 20       	and	r0, r0
    1a90:	10 00       	.word	0x0010	; ????
    1a92:	00 60       	ori	r16, 0x00	; 0
    1a94:	60 00       	.word	0x0060	; ????
    1a96:	00 74       	andi	r16, 0x40	; 64
    1a98:	80 00       	.word	0x0080	; ????
    1a9a:	00 70       	andi	r16, 0x00	; 0
    1a9c:	00 00       	nop
    1a9e:	00 00       	nop
    1aa0:	f8 00       	.word	0x00f8	; ????
    1aa2:	00 00       	nop
    1aa4:	f8 03       	fmulsu	r23, r16
    1aa6:	00 00       	nop
    1aa8:	18 0c       	add	r1, r8
    1aaa:	00 00       	nop
    1aac:	10 10       	cpse	r1, r0
    1aae:	00 00       	nop
    1ab0:	2c 27       	eor	r18, r28
    1ab2:	00 00       	nop
    1ab4:	68 59       	subi	r22, 0x98	; 152
    1ab6:	00 00       	nop
    1ab8:	d8 72       	andi	r29, 0x28	; 40
    1aba:	00 00       	nop
    1abc:	e0 b9       	out	0x00, r30	; 0
    1abe:	00 00       	nop
    1ac0:	00 02       	muls	r16, r16
    1ac2:	01 00       	.word	0x0001	; ????
    1ac4:	00 06       	cpc	r0, r16
    1ac6:	06 00       	.word	0x0006	; ????
    1ac8:	40 06       	cpc	r4, r16
    1aca:	08 00       	.word	0x0008	; ????
    1acc:	00 07       	cpc	r16, r16
    1ace:	00 00       	nop
    1ad0:	00 07       	cpc	r16, r16
    1ad2:	00 00       	nop
    1ad4:	00 fc       	sbrc	r0, 0
    1ad6:	01 00       	.word	0x0001	; ????
    1ad8:	00 c0       	rjmp	.+0      	; 0x1ada <__stack+0x127b>
    1ada:	7b 00       	.word	0x007b	; ????
    1adc:	00 00       	nop
    1ade:	92 00       	.word	0x0092	; ????
    1ae0:	00 00       	nop
    1ae2:	a2 03       	fmuls	r18, r18
    1ae4:	00 00       	nop
    1ae6:	c4 05       	cpc	r28, r4
    1ae8:	00 00       	nop
    1aea:	08 08       	sbc	r0, r8
    1aec:	00 00       	nop
    1aee:	10 10       	cpse	r1, r0
    1af0:	00 00       	nop
    1af2:	20 30       	cpi	r18, 0x00	; 0
    1af4:	00 00       	nop
    1af6:	80 20       	and	r8, r0
    1af8:	00 00       	nop
    1afa:	00 7f       	andi	r16, 0xF0	; 240
    1afc:	00 00       	nop
    1afe:	00 7c       	andi	r16, 0xC0	; 192
    1b00:	00 00       	nop
    1b02:	00 fc       	sbrc	r0, 0
    1b04:	01 00       	.word	0x0001	; ????
    1b06:	00 0c       	add	r0, r0
    1b08:	07 00       	.word	0x0007	; ????
    1b0a:	00 08       	sbc	r0, r0
    1b0c:	09 00       	.word	0x0009	; ????
    1b0e:	00 10       	cpse	r0, r0
    1b10:	12 00       	.word	0x0012	; ????
    1b12:	00 e0       	ldi	r16, 0x00	; 0
    1b14:	1d 00       	.word	0x001d	; ????
    1b16:	00 80       	ld	r0, Z
    1b18:	01 00       	.word	0x0001	; ????
    1b1a:	00 80       	ld	r0, Z
    1b1c:	00 00       	nop
    1b1e:	00 00       	nop
    1b20:	81 01       	movw	r16, r2
    1b22:	00 00       	nop
    1b24:	fe 03       	fmulsu	r23, r22
    1b26:	00 00       	nop
    1b28:	f8 03       	fmulsu	r23, r16
    1b2a:	00 00       	nop
    1b2c:	ff 07       	cpc	r31, r31
    1b2e:	00 00       	nop
    1b30:	ff 03       	fmulsu	r23, r23
    1b32:	00 00       	nop
    1b34:	03 00       	.word	0x0003	; ????
    1b36:	00 00       	nop
    1b38:	00 1f       	adc	r16, r16
    1b3a:	00 00       	nop
    1b3c:	00 7f       	andi	r16, 0xF0	; 240
    1b3e:	00 00       	nop
    1b40:	00 83       	st	Z, r16
    1b42:	01 00       	.word	0x0001	; ????
    1b44:	00 c2       	rjmp	.+1024   	; 0x1f46 <DrawChar+0x30c>
    1b46:	03 00       	.word	0x0003	; ????
    1b48:	00 84       	ldd	r0, Z+8	; 0x08
    1b4a:	00 00       	nop
    1b4c:	00 08       	sbc	r0, r0
    1b4e:	03 00       	.word	0x0003	; ????
    1b50:	00 90 0f 00 	lds	r0, 0x000F
    1b54:	00 20       	and	r0, r0
    1b56:	35 00       	.word	0x0035	; ????
    1b58:	00 40       	sbci	r16, 0x00	; 0
    1b5a:	52 00       	.word	0x0052	; ????
    1b5c:	00 c0       	rjmp	.+0      	; 0x1b5e <__stack+0x12ff>
    1b5e:	fc 00       	.word	0x00fc	; ????
    1b60:	00 c8       	rjmp	.-4096   	; 0xb62 <__stack+0x303>
    1b62:	f0 00       	.word	0x00f0	; ????
    1b64:	00 e0       	ldi	r16, 0x00	; 0
    1b66:	00 00       	nop
    1b68:	00 00       	nop
    1b6a:	f0 01       	movw	r30, r0
    1b6c:	00 00       	nop
    1b6e:	f8 07       	cpc	r31, r24
    1b70:	00 00       	nop
    1b72:	70 18       	sub	r7, r0
    1b74:	00 00       	nop
    1b76:	60 2c       	mov	r6, r0
    1b78:	00 00       	nop
    1b7a:	40 54       	subi	r20, 0x40	; 64
    1b7c:	00 00       	nop
    1b7e:	80 c9       	rjmp	.-3328   	; 0xe80 <__stack+0x621>
    1b80:	00 00       	nop
    1b82:	00 f3       	brcs	.-64     	; 0x1b44 <__stack+0x12e5>
    1b84:	00 00       	nop
    1b86:	00 9c       	mul	r0, r0
    1b88:	00 00       	nop
    1b8a:	00 78       	andi	r16, 0x80	; 128
    1b8c:	00 00       	nop
    1b8e:	00 b8       	out	0x00, r0	; 0
    1b90:	03 00       	.word	0x0003	; ????
    1b92:	00 30       	cpi	r16, 0x00	; 0
    1b94:	0c 00       	.word	0x000c	; ????
    1b96:	00 c0       	rjmp	.+0      	; 0x1b98 <__stack+0x1339>
    1b98:	30 00       	.word	0x0030	; ????
    1b9a:	00 80       	ld	r0, Z
    1b9c:	41 00       	.word	0x0041	; ????
    1b9e:	00 f8       	bld	r0, 0
    1ba0:	01 00       	.word	0x0001	; ????

00001ba2 <pstr_nan>:
    1ba2:	4e 41 4e                                            NAN

00001ba5 <pstr_inity>:
    1ba5:	49 4e 49 54 59                                      INITY

00001baa <pstr_inf>:
    1baa:	49 4e 46                                            INF

00001bad <pwr_m10>:
    1bad:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1bbd:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001bc5 <pwr_p10>:
    1bc5:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1bd5:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00001bde <__ctors_end>:
    1bde:	11 24       	eor	r1, r1
    1be0:	1f be       	out	0x3f, r1	; 63
    1be2:	cf e5       	ldi	r28, 0x5F	; 95
    1be4:	d8 e0       	ldi	r29, 0x08	; 8
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	cd bf       	out	0x3d, r28	; 61

00001bea <__do_copy_data>:
    1bea:	12 e0       	ldi	r17, 0x02	; 2
    1bec:	a0 e6       	ldi	r26, 0x60	; 96
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	ee e4       	ldi	r30, 0x4E	; 78
    1bf2:	f7 e7       	ldi	r31, 0x77	; 119
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <__do_copy_data+0x10>
    1bf6:	05 90       	lpm	r0, Z+
    1bf8:	0d 92       	st	X+, r0
    1bfa:	ae 30       	cpi	r26, 0x0E	; 14
    1bfc:	b1 07       	cpc	r27, r17
    1bfe:	d9 f7       	brne	.-10     	; 0x1bf6 <__do_copy_data+0xc>

00001c00 <__do_clear_bss>:
    1c00:	22 e0       	ldi	r18, 0x02	; 2
    1c02:	ae e0       	ldi	r26, 0x0E	; 14
    1c04:	b2 e0       	ldi	r27, 0x02	; 2
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <.do_clear_bss_start>

00001c08 <.do_clear_bss_loop>:
    1c08:	1d 92       	st	X+, r1

00001c0a <.do_clear_bss_start>:
    1c0a:	ac 3c       	cpi	r26, 0xCC	; 204
    1c0c:	b2 07       	cpc	r27, r18
    1c0e:	e1 f7       	brne	.-8      	; 0x1c08 <.do_clear_bss_loop>
    1c10:	0e 94 10 2b 	call	0x5620	; 0x5620 <main>
    1c14:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <_exit>

00001c18 <__bad_interrupt>:
    1c18:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001c1c <LcdFont>:
/* _____PRIVATE FUNCTIONS____________________________________________________ */   
   
/* _____PUBLIC FUNCTIONS_____________________________________________________ */   
void LcdFont(uint8_t *pointer)   
{   
    FontPointer = pointer;   
    1c1c:	90 93 1e 02 	sts	0x021E, r25
    1c20:	80 93 1d 02 	sts	0x021D, r24
    FontWidth   = pgm_read_byte_near(&FontPointer[2]);   
    1c24:	fc 01       	movw	r30, r24
    1c26:	32 96       	adiw	r30, 0x02	; 2
    1c28:	e4 91       	lpm	r30, Z
    1c2a:	e0 93 1b 02 	sts	0x021B, r30
    FontHeight  = pgm_read_byte_near(&FontPointer[3]);   
    1c2e:	fc 01       	movw	r30, r24
    1c30:	33 96       	adiw	r30, 0x03	; 3
    1c32:	84 91       	lpm	r24, Z
    1c34:	80 93 1c 02 	sts	0x021C, r24
    1c38:	08 95       	ret

00001c3a <DrawChar>:
}   
   
// draw char   
uint8_t DrawChar(unsigned char c)   
{   
    1c3a:	2f 92       	push	r2
    1c3c:	3f 92       	push	r3
    1c3e:	4f 92       	push	r4
    1c40:	5f 92       	push	r5
    1c42:	6f 92       	push	r6
    1c44:	7f 92       	push	r7
    1c46:	8f 92       	push	r8
    1c48:	9f 92       	push	r9
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	2a 97       	sbiw	r28, 0x0a	; 10
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    uint16_t    fontSize        =   pgm_read_word_near(&FontPointer[0]);   
    1c6e:	20 91 1d 02 	lds	r18, 0x021D
    1c72:	30 91 1e 02 	lds	r19, 0x021E
    1c76:	f9 01       	movw	r30, r18
    1c78:	a5 91       	lpm	r26, Z+
    1c7a:	b4 91       	lpm	r27, Z
//  uint8_t     fontHeigh       =   pgm_read_byte_near(&FontPointer[3]);   
    uint8_t     firstchar       =   pgm_read_byte_near(&FontPointer[5]);   
    1c7c:	f9 01       	movw	r30, r18
    1c7e:	35 96       	adiw	r30, 0x05	; 5
    1c80:	94 91       	lpm	r25, Z
    uint8_t     lastchar        =   pgm_read_byte_near(&FontPointer[6]);   
    1c82:	31 96       	adiw	r30, 0x01	; 1
    1c84:	14 91       	lpm	r17, Z
    uint8_t     charwidth       =   pgm_read_byte_near(&FontPointer[7+c-firstchar]);   
    1c86:	68 2f       	mov	r22, r24
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	49 2f       	mov	r20, r25
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	fb 01       	movw	r30, r22
    1c90:	37 96       	adiw	r30, 0x07	; 7
    1c92:	e4 1b       	sub	r30, r20
    1c94:	f5 0b       	sbc	r31, r21
    1c96:	e2 0f       	add	r30, r18
    1c98:	f3 1f       	adc	r31, r19
    1c9a:	04 91       	lpm	r16, Z
    1c9c:	0c 83       	std	Y+4, r16	; 0x04
    uint8_t     byte            =   0;   
    1c9e:	19 82       	std	Y+1, r1	; 0x01
    uint8_t     maske           =   0;   
    uint16_t    bcounter        =   0;   
    uint16_t    bitsbischar     =   0;   
    uint16_t    bytesbischar    =   0;   
    uint16_t    xPos,yPos;   
    uint16_t    color = GetColor(); // backup color   
    1ca0:	e0 91 78 00 	lds	r30, 0x0078
    1ca4:	f0 91 79 00 	lds	r31, 0x0079
    1ca8:	f8 87       	std	Y+8, r31	; 0x08
    1caa:	ef 83       	std	Y+7, r30	; 0x07
   
    if (c == '\n')   
    1cac:	8a 30       	cpi	r24, 0x0A	; 10
    1cae:	a1 f4       	brne	.+40     	; 0x1cd8 <DrawChar+0x9e>
    {   
        cursorY = cursorY + (unsigned int)FontHeight * FontYScale;    
    1cb0:	f0 90 61 00 	lds	r15, 0x0061
    1cb4:	00 91 1c 02 	lds	r16, 0x021C
    1cb8:	e0 91 0e 02 	lds	r30, 0x020E
    1cbc:	f0 91 0f 02 	lds	r31, 0x020F
    1cc0:	f0 9e       	mul	r15, r16
    1cc2:	e0 0d       	add	r30, r0
    1cc4:	f1 1d       	adc	r31, r1
    1cc6:	11 24       	eor	r1, r1
    1cc8:	f0 93 0f 02 	sts	0x020F, r31
    1ccc:	e0 93 0e 02 	sts	0x020E, r30
        cursorX = 0;   
    1cd0:	10 92 11 02 	sts	0x0211, r1
    1cd4:	10 92 10 02 	sts	0x0210, r1
    }   
   
    // charactor out of range.   
    if( (c < firstchar) || (c > lastchar) || (fontSize == 0))    
    1cd8:	89 17       	cp	r24, r25
    1cda:	08 f4       	brcc	.+2      	; 0x1cde <DrawChar+0xa4>
    1cdc:	64 c1       	rjmp	.+712    	; 0x1fa6 <DrawChar+0x36c>
    1cde:	18 17       	cp	r17, r24
    1ce0:	08 f4       	brcc	.+2      	; 0x1ce4 <DrawChar+0xaa>
    1ce2:	63 c1       	rjmp	.+710    	; 0x1faa <DrawChar+0x370>
    1ce4:	ab 2b       	or	r26, r27
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <DrawChar+0xb0>
    1ce8:	62 c1       	rjmp	.+708    	; 0x1fae <DrawChar+0x374>
        return 0;   
   
    // charactor is not in list.   
    if (charwidth == 0)   
    1cea:	0c 81       	ldd	r16, Y+4	; 0x04
    1cec:	00 23       	and	r16, r16
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <DrawChar+0xb8>
    1cf0:	60 c1       	rjmp	.+704    	; 0x1fb2 <DrawChar+0x378>
        return 0;   
   
    // sara thai font. line remain at last position   
    if(FontFixed)   
    1cf2:	90 91 13 02 	lds	r25, 0x0213
    1cf6:	99 23       	and	r25, r25
    1cf8:	21 f0       	breq	.+8      	; 0x1d02 <DrawChar+0xc8>
        charwidth = FontWidth;   
    1cfa:	00 91 1b 02 	lds	r16, 0x021B
    1cfe:	0c 83       	std	Y+4, r16	; 0x04
    1d00:	19 c0       	rjmp	.+50     	; 0x1d34 <DrawChar+0xfa>
    else   
    {   
        if (((c >= 0xd4) && (c <= 0xda)) ||    
    1d02:	9c e2       	ldi	r25, 0x2C	; 44
    1d04:	98 0f       	add	r25, r24
    1d06:	97 30       	cpi	r25, 0x07	; 7
    1d08:	30 f0       	brcs	.+12     	; 0x1d16 <DrawChar+0xdc>
            ((c >= 0xe7) && (c <= 0xec)) ||   
    1d0a:	99 e1       	ldi	r25, 0x19	; 25
    1d0c:	98 0f       	add	r25, r24
    // sara thai font. line remain at last position   
    if(FontFixed)   
        charwidth = FontWidth;   
    else   
    {   
        if (((c >= 0xd4) && (c <= 0xda)) ||    
    1d0e:	96 30       	cpi	r25, 0x06	; 6
    1d10:	10 f0       	brcs	.+4      	; 0x1d16 <DrawChar+0xdc>
            ((c >= 0xe7) && (c <= 0xec)) ||   
    1d12:	81 3d       	cpi	r24, 0xD1	; 209
    1d14:	79 f4       	brne	.+30     	; 0x1d34 <DrawChar+0xfa>
            (c == 0xd1))   
        {   
            cursorX = cursorX - charwidth * FontXScale;   
    1d16:	90 91 62 00 	lds	r25, 0x0062
    1d1a:	e0 91 10 02 	lds	r30, 0x0210
    1d1e:	f0 91 11 02 	lds	r31, 0x0211
    1d22:	0c 81       	ldd	r16, Y+4	; 0x04
    1d24:	09 9f       	mul	r16, r25
    1d26:	e0 19       	sub	r30, r0
    1d28:	f1 09       	sbc	r31, r1
    1d2a:	11 24       	eor	r1, r1
    1d2c:	f0 93 11 02 	sts	0x0211, r31
    1d30:	e0 93 10 02 	sts	0x0210, r30
        }   
    }   
   
    // fixed width for digit   
    if ( (c >= '0') && (c <= '9'))   
    1d34:	80 53       	subi	r24, 0x30	; 48
    1d36:	8a 30       	cpi	r24, 0x0A	; 10
    1d38:	30 f4       	brcc	.+12     	; 0x1d46 <DrawChar+0x10c>
        charwidth = pgm_read_byte_near(&FontPointer[7+'0'-firstchar]);   
    1d3a:	f9 01       	movw	r30, r18
    1d3c:	e4 1b       	sub	r30, r20
    1d3e:	f5 0b       	sbc	r31, r21
    1d40:	f7 96       	adiw	r30, 0x37	; 55
    1d42:	04 91       	lpm	r16, Z
    1d44:	0c 83       	std	Y+4, r16	; 0x04
   
    // line adjust   
    if (cursorX + charwidth * FontXScale > GetMaxX())   
    1d46:	80 91 62 00 	lds	r24, 0x0062
    1d4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d4c:	ef 2f       	mov	r30, r31
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	fa 87       	std	Y+10, r31	; 0x0a
    1d52:	e9 87       	std	Y+9, r30	; 0x09
    1d54:	e0 91 10 02 	lds	r30, 0x0210
    1d58:	f0 91 11 02 	lds	r31, 0x0211
    1d5c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d5e:	80 9f       	mul	r24, r16
    1d60:	e0 0d       	add	r30, r0
    1d62:	f1 1d       	adc	r31, r1
    1d64:	11 24       	eor	r1, r1
    1d66:	e0 3f       	cpi	r30, 0xF0	; 240
    1d68:	f1 05       	cpc	r31, r1
    1d6a:	a0 f0       	brcs	.+40     	; 0x1d94 <DrawChar+0x15a>
    {   
        cursorY = cursorY + (unsigned int)FontHeight * FontYScale;    
    1d6c:	90 91 61 00 	lds	r25, 0x0061
    1d70:	80 91 1c 02 	lds	r24, 0x021C
    1d74:	e0 91 0e 02 	lds	r30, 0x020E
    1d78:	f0 91 0f 02 	lds	r31, 0x020F
    1d7c:	98 9f       	mul	r25, r24
    1d7e:	e0 0d       	add	r30, r0
    1d80:	f1 1d       	adc	r31, r1
    1d82:	11 24       	eor	r1, r1
    1d84:	f0 93 0f 02 	sts	0x020F, r31
    1d88:	e0 93 0e 02 	sts	0x020E, r30
        cursorX = 0;   
    1d8c:	10 92 11 02 	sts	0x0211, r1
    1d90:	10 92 10 02 	sts	0x0210, r1
    }   
   
    for(uint8_t Ccounter = 0; Ccounter < c-firstchar; Ccounter++)   
    1d94:	64 1b       	sub	r22, r20
    1d96:	75 0b       	sbc	r23, r21
    1d98:	16 16       	cp	r1, r22
    1d9a:	17 06       	cpc	r1, r23
    1d9c:	94 f4       	brge	.+36     	; 0x1dc2 <DrawChar+0x188>
    1d9e:	a0 e0       	ldi	r26, 0x00	; 0
    uint8_t     charwidth       =   pgm_read_byte_near(&FontPointer[7+c-firstchar]);   
    uint8_t     byte            =   0;   
    uint8_t     bitoffset       =   0;   
    uint8_t     maske           =   0;   
    uint16_t    bcounter        =   0;   
    uint16_t    bitsbischar     =   0;   
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
        cursorY = cursorY + (unsigned int)FontHeight * FontYScale;    
        cursorX = 0;   
    }   
   
    for(uint8_t Ccounter = 0; Ccounter < c-firstchar; Ccounter++)   
        bitsbischar += (pgm_read_byte_near(&FontPointer[Ccounter+7]));   
    1da4:	ea 2f       	mov	r30, r26
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	37 96       	adiw	r30, 0x07	; 7
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	e4 91       	lpm	r30, Z
    1db0:	8e 0f       	add	r24, r30
    1db2:	91 1d       	adc	r25, r1
    {   
        cursorY = cursorY + (unsigned int)FontHeight * FontYScale;    
        cursorX = 0;   
    }   
   
    for(uint8_t Ccounter = 0; Ccounter < c-firstchar; Ccounter++)   
    1db4:	af 5f       	subi	r26, 0xFF	; 255
    1db6:	ea 2f       	mov	r30, r26
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	e6 17       	cp	r30, r22
    1dbc:	f7 07       	cpc	r31, r23
    1dbe:	94 f3       	brlt	.-28     	; 0x1da4 <DrawChar+0x16a>
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DrawChar+0x18c>
    uint8_t     charwidth       =   pgm_read_byte_near(&FontPointer[7+c-firstchar]);   
    uint8_t     byte            =   0;   
    uint8_t     bitoffset       =   0;   
    uint8_t     maske           =   0;   
    uint16_t    bcounter        =   0;   
    uint16_t    bitsbischar     =   0;   
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
   
    for(uint8_t Ccounter = 0; Ccounter < c-firstchar; Ccounter++)   
        bitsbischar += (pgm_read_byte_near(&FontPointer[Ccounter+7]));   
   
   
    bitsbischar *= FontHeight;   
    1dc6:	60 91 1c 02 	lds	r22, 0x021C
    1dca:	68 9f       	mul	r22, r24
    1dcc:	90 01       	movw	r18, r0
    1dce:	69 9f       	mul	r22, r25
    1dd0:	30 0d       	add	r19, r0
    1dd2:	11 24       	eor	r1, r1
    bitsbischar += ((lastchar-firstchar)+7)*8;   
    1dd4:	81 2f       	mov	r24, r17
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	84 1b       	sub	r24, r20
    1dda:	95 0b       	sbc	r25, r21
    1ddc:	07 96       	adiw	r24, 0x07	; 7
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	82 0f       	add	r24, r18
    1dec:	93 1f       	adc	r25, r19
    bytesbischar = bitsbischar/8;   
    1dee:	9c 01       	movw	r18, r24
    1df0:	36 95       	lsr	r19
    1df2:	27 95       	ror	r18
    1df4:	36 95       	lsr	r19
    1df6:	27 95       	ror	r18
    1df8:	36 95       	lsr	r19
    1dfa:	27 95       	ror	r18
    bitoffset = bitsbischar % 8;   
    maske = bitoffset % 8;   
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	47 70       	andi	r20, 0x07	; 7
    1e00:	44 2e       	mov	r4, r20
   
    for(uint8_t xc = 0; xc < charwidth; xc++) // Eigentlcihe Ausgaberoutine   
    1e02:	0c 81       	ldd	r16, Y+4	; 0x04
    1e04:	00 23       	and	r16, r16
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <DrawChar+0x1d0>
    1e08:	ab c0       	rjmp	.+342    	; 0x1f60 <DrawChar+0x326>
    1e0a:	1b 82       	std	Y+3, r1	; 0x03
    1e0c:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t     lastchar        =   pgm_read_byte_near(&FontPointer[6]);   
    uint8_t     charwidth       =   pgm_read_byte_near(&FontPointer[7+c-firstchar]);   
    uint8_t     byte            =   0;   
    uint8_t     bitoffset       =   0;   
    uint8_t     maske           =   0;   
    uint16_t    bcounter        =   0;   
    1e0e:	81 2c       	mov	r8, r1
    1e10:	91 2c       	mov	r9, r1
            if(maske > 7)   
            {   
                maske = 0;   
                bcounter+=1;   
            };   
            byte = pgm_read_byte_near(&FontPointer[bytesbischar + bcounter]+1);   
    1e12:	c9 01       	movw	r24, r18
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
//          yPos = (((uint16_t)FontHeight-yc)*FontYScale + cursorY);   
            yPos = ((yc)*FontYScale + cursorY);   
#endif   
            for(uint8_t sx = 0; sx < FontXScale; sx++)   
            {   
                for(uint8_t sy = 0; sy < FontYScale; sy++)   
    1e1a:	21 2c       	mov	r2, r1
    1e1c:	52 2c       	mov	r5, r2
    1e1e:	9a c0       	rjmp	.+308    	; 0x1f54 <DrawChar+0x31a>
   
    for(uint8_t xc = 0; xc < charwidth; xc++) // Eigentlcihe Ausgaberoutine   
    {   
        for(uint8_t yc = 0; yc < FontHeight; yc++)   
        {   
            if(maske > 7)   
    1e20:	97 e0       	ldi	r25, 0x07	; 7
    1e22:	94 15       	cp	r25, r4
    1e24:	20 f4       	brcc	.+8      	; 0x1e2e <DrawChar+0x1f4>
            {   
                maske = 0;   
                bcounter+=1;   
    1e26:	af ef       	ldi	r26, 0xFF	; 255
    1e28:	8a 1a       	sub	r8, r26
    1e2a:	9a 0a       	sbc	r9, r26
    {   
        for(uint8_t yc = 0; yc < FontHeight; yc++)   
        {   
            if(maske > 7)   
            {   
                maske = 0;   
    1e2c:	42 2c       	mov	r4, r2
                bcounter+=1;   
            };   
            byte = pgm_read_byte_near(&FontPointer[bytesbischar + bcounter]+1);   
    1e2e:	e0 91 1d 02 	lds	r30, 0x021D
    1e32:	f0 91 1e 02 	lds	r31, 0x021E
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	88 0d       	add	r24, r8
    1e3c:	99 1d       	adc	r25, r9
    1e3e:	e8 0f       	add	r30, r24
    1e40:	f9 1f       	adc	r31, r25
    1e42:	e4 91       	lpm	r30, Z
    1e44:	e9 83       	std	Y+1, r30	; 0x01
   
            xPos = (uint16_t)xc*FontXScale + cursorX;   
    1e46:	20 91 62 00 	lds	r18, 0x0062
    1e4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e4e:	2e 9f       	mul	r18, r30
    1e50:	50 01       	movw	r10, r0
    1e52:	2f 9f       	mul	r18, r31
    1e54:	b0 0c       	add	r11, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	80 91 10 02 	lds	r24, 0x0210
    1e5c:	90 91 11 02 	lds	r25, 0x0211
    1e60:	a8 0e       	add	r10, r24
    1e62:	b9 1e       	adc	r11, r25
#ifdef Horizontal   
            yPos = (((uint16_t)yc)*FontYScale + cursorY);   
    1e64:	80 91 61 00 	lds	r24, 0x0061
    1e68:	c0 90 0e 02 	lds	r12, 0x020E
    1e6c:	d0 90 0f 02 	lds	r13, 0x020F
    1e70:	38 9e       	mul	r3, r24
    1e72:	c0 0c       	add	r12, r0
    1e74:	d1 1c       	adc	r13, r1
    1e76:	11 24       	eor	r1, r1
#else   
//          yPos = GetMaxY() - (((uint16_t)yc)*FontYScale + cursorY);   
//          yPos = (((uint16_t)FontHeight-yc)*FontYScale + cursorY);   
            yPos = ((yc)*FontYScale + cursorY);   
#endif   
            for(uint8_t sx = 0; sx < FontXScale; sx++)   
    1e78:	22 23       	and	r18, r18
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <DrawChar+0x244>
    1e7c:	5b c0       	rjmp	.+182    	; 0x1f34 <DrawChar+0x2fa>
    1e7e:	01 e0       	ldi	r16, 0x01	; 1
    1e80:	10 e0       	ldi	r17, 0x00	; 0
    1e82:	04 2c       	mov	r0, r4
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <DrawChar+0x250>
    1e86:	00 0f       	add	r16, r16
    1e88:	11 1f       	adc	r17, r17
    1e8a:	0a 94       	dec	r0
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <DrawChar+0x24c>
    1e8e:	62 2c       	mov	r6, r2
    1e90:	48 c0       	rjmp	.+144    	; 0x1f22 <DrawChar+0x2e8>
            {   
                for(uint8_t sy = 0; sy < FontYScale; sy++)   
                {   
                    if(bit_is_set(byte,maske))   
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	80 23       	and	r24, r16
    1e98:	91 23       	and	r25, r17
    1e9a:	89 2b       	or	r24, r25
    1e9c:	d1 f0       	breq	.+52     	; 0x1ed2 <DrawChar+0x298>
                    {   
                        SetColor(GetFgColor());   
    1e9e:	80 91 63 00 	lds	r24, 0x0063
    1ea2:	90 91 64 00 	lds	r25, 0x0064
    1ea6:	90 93 79 00 	sts	0x0079, r25
    1eaa:	80 93 78 00 	sts	0x0078, r24
                        if(rot)   
    1eae:	80 91 16 02 	lds	r24, 0x0216
    1eb2:	88 23       	and	r24, r24
    1eb4:	39 f0       	breq	.+14     	; 0x1ec4 <DrawChar+0x28a>
                            LCD_PutPixel(yPos +sy,xPos+sx);   
    1eb6:	b7 01       	movw	r22, r14
    1eb8:	c6 01       	movw	r24, r12
    1eba:	87 0d       	add	r24, r7
    1ebc:	91 1d       	adc	r25, r1
    1ebe:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
    1ec2:	24 c0       	rjmp	.+72     	; 0x1f0c <DrawChar+0x2d2>
                        else   
                            LCD_PutPixel(xPos+sx,yPos+sy);   
    1ec4:	b6 01       	movw	r22, r12
    1ec6:	67 0d       	add	r22, r7
    1ec8:	71 1d       	adc	r23, r1
    1eca:	c7 01       	movw	r24, r14
    1ecc:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
    1ed0:	1d c0       	rjmp	.+58     	; 0x1f0c <DrawChar+0x2d2>
                    }   
                    else   
                    {   
                        if(NonTransparence)   
    1ed2:	80 91 12 02 	lds	r24, 0x0212
    1ed6:	88 23       	and	r24, r24
    1ed8:	c9 f0       	breq	.+50     	; 0x1f0c <DrawChar+0x2d2>
                        {   
                            SetColor(GetBkColor());   
    1eda:	80 91 14 02 	lds	r24, 0x0214
    1ede:	90 91 15 02 	lds	r25, 0x0215
    1ee2:	90 93 79 00 	sts	0x0079, r25
    1ee6:	80 93 78 00 	sts	0x0078, r24
                            if(rot)   
    1eea:	80 91 16 02 	lds	r24, 0x0216
    1eee:	88 23       	and	r24, r24
    1ef0:	39 f0       	breq	.+14     	; 0x1f00 <DrawChar+0x2c6>
                                LCD_PutPixel(yPos +sy,xPos+sx);   
    1ef2:	b7 01       	movw	r22, r14
    1ef4:	c6 01       	movw	r24, r12
    1ef6:	87 0d       	add	r24, r7
    1ef8:	91 1d       	adc	r25, r1
    1efa:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
    1efe:	06 c0       	rjmp	.+12     	; 0x1f0c <DrawChar+0x2d2>
                            else   
                                LCD_PutPixel(xPos+sx,yPos+sy);   
    1f00:	b6 01       	movw	r22, r12
    1f02:	67 0d       	add	r22, r7
    1f04:	71 1d       	adc	r23, r1
    1f06:	c7 01       	movw	r24, r14
    1f08:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
//          yPos = (((uint16_t)FontHeight-yc)*FontYScale + cursorY);   
            yPos = ((yc)*FontYScale + cursorY);   
#endif   
            for(uint8_t sx = 0; sx < FontXScale; sx++)   
            {   
                for(uint8_t sy = 0; sy < FontYScale; sy++)   
    1f0c:	73 94       	inc	r7
    1f0e:	80 91 61 00 	lds	r24, 0x0061
    1f12:	78 16       	cp	r7, r24
    1f14:	08 f4       	brcc	.+2      	; 0x1f18 <DrawChar+0x2de>
    1f16:	bd cf       	rjmp	.-134    	; 0x1e92 <DrawChar+0x258>
#else   
//          yPos = GetMaxY() - (((uint16_t)yc)*FontYScale + cursorY);   
//          yPos = (((uint16_t)FontHeight-yc)*FontYScale + cursorY);   
            yPos = ((yc)*FontYScale + cursorY);   
#endif   
            for(uint8_t sx = 0; sx < FontXScale; sx++)   
    1f18:	63 94       	inc	r6
    1f1a:	80 91 62 00 	lds	r24, 0x0062
    1f1e:	68 16       	cp	r6, r24
    1f20:	48 f4       	brcc	.+18     	; 0x1f34 <DrawChar+0x2fa>
            {   
                for(uint8_t sy = 0; sy < FontYScale; sy++)   
    1f22:	80 91 61 00 	lds	r24, 0x0061
    1f26:	88 23       	and	r24, r24
    1f28:	b9 f3       	breq	.-18     	; 0x1f18 <DrawChar+0x2de>
    1f2a:	75 2c       	mov	r7, r5
                        {   
                            SetColor(GetBkColor());   
                            if(rot)   
                                LCD_PutPixel(yPos +sy,xPos+sx);   
                            else   
                                LCD_PutPixel(xPos+sx,yPos+sy);   
    1f2c:	75 01       	movw	r14, r10
    1f2e:	e6 0c       	add	r14, r6
    1f30:	f1 1c       	adc	r15, r1
    1f32:	af cf       	rjmp	.-162    	; 0x1e92 <DrawChar+0x258>
                        }   
                    }   
                }   
            }   
            maske++;   
    1f34:	43 94       	inc	r4
    bitoffset = bitsbischar % 8;   
    maske = bitoffset % 8;   
   
    for(uint8_t xc = 0; xc < charwidth; xc++) // Eigentlcihe Ausgaberoutine   
    {   
        for(uint8_t yc = 0; yc < FontHeight; yc++)   
    1f36:	33 94       	inc	r3
    1f38:	80 91 1c 02 	lds	r24, 0x021C
    1f3c:	38 16       	cp	r3, r24
    1f3e:	08 f4       	brcc	.+2      	; 0x1f42 <DrawChar+0x308>
    1f40:	6f cf       	rjmp	.-290    	; 0x1e20 <DrawChar+0x1e6>
    1f42:	2a 81       	ldd	r18, Y+2	; 0x02
    1f44:	3b 81       	ldd	r19, Y+3	; 0x03
    1f46:	2f 5f       	subi	r18, 0xFF	; 255
    1f48:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4a:	3b 83       	std	Y+3, r19	; 0x03
    1f4c:	2a 83       	std	Y+2, r18	; 0x02
    bitsbischar += ((lastchar-firstchar)+7)*8;   
    bytesbischar = bitsbischar/8;   
    bitoffset = bitsbischar % 8;   
    maske = bitoffset % 8;   
   
    for(uint8_t xc = 0; xc < charwidth; xc++) // Eigentlcihe Ausgaberoutine   
    1f4e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f50:	20 17       	cp	r18, r16
    1f52:	30 f4       	brcc	.+12     	; 0x1f60 <DrawChar+0x326>
    {   
        for(uint8_t yc = 0; yc < FontHeight; yc++)   
    1f54:	80 91 1c 02 	lds	r24, 0x021C
    1f58:	88 23       	and	r24, r24
    1f5a:	99 f3       	breq	.-26     	; 0x1f42 <DrawChar+0x308>
    1f5c:	31 2c       	mov	r3, r1
    1f5e:	60 cf       	rjmp	.-320    	; 0x1e20 <DrawChar+0x1e6>
                }   
            }   
            maske++;   
        }   
    }   
    SetColor(color);   
    1f60:	2f 81       	ldd	r18, Y+7	; 0x07
    1f62:	38 85       	ldd	r19, Y+8	; 0x08
    1f64:	30 93 79 00 	sts	0x0079, r19
    1f68:	20 93 78 00 	sts	0x0078, r18
   
    // adjust cursor to next position   
    cursorX += charwidth * FontXScale + FontSpace;   
    1f6c:	50 91 62 00 	lds	r21, 0x0062
    1f70:	40 91 60 00 	lds	r20, 0x0060
    1f74:	e9 85       	ldd	r30, Y+9	; 0x09
    1f76:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f78:	5e 9f       	mul	r21, r30
    1f7a:	c0 01       	movw	r24, r0
    1f7c:	5f 9f       	mul	r21, r31
    1f7e:	90 0d       	add	r25, r0
    1f80:	11 24       	eor	r1, r1
    1f82:	84 0f       	add	r24, r20
    1f84:	91 1d       	adc	r25, r1
    1f86:	20 91 10 02 	lds	r18, 0x0210
    1f8a:	30 91 11 02 	lds	r19, 0x0211
    1f8e:	82 0f       	add	r24, r18
    1f90:	93 1f       	adc	r25, r19
    1f92:	90 93 11 02 	sts	0x0211, r25
    1f96:	80 93 10 02 	sts	0x0210, r24
   
    return(charwidth * FontXScale + FontSpace);   
    1f9a:	84 2f       	mov	r24, r20
    1f9c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f9e:	05 9f       	mul	r16, r21
    1fa0:	80 0d       	add	r24, r0
    1fa2:	11 24       	eor	r1, r1
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <DrawChar+0x37a>
        cursorX = 0;   
    }   
   
    // charactor out of range.   
    if( (c < firstchar) || (c > lastchar) || (fontSize == 0))    
        return 0;   
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	05 c0       	rjmp	.+10     	; 0x1fb4 <DrawChar+0x37a>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	03 c0       	rjmp	.+6      	; 0x1fb4 <DrawChar+0x37a>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <DrawChar+0x37a>
   
    // charactor is not in list.   
    if (charwidth == 0)   
        return 0;   
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
   
    // adjust cursor to next position   
    cursorX += charwidth * FontXScale + FontSpace;   
   
    return(charwidth * FontXScale + FontSpace);   
}   
    1fb4:	2a 96       	adiw	r28, 0x0a	; 10
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	ff 90       	pop	r15
    1fca:	ef 90       	pop	r14
    1fcc:	df 90       	pop	r13
    1fce:	cf 90       	pop	r12
    1fd0:	bf 90       	pop	r11
    1fd2:	af 90       	pop	r10
    1fd4:	9f 90       	pop	r9
    1fd6:	8f 90       	pop	r8
    1fd8:	7f 90       	pop	r7
    1fda:	6f 90       	pop	r6
    1fdc:	5f 90       	pop	r5
    1fde:	4f 90       	pop	r4
    1fe0:	3f 90       	pop	r3
    1fe2:	2f 90       	pop	r2
    1fe4:	08 95       	ret

00001fe6 <CalcTextWidth>:
   
unsigned int CalcTextWidth(char *Text)   
{   
    1fe6:	af 92       	push	r10
    1fe8:	bf 92       	push	r11
    1fea:	cf 92       	push	r12
    1fec:	df 92       	push	r13
    1fee:	ef 92       	push	r14
    1ff0:	ff 92       	push	r15
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    unsigned int strSize = 0;   
    unsigned char firstchar =   pgm_read_byte_near(&FontPointer[5]);   
    1ffa:	00 91 1d 02 	lds	r16, 0x021D
    1ffe:	10 91 1e 02 	lds	r17, 0x021E
    2002:	f8 01       	movw	r30, r16
    2004:	35 96       	adiw	r30, 0x05	; 5
    2006:	c4 90       	lpm	r12, Z
    unsigned char lastchar  =   pgm_read_byte_near(&FontPointer[6]);   
    2008:	31 96       	adiw	r30, 0x01	; 1
    200a:	b4 90       	lpm	r11, Z
    unsigned char charwidth;   
    unsigned char c;   
   
    while(*Text)   
    200c:	dc 01       	movw	r26, r24
    200e:	ec 91       	ld	r30, X
    2010:	ee 23       	and	r30, r30
    2012:	a9 f1       	breq	.+106    	; 0x207e <CalcTextWidth+0x98>
    {   
        c = *Text;   
   
        if(FontFixed)   
    2014:	d0 90 13 02 	lds	r13, 0x0213
            strSize += FontWidth * FontXScale;   
    2018:	a0 90 1b 02 	lds	r10, 0x021B
    201c:	60 91 62 00 	lds	r22, 0x0062
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	a6 9e       	mul	r10, r22
    2024:	e0 01       	movw	r28, r0
    2026:	a7 9e       	mul	r10, r23
    2028:	d0 0d       	add	r29, r0
    202a:	11 24       	eor	r1, r1
                charwidth = FontWidth;   
            else   
                charwidth = pgm_read_byte_near(&FontPointer[7+c-firstchar]);   
            strSize += charwidth * FontXScale;   
        }   
        strSize += FontSpace;   
    202c:	20 91 60 00 	lds	r18, 0x0060
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	11 96       	adiw	r26, 0x01	; 1
    return(charwidth * FontXScale + FontSpace);   
}   
   
unsigned int CalcTextWidth(char *Text)   
{   
    unsigned int strSize = 0;   
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
        else   
        {   
            if( (c < firstchar) || (c > lastchar))    
                charwidth = FontWidth;   
            else   
                charwidth = pgm_read_byte_near(&FontPointer[7+c-firstchar]);   
    2038:	ec 2c       	mov	r14, r12
    203a:	f1 2c       	mov	r15, r1
   
    while(*Text)   
    {   
        c = *Text;   
   
        if(FontFixed)   
    203c:	dd 20       	and	r13, r13
    203e:	19 f0       	breq	.+6      	; 0x2046 <CalcTextWidth+0x60>
            strSize += FontWidth * FontXScale;   
    2040:	8c 0f       	add	r24, r28
    2042:	9d 1f       	adc	r25, r29
    2044:	16 c0       	rjmp	.+44     	; 0x2072 <CalcTextWidth+0x8c>
        else   
        {   
            if( (c < firstchar) || (c > lastchar))    
    2046:	ec 15       	cp	r30, r12
    2048:	50 f0       	brcs	.+20     	; 0x205e <CalcTextWidth+0x78>
    204a:	be 16       	cp	r11, r30
    204c:	50 f0       	brcs	.+20     	; 0x2062 <CalcTextWidth+0x7c>
                charwidth = FontWidth;   
            else   
                charwidth = pgm_read_byte_near(&FontPointer[7+c-firstchar]);   
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	37 96       	adiw	r30, 0x07	; 7
    2052:	ee 19       	sub	r30, r14
    2054:	ff 09       	sbc	r31, r15
    2056:	e0 0f       	add	r30, r16
    2058:	f1 1f       	adc	r31, r17
    205a:	e4 91       	lpm	r30, Z
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <CalcTextWidth+0x7e>
        if(FontFixed)   
            strSize += FontWidth * FontXScale;   
        else   
        {   
            if( (c < firstchar) || (c > lastchar))    
                charwidth = FontWidth;   
    205e:	ea 2d       	mov	r30, r10
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <CalcTextWidth+0x7e>
    2062:	ea 2d       	mov	r30, r10
            else   
                charwidth = pgm_read_byte_near(&FontPointer[7+c-firstchar]);   
            strSize += charwidth * FontXScale;   
    2064:	e6 9f       	mul	r30, r22
    2066:	a0 01       	movw	r20, r0
    2068:	e7 9f       	mul	r30, r23
    206a:	50 0d       	add	r21, r0
    206c:	11 24       	eor	r1, r1
    206e:	84 0f       	add	r24, r20
    2070:	95 1f       	adc	r25, r21
        }   
        strSize += FontSpace;   
    2072:	82 0f       	add	r24, r18
    2074:	93 1f       	adc	r25, r19
    unsigned char firstchar =   pgm_read_byte_near(&FontPointer[5]);   
    unsigned char lastchar  =   pgm_read_byte_near(&FontPointer[6]);   
    unsigned char charwidth;   
    unsigned char c;   
   
    while(*Text)   
    2076:	ed 91       	ld	r30, X+
    2078:	e1 11       	cpse	r30, r1
    207a:	e0 cf       	rjmp	.-64     	; 0x203c <CalcTextWidth+0x56>
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <CalcTextWidth+0x9c>
    return(charwidth * FontXScale + FontSpace);   
}   
   
unsigned int CalcTextWidth(char *Text)   
{   
    unsigned int strSize = 0;   
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
        }   
        strSize += FontSpace;   
        Text++;   
    }   
    return strSize ;   
}   
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	bf 90       	pop	r11
    2094:	af 90       	pop	r10
    2096:	08 95       	ret

00002098 <DrawStr>:
    return FontHeight * FontYScale;   
}   
   
// draw string   
unsigned int DrawStr(char *Text)   
{      
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	ec 01       	movw	r28, r24
    char c;   
    uint8_t sizeofstring = 0;   
    uint8_t counter = 0;   
   
    while((c = Text[counter]))   
    20a2:	88 81       	ld	r24, Y
    20a4:	88 23       	and	r24, r24
    20a6:	69 f0       	breq	.+26     	; 0x20c2 <DrawStr+0x2a>
// draw string   
unsigned int DrawStr(char *Text)   
{      
    char c;   
    uint8_t sizeofstring = 0;   
    uint8_t counter = 0;   
    20a8:	10 e0       	ldi	r17, 0x00	; 0
   
// draw string   
unsigned int DrawStr(char *Text)   
{      
    char c;   
    uint8_t sizeofstring = 0;   
    20aa:	00 e0       	ldi	r16, 0x00	; 0
    uint8_t counter = 0;   
   
    while((c = Text[counter]))   
    {   
        sizeofstring += DrawChar(c);   
    20ac:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <DrawChar>
    20b0:	08 0f       	add	r16, r24
        counter++;   
    20b2:	1f 5f       	subi	r17, 0xFF	; 255
{      
    char c;   
    uint8_t sizeofstring = 0;   
    uint8_t counter = 0;   
   
    while((c = Text[counter]))   
    20b4:	fe 01       	movw	r30, r28
    20b6:	e1 0f       	add	r30, r17
    20b8:	f1 1d       	adc	r31, r1
    20ba:	80 81       	ld	r24, Z
    20bc:	81 11       	cpse	r24, r1
    20be:	f6 cf       	rjmp	.-20     	; 0x20ac <DrawStr+0x14>
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <DrawStr+0x2c>
   
// draw string   
unsigned int DrawStr(char *Text)   
{      
    char c;   
    uint8_t sizeofstring = 0;   
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    {   
        sizeofstring += DrawChar(c);   
        counter++;   
    }   
    return sizeofstring;   
}   
    20c4:	80 2f       	mov	r24, r16
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	08 95       	ret

000020d2 <DrawText>:
    // display text  
    DrawStr(text);  
}  
*/   
void DrawText(uint16_t left, uint16_t top, uint16_t right, uint16_t bottom, char *Text, uint8_t aline)   
{   
    20d2:	8f 92       	push	r8
    20d4:	9f 92       	push	r9
    20d6:	af 92       	push	r10
    20d8:	bf 92       	push	r11
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	0f 93       	push	r16
    20e2:	1f 93       	push	r17
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	ec 01       	movw	r28, r24
    20ea:	6b 01       	movw	r12, r22
    20ec:	4a 01       	movw	r8, r20
    20ee:	59 01       	movw	r10, r18
    uint16_t sizeofstring;   
   
    sizeofstring = CalcTextWidth(Text);   
    20f0:	c8 01       	movw	r24, r16
    20f2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <CalcTextWidth>
    top = top + (bottom - top - FontHeight)/2;   
    20f6:	ac 18       	sub	r10, r12
    20f8:	bd 08       	sbc	r11, r13
    20fa:	20 91 1c 02 	lds	r18, 0x021C
    20fe:	a2 1a       	sub	r10, r18
    2100:	b1 08       	sbc	r11, r1
    2102:	b6 94       	lsr	r11
    2104:	a7 94       	ror	r10
    2106:	ca 0c       	add	r12, r10
    2108:	db 1c       	adc	r13, r11
       
    switch (aline)   
    210a:	21 e0       	ldi	r18, 0x01	; 1
    210c:	e2 16       	cp	r14, r18
    210e:	21 f0       	breq	.+8      	; 0x2118 <DrawText+0x46>
    2110:	22 e0       	ldi	r18, 0x02	; 2
    2112:	e2 16       	cp	r14, r18
    2114:	51 f0       	breq	.+20     	; 0x212a <DrawText+0x58>
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <DrawText+0x64>
    {   
        case ALINE_LEFT:   
            break;   
   
        case ALINE_CENTER:   
                left = left + (right - left - sizeofstring) / 2;   
    2118:	8c 1a       	sub	r8, r28
    211a:	9d 0a       	sbc	r9, r29
    211c:	88 1a       	sub	r8, r24
    211e:	99 0a       	sbc	r9, r25
    2120:	96 94       	lsr	r9
    2122:	87 94       	ror	r8
    2124:	c8 0d       	add	r28, r8
    2126:	d9 1d       	adc	r29, r9
            break;   
    2128:	06 c0       	rjmp	.+12     	; 0x2136 <DrawText+0x64>
   
        case ALINE_RIGHT:   
            if (right > sizeofstring)   
    212a:	88 15       	cp	r24, r8
    212c:	99 05       	cpc	r25, r9
    212e:	18 f4       	brcc	.+6      	; 0x2136 <DrawText+0x64>
                left = right - sizeofstring;   
    2130:	e4 01       	movw	r28, r8
    2132:	c8 1b       	sub	r28, r24
    2134:	d9 0b       	sbc	r29, r25
            break;   
    }   
   
    SetCursorX(left);   
    2136:	d0 93 11 02 	sts	0x0211, r29
    213a:	c0 93 10 02 	sts	0x0210, r28
    SetCursorY(top);   
    213e:	d0 92 0f 02 	sts	0x020F, r13
    2142:	c0 92 0e 02 	sts	0x020E, r12
    DrawStr(Text);   
    2146:	c8 01       	movw	r24, r16
    2148:	0e 94 4c 10 	call	0x2098	; 0x2098 <DrawStr>
}   
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ef 90       	pop	r14
    2156:	df 90       	pop	r13
    2158:	cf 90       	pop	r12
    215a:	bf 90       	pop	r11
    215c:	af 90       	pop	r10
    215e:	9f 90       	pop	r9
    2160:	8f 90       	pop	r8
    2162:	08 95       	ret

00002164 <Line>:
   
/* _____PUBLIC FUNCTIONS_____________________________________________________ */   
   

void Line(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)   
{   
    2164:	2f 92       	push	r2
    2166:	3f 92       	push	r3
    2168:	4f 92       	push	r4
    216a:	5f 92       	push	r5
    216c:	6f 92       	push	r6
    216e:	7f 92       	push	r7
    2170:	8f 92       	push	r8
    2172:	9f 92       	push	r9
    2174:	af 92       	push	r10
    2176:	bf 92       	push	r11
    2178:	cf 92       	push	r12
    217a:	df 92       	push	r13
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	2c 97       	sbiw	r28, 0x0c	; 12
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    {  
        FillRectangle(x1, y1, x2, y2);  
        return;  
    }  
*/   
    dx = abs((signed int)(x2 - x1));   
    2198:	fa 01       	movw	r30, r20
    219a:	e8 1b       	sub	r30, r24
    219c:	f9 0b       	sbc	r31, r25
    219e:	6f 01       	movw	r12, r30
    21a0:	22 f4       	brpl	.+8      	; 0x21aa <Line+0x46>
    21a2:	cc 24       	eor	r12, r12
    21a4:	dd 24       	eor	r13, r13
    21a6:	ce 1a       	sub	r12, r30
    21a8:	df 0a       	sbc	r13, r31
    dy = abs((signed int)(y2 - y1));   
    21aa:	f9 01       	movw	r30, r18
    21ac:	e6 1b       	sub	r30, r22
    21ae:	f7 0b       	sbc	r31, r23
    21b0:	1f 01       	movw	r2, r30
    21b2:	22 f4       	brpl	.+8      	; 0x21bc <Line+0x58>
    21b4:	22 24       	eor	r2, r2
    21b6:	33 24       	eor	r3, r3
    21b8:	2e 1a       	sub	r2, r30
    21ba:	3f 0a       	sbc	r3, r31
    x = x1;   
    21bc:	7c 01       	movw	r14, r24
    y = y1;   
    21be:	5b 01       	movw	r10, r22
   
    addx = addy = 1;   
    if(x1 > x2)   
    21c0:	48 17       	cp	r20, r24
    21c2:	59 07       	cpc	r21, r25
    21c4:	28 f0       	brcs	.+10     	; 0x21d0 <Line+0x6c>
    dx = abs((signed int)(x2 - x1));   
    dy = abs((signed int)(y2 - y1));   
    x = x1;   
    y = y1;   
   
    addx = addy = 1;   
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	5e 83       	std	Y+6, r21	; 0x06
    21cc:	4d 83       	std	Y+5, r20	; 0x05
    21ce:	04 c0       	rjmp	.+8      	; 0x21d8 <Line+0x74>
    if(x1 > x2)   
        addx = -1;   
    21d0:	af ef       	ldi	r26, 0xFF	; 255
    21d2:	bf ef       	ldi	r27, 0xFF	; 255
    21d4:	be 83       	std	Y+6, r27	; 0x06
    21d6:	ad 83       	std	Y+5, r26	; 0x05
    if(y1 > y2)   
    21d8:	26 17       	cp	r18, r22
    21da:	37 07       	cpc	r19, r23
    21dc:	28 f0       	brcs	.+10     	; 0x21e8 <Line+0x84>
    dx = abs((signed int)(x2 - x1));   
    dy = abs((signed int)(y2 - y1));   
    x = x1;   
    y = y1;   
   
    addx = addy = 1;   
    21de:	e1 e0       	ldi	r30, 0x01	; 1
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	f8 87       	std	Y+8, r31	; 0x08
    21e4:	ef 83       	std	Y+7, r30	; 0x07
    21e6:	04 c0       	rjmp	.+8      	; 0x21f0 <Line+0x8c>
    if(x1 > x2)   
        addx = -1;   
    if(y1 > y2)   
        addy = -1;   
    21e8:	2f ef       	ldi	r18, 0xFF	; 255
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	38 87       	std	Y+8, r19	; 0x08
    21ee:	2f 83       	std	Y+7, r18	; 0x07
   
    if (dx >= dy)   
    21f0:	c2 14       	cp	r12, r2
    21f2:	d3 04       	cpc	r13, r3
    21f4:	0c f4       	brge	.+2      	; 0x21f8 <Line+0x94>
    21f6:	5b c0       	rjmp	.+182    	; 0x22ae <Line+0x14a>
    {   
        P = 2L*dy - dx;   
    21f8:	21 01       	movw	r4, r2
    21fa:	66 24       	eor	r6, r6
    21fc:	57 fc       	sbrc	r5, 7
    21fe:	60 94       	com	r6
    2200:	76 2c       	mov	r7, r6
    2202:	44 0c       	add	r4, r4
    2204:	55 1c       	adc	r5, r5
    2206:	66 1c       	adc	r6, r6
    2208:	77 1c       	adc	r7, r7
    220a:	a6 01       	movw	r20, r12
    220c:	66 27       	eor	r22, r22
    220e:	57 fd       	sbrc	r21, 7
    2210:	60 95       	com	r22
    2212:	76 2f       	mov	r23, r22
    2214:	44 1a       	sub	r4, r20
    2216:	55 0a       	sbc	r5, r21
    2218:	66 0a       	sbc	r6, r22
    221a:	77 0a       	sbc	r7, r23
        for (i=0; i<=dx; ++i)   
    221c:	dd 20       	and	r13, r13
    221e:	0c f4       	brge	.+2      	; 0x2222 <Line+0xbe>
    2220:	9a c0       	rjmp	.+308    	; 0x2356 <Line+0x1f2>
        {   
            PutPixel(x, y);   
            if(P < 0)   
            {   
                P += 2*dy;   
    2222:	91 01       	movw	r18, r2
    2224:	22 0f       	add	r18, r18
    2226:	33 1f       	adc	r19, r19
    2228:	a9 01       	movw	r20, r18
    222a:	66 27       	eor	r22, r22
    222c:	57 fd       	sbrc	r21, 7
    222e:	60 95       	com	r22
    2230:	76 2f       	mov	r23, r22
    2232:	49 87       	std	Y+9, r20	; 0x09
    2234:	5a 87       	std	Y+10, r21	; 0x0a
    2236:	6b 87       	std	Y+11, r22	; 0x0b
    2238:	7c 87       	std	Y+12, r23	; 0x0c
                x += addx;   
            }   
            else   
            {   
                P += 2*dy - 2*dx;   
    223a:	2c 18       	sub	r2, r12
    223c:	3d 08       	sbc	r3, r13
    223e:	22 0c       	add	r2, r2
    2240:	33 1c       	adc	r3, r3
    2242:	91 01       	movw	r18, r2
    2244:	44 27       	eor	r20, r20
    2246:	37 fd       	sbrc	r19, 7
    2248:	40 95       	com	r20
    224a:	54 2f       	mov	r21, r20
    224c:	29 83       	std	Y+1, r18	; 0x01
    224e:	3a 83       	std	Y+2, r19	; 0x02
    2250:	4b 83       	std	Y+3, r20	; 0x03
    2252:	5c 83       	std	Y+4, r21	; 0x04
    2254:	ed 80       	ldd	r14, Y+5	; 0x05
    2256:	fe 80       	ldd	r15, Y+6	; 0x06
    2258:	87 01       	movw	r16, r14
    225a:	08 0f       	add	r16, r24
    225c:	19 1f       	adc	r17, r25
        addy = -1;   
   
    if (dx >= dy)   
    {   
        P = 2L*dy - dx;   
        for (i=0; i<=dx; ++i)   
    225e:	81 2c       	mov	r8, r1
    2260:	91 2c       	mov	r9, r1
        {   
            PutPixel(x, y);   
    2262:	b5 01       	movw	r22, r10
    2264:	c8 01       	movw	r24, r16
    2266:	8e 19       	sub	r24, r14
    2268:	9f 09       	sbc	r25, r15
    226a:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
            if(P < 0)   
    226e:	77 20       	and	r7, r7
    2270:	4c f4       	brge	.+18     	; 0x2284 <Line+0x120>
            {   
                P += 2*dy;   
    2272:	49 85       	ldd	r20, Y+9	; 0x09
    2274:	5a 85       	ldd	r21, Y+10	; 0x0a
    2276:	6b 85       	ldd	r22, Y+11	; 0x0b
    2278:	7c 85       	ldd	r23, Y+12	; 0x0c
    227a:	44 0e       	add	r4, r20
    227c:	55 1e       	adc	r5, r21
    227e:	66 1e       	adc	r6, r22
    2280:	77 1e       	adc	r7, r23
    2282:	0c c0       	rjmp	.+24     	; 0x229c <Line+0x138>
                x += addx;   
            }   
            else   
            {   
                P += 2*dy - 2*dx;   
    2284:	69 81       	ldd	r22, Y+1	; 0x01
    2286:	7a 81       	ldd	r23, Y+2	; 0x02
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	46 0e       	add	r4, r22
    228e:	57 1e       	adc	r5, r23
    2290:	68 1e       	adc	r6, r24
    2292:	79 1e       	adc	r7, r25
                x += addx;   
                y += addy;   
    2294:	8f 81       	ldd	r24, Y+7	; 0x07
    2296:	98 85       	ldd	r25, Y+8	; 0x08
    2298:	a8 0e       	add	r10, r24
    229a:	b9 1e       	adc	r11, r25
        addy = -1;   
   
    if (dx >= dy)   
    {   
        P = 2L*dy - dx;   
        for (i=0; i<=dx; ++i)   
    229c:	9f ef       	ldi	r25, 0xFF	; 255
    229e:	89 1a       	sub	r8, r25
    22a0:	99 0a       	sbc	r9, r25
    22a2:	0e 0d       	add	r16, r14
    22a4:	1f 1d       	adc	r17, r15
    22a6:	c8 14       	cp	r12, r8
    22a8:	d9 04       	cpc	r13, r9
    22aa:	dc f6       	brge	.-74     	; 0x2262 <Line+0xfe>
    22ac:	54 c0       	rjmp	.+168    	; 0x2356 <Line+0x1f2>
            }   
        }   
    }   
    else   
    {   
        P = 2L*dx - dy;   
    22ae:	46 01       	movw	r8, r12
    22b0:	aa 24       	eor	r10, r10
    22b2:	97 fc       	sbrc	r9, 7
    22b4:	a0 94       	com	r10
    22b6:	ba 2c       	mov	r11, r10
    22b8:	88 0c       	add	r8, r8
    22ba:	99 1c       	adc	r9, r9
    22bc:	aa 1c       	adc	r10, r10
    22be:	bb 1c       	adc	r11, r11
    22c0:	c1 01       	movw	r24, r2
    22c2:	aa 27       	eor	r26, r26
    22c4:	97 fd       	sbrc	r25, 7
    22c6:	a0 95       	com	r26
    22c8:	ba 2f       	mov	r27, r26
    22ca:	88 1a       	sub	r8, r24
    22cc:	99 0a       	sbc	r9, r25
    22ce:	aa 0a       	sbc	r10, r26
    22d0:	bb 0a       	sbc	r11, r27
        for(i=0; i<=dy; ++i)   
    22d2:	33 20       	and	r3, r3
    22d4:	0c f4       	brge	.+2      	; 0x22d8 <Line+0x174>
    22d6:	3f c0       	rjmp	.+126    	; 0x2356 <Line+0x1f2>
        {   
            PutPixel(x, y);   
            if(P < 0)   
            {   
                P += 2*dx;   
    22d8:	c6 01       	movw	r24, r12
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	9c 01       	movw	r18, r24
    22e0:	44 27       	eor	r20, r20
    22e2:	37 fd       	sbrc	r19, 7
    22e4:	40 95       	com	r20
    22e6:	54 2f       	mov	r21, r20
    22e8:	29 83       	std	Y+1, r18	; 0x01
    22ea:	3a 83       	std	Y+2, r19	; 0x02
    22ec:	4b 83       	std	Y+3, r20	; 0x03
    22ee:	5c 83       	std	Y+4, r21	; 0x04
                y += addy;   
            }   
            else   
            {   
                P += 2*dx - 2*dy;   
    22f0:	c2 18       	sub	r12, r2
    22f2:	d3 08       	sbc	r13, r3
    22f4:	26 01       	movw	r4, r12
    22f6:	44 0c       	add	r4, r4
    22f8:	55 1c       	adc	r5, r5
    22fa:	66 24       	eor	r6, r6
    22fc:	57 fc       	sbrc	r5, 7
    22fe:	60 94       	com	r6
    2300:	76 2c       	mov	r7, r6
    2302:	cf 80       	ldd	r12, Y+7	; 0x07
    2304:	d8 84       	ldd	r13, Y+8	; 0x08
    2306:	86 01       	movw	r16, r12
    2308:	06 0f       	add	r16, r22
    230a:	17 1f       	adc	r17, r23
        }   
    }   
    else   
    {   
        P = 2L*dx - dy;   
        for(i=0; i<=dy; ++i)   
    230c:	18 86       	std	Y+8, r1	; 0x08
    230e:	1f 82       	std	Y+7, r1	; 0x07
    2310:	b8 01       	movw	r22, r16
    2312:	6c 19       	sub	r22, r12
    2314:	7d 09       	sbc	r23, r13
        {   
            PutPixel(x, y);   
    2316:	c7 01       	movw	r24, r14
    2318:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
            if(P < 0)   
    231c:	bb 20       	and	r11, r11
    231e:	4c f4       	brge	.+18     	; 0x2332 <Line+0x1ce>
            {   
                P += 2*dx;   
    2320:	49 81       	ldd	r20, Y+1	; 0x01
    2322:	5a 81       	ldd	r21, Y+2	; 0x02
    2324:	6b 81       	ldd	r22, Y+3	; 0x03
    2326:	7c 81       	ldd	r23, Y+4	; 0x04
    2328:	84 0e       	add	r8, r20
    232a:	95 1e       	adc	r9, r21
    232c:	a6 1e       	adc	r10, r22
    232e:	b7 1e       	adc	r11, r23
    2330:	08 c0       	rjmp	.+16     	; 0x2342 <Line+0x1de>
                y += addy;   
            }   
            else   
            {   
                P += 2*dx - 2*dy;   
    2332:	84 0c       	add	r8, r4
    2334:	95 1c       	adc	r9, r5
    2336:	a6 1c       	adc	r10, r6
    2338:	b7 1c       	adc	r11, r7
                x += addx;   
    233a:	6d 81       	ldd	r22, Y+5	; 0x05
    233c:	7e 81       	ldd	r23, Y+6	; 0x06
    233e:	e6 0e       	add	r14, r22
    2340:	f7 1e       	adc	r15, r23
        }   
    }   
    else   
    {   
        P = 2L*dx - dy;   
        for(i=0; i<=dy; ++i)   
    2342:	8f 81       	ldd	r24, Y+7	; 0x07
    2344:	98 85       	ldd	r25, Y+8	; 0x08
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	98 87       	std	Y+8, r25	; 0x08
    234a:	8f 83       	std	Y+7, r24	; 0x07
    234c:	0c 0d       	add	r16, r12
    234e:	1d 1d       	adc	r17, r13
    2350:	28 16       	cp	r2, r24
    2352:	39 06       	cpc	r3, r25
    2354:	ec f6       	brge	.-70     	; 0x2310 <Line+0x1ac>
                x += addx;   
                y += addy;   
            }   
        }   
    }   
}   
    2356:	2c 96       	adiw	r28, 0x0c	; 12
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	ff 90       	pop	r15
    236c:	ef 90       	pop	r14
    236e:	df 90       	pop	r13
    2370:	cf 90       	pop	r12
    2372:	bf 90       	pop	r11
    2374:	af 90       	pop	r10
    2376:	9f 90       	pop	r9
    2378:	8f 90       	pop	r8
    237a:	7f 90       	pop	r7
    237c:	6f 90       	pop	r6
    237e:	5f 90       	pop	r5
    2380:	4f 90       	pop	r4
    2382:	3f 90       	pop	r3
    2384:	2f 90       	pop	r2
    2386:	08 95       	ret

00002388 <Rectangle>:
   
void Rectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)   
{   
    2388:	af 92       	push	r10
    238a:	bf 92       	push	r11
    238c:	cf 92       	push	r12
    238e:	df 92       	push	r13
    2390:	ef 92       	push	r14
    2392:	ff 92       	push	r15
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	5c 01       	movw	r10, r24
    239e:	7b 01       	movw	r14, r22
    23a0:	ea 01       	movw	r28, r20
    23a2:	69 01       	movw	r12, r18
    FillRectangle(x1, y1, x2, y1);    // top   
    23a4:	00 91 78 00 	lds	r16, 0x0078
    23a8:	10 91 79 00 	lds	r17, 0x0079
    23ac:	9b 01       	movw	r18, r22
    23ae:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
    FillRectangle(x1, y2, x2, y2);    // bottom   
    23b2:	00 91 78 00 	lds	r16, 0x0078
    23b6:	10 91 79 00 	lds	r17, 0x0079
    23ba:	96 01       	movw	r18, r12
    23bc:	ae 01       	movw	r20, r28
    23be:	b6 01       	movw	r22, r12
    23c0:	c5 01       	movw	r24, r10
    23c2:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
    FillRectangle(x1, y1, x1, y2);    // left   
    23c6:	00 91 78 00 	lds	r16, 0x0078
    23ca:	10 91 79 00 	lds	r17, 0x0079
    23ce:	96 01       	movw	r18, r12
    23d0:	a5 01       	movw	r20, r10
    23d2:	b7 01       	movw	r22, r14
    23d4:	c5 01       	movw	r24, r10
    23d6:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
    FillRectangle(x2, y1, x2, y2);    // right   
    23da:	00 91 78 00 	lds	r16, 0x0078
    23de:	10 91 79 00 	lds	r17, 0x0079
    23e2:	96 01       	movw	r18, r12
    23e4:	ae 01       	movw	r20, r28
    23e6:	b7 01       	movw	r22, r14
    23e8:	ce 01       	movw	r24, r28
    23ea:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
}   
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	ff 90       	pop	r15
    23f8:	ef 90       	pop	r14
    23fa:	df 90       	pop	r13
    23fc:	cf 90       	pop	r12
    23fe:	bf 90       	pop	r11
    2400:	af 90       	pop	r10
    2402:	08 95       	ret

00002404 <RoundRectangle>:
   
void RoundRectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int radius, unsigned char fill)   
{   
    2404:	2f 92       	push	r2
    2406:	3f 92       	push	r3
    2408:	4f 92       	push	r4
    240a:	5f 92       	push	r5
    240c:	6f 92       	push	r6
    240e:	7f 92       	push	r7
    2410:	8f 92       	push	r8
    2412:	9f 92       	push	r9
    2414:	af 92       	push	r10
    2416:	bf 92       	push	r11
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	2c 97       	sbiw	r28, 0x0c	; 12
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	98 87       	std	Y+8, r25	; 0x08
    243a:	8f 83       	std	Y+7, r24	; 0x07
    243c:	2b 01       	movw	r4, r22
    243e:	3a 01       	movw	r6, r20
    2440:	19 01       	movw	r2, r18
    2442:	1c 87       	std	Y+12, r17	; 0x0c
    2444:	0b 87       	std	Y+11, r16	; 0x0b
    signed int a, b, P;   
    signed int bx, ay;   
   
    if (fill)   
    2446:	ee 20       	and	r14, r14
    2448:	09 f4       	brne	.+2      	; 0x244c <RoundRectangle+0x48>
    244a:	c1 c0       	rjmp	.+386    	; 0x25ce <RoundRectangle+0x1ca>
    {   
        a = 0;       // increment by 1   
        b = radius;  // decrement by 1 using P   
    244c:	48 01       	movw	r8, r16
        P = 1 - radius;   
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	7c 01       	movw	r14, r24
    2454:	e0 1a       	sub	r14, r16
    2456:	f1 0a       	sbc	r15, r17
        bx = b;   
        ay = a;   
           
        FillRectangle(x1, y1-radius+1, x2, y2+radius-1);   
    2458:	00 91 78 00 	lds	r16, 0x0078
    245c:	10 91 79 00 	lds	r17, 0x0079
    2460:	21 50       	subi	r18, 0x01	; 1
    2462:	31 09       	sbc	r19, r1
    2464:	28 0d       	add	r18, r8
    2466:	39 1d       	adc	r19, r9
    2468:	6f 5f       	subi	r22, 0xFF	; 255
    246a:	7f 4f       	sbci	r23, 0xFF	; 255
    246c:	68 19       	sub	r22, r8
    246e:	79 09       	sbc	r23, r9
    2470:	8f 81       	ldd	r24, Y+7	; 0x07
    2472:	98 85       	ldd	r25, Y+8	; 0x08
    2474:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
    2478:	03 e0       	ldi	r16, 0x03	; 3
    247a:	10 e0       	ldi	r17, 0x00	; 0
    247c:	cc 24       	eor	r12, r12
    247e:	c3 94       	inc	r12
    2480:	d1 2c       	mov	r13, r1
    2482:	a1 2c       	mov	r10, r1
    2484:	b1 2c       	mov	r11, r1
    2486:	5c 82       	std	Y+4, r5	; 0x04
    2488:	4b 82       	std	Y+3, r4	; 0x03
    248a:	26 01       	movw	r4, r12
    248c:	7a 82       	std	Y+2, r7	; 0x02
    248e:	69 82       	std	Y+1, r6	; 0x01
    2490:	37 01       	movw	r6, r14
    2492:	3a 86       	std	Y+10, r3	; 0x0a
    2494:	29 86       	std	Y+9, r2	; 0x09
    2496:	18 01       	movw	r2, r16
    2498:	2d c0       	rjmp	.+90     	; 0x24f4 <RoundRectangle+0xf0>
        do   
        {   
            if (bx != b)   
            {   
                FillRectangle(x1-bx, y1-ay, x1-bx, y2+ay); // left in   
    249a:	8f 81       	ldd	r24, Y+7	; 0x07
    249c:	98 85       	ldd	r25, Y+8	; 0x08
    249e:	88 19       	sub	r24, r8
    24a0:	99 09       	sbc	r25, r9
    24a2:	00 91 78 00 	lds	r16, 0x0078
    24a6:	10 91 79 00 	lds	r17, 0x0079
    24aa:	c9 84       	ldd	r12, Y+9	; 0x09
    24ac:	da 84       	ldd	r13, Y+10	; 0x0a
    24ae:	ca 0c       	add	r12, r10
    24b0:	db 1c       	adc	r13, r11
    24b2:	96 01       	movw	r18, r12
    24b4:	ac 01       	movw	r20, r24
    24b6:	eb 80       	ldd	r14, Y+3	; 0x03
    24b8:	fc 80       	ldd	r15, Y+4	; 0x04
    24ba:	ea 18       	sub	r14, r10
    24bc:	fb 08       	sbc	r15, r11
    24be:	b7 01       	movw	r22, r14
    24c0:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
                FillRectangle(x2+bx, y1-ay, x2+bx, y2+ay); // right in   
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	9a 81       	ldd	r25, Y+2	; 0x02
    24c8:	88 0d       	add	r24, r8
    24ca:	99 1d       	adc	r25, r9
    24cc:	00 91 78 00 	lds	r16, 0x0078
    24d0:	10 91 79 00 	lds	r17, 0x0079
    24d4:	96 01       	movw	r18, r12
    24d6:	ac 01       	movw	r20, r24
    24d8:	b7 01       	movw	r22, r14
    24da:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
                FillRectangle(x2  , y1-b, x2+a, y2+b); // rigth out   
            }   
            if(P < 0)   
                P+= 3 + 2*a++;   
            else   
                P+= 5 + 2*(a++ - b--);   
    24de:	8d 80       	ldd	r8, Y+5	; 0x05
    24e0:	9e 80       	ldd	r9, Y+6	; 0x06
    24e2:	2f ef       	ldi	r18, 0xFF	; 255
    24e4:	a2 1a       	sub	r10, r18
    24e6:	b2 0a       	sbc	r11, r18
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	43 1a       	sub	r4, r19
    24ec:	53 0a       	sbc	r5, r19
    24ee:	42 e0       	ldi	r20, 0x02	; 2
    24f0:	24 0e       	add	r2, r20
    24f2:	31 1c       	adc	r3, r1
    24f4:	65 01       	movw	r12, r10
                FillRectangle(x1-bx, y1-ay, x1-bx, y2+ay); // left in   
                FillRectangle(x2+bx, y1-ay, x2+bx, y2+ay); // right in   
                bx = b;   
            }   
            ay = a;   
            if (a != b)   
    24f6:	a8 14       	cp	r10, r8
    24f8:	b9 04       	cpc	r11, r9
    24fa:	31 f1       	breq	.+76     	; 0x2548 <RoundRectangle+0x144>
            {    
                FillRectangle(x1-a, y1-b, x1, y2+b); // left out   
    24fc:	00 91 78 00 	lds	r16, 0x0078
    2500:	10 91 79 00 	lds	r17, 0x0079
    2504:	e9 84       	ldd	r14, Y+9	; 0x09
    2506:	fa 84       	ldd	r15, Y+10	; 0x0a
    2508:	e8 0c       	add	r14, r8
    250a:	f9 1c       	adc	r15, r9
    250c:	97 01       	movw	r18, r14
    250e:	4f 81       	ldd	r20, Y+7	; 0x07
    2510:	58 85       	ldd	r21, Y+8	; 0x08
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	88 19       	sub	r24, r8
    2518:	99 09       	sbc	r25, r9
    251a:	9e 83       	std	Y+6, r25	; 0x06
    251c:	8d 83       	std	Y+5, r24	; 0x05
    251e:	bc 01       	movw	r22, r24
    2520:	ca 01       	movw	r24, r20
    2522:	8a 19       	sub	r24, r10
    2524:	9b 09       	sbc	r25, r11
    2526:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
                FillRectangle(x2  , y1-b, x2+a, y2+b); // rigth out   
    252a:	00 91 78 00 	lds	r16, 0x0078
    252e:	10 91 79 00 	lds	r17, 0x0079
    2532:	97 01       	movw	r18, r14
    2534:	49 81       	ldd	r20, Y+1	; 0x01
    2536:	5a 81       	ldd	r21, Y+2	; 0x02
    2538:	4a 0d       	add	r20, r10
    253a:	5b 1d       	adc	r21, r11
    253c:	6d 81       	ldd	r22, Y+5	; 0x05
    253e:	7e 81       	ldd	r23, Y+6	; 0x06
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
            }   
            if(P < 0)   
    2548:	77 20       	and	r7, r7
    254a:	64 f4       	brge	.+24     	; 0x2564 <RoundRectangle+0x160>
                P+= 3 + 2*a++;   
    254c:	62 0c       	add	r6, r2
    254e:	73 1c       	adc	r7, r3
            else   
                P+= 5 + 2*(a++ - b--);   
        } while(a <= b);   
    2550:	84 14       	cp	r8, r4
    2552:	95 04       	cpc	r9, r5
    2554:	34 f6       	brge	.-116    	; 0x24e2 <RoundRectangle+0xde>
    2556:	4b 80       	ldd	r4, Y+3	; 0x03
    2558:	5c 80       	ldd	r5, Y+4	; 0x04
    255a:	69 80       	ldd	r6, Y+1	; 0x01
    255c:	7a 80       	ldd	r7, Y+2	; 0x02
    255e:	29 84       	ldd	r2, Y+9	; 0x09
    2560:	3a 84       	ldd	r3, Y+10	; 0x0a
    2562:	35 c0       	rjmp	.+106    	; 0x25ce <RoundRectangle+0x1ca>
                FillRectangle(x2  , y1-b, x2+a, y2+b); // rigth out   
            }   
            if(P < 0)   
                P+= 3 + 2*a++;   
            else   
                P+= 5 + 2*(a++ - b--);   
    2564:	f4 01       	movw	r30, r8
    2566:	31 97       	sbiw	r30, 0x01	; 1
    2568:	fe 83       	std	Y+6, r31	; 0x06
    256a:	ed 83       	std	Y+5, r30	; 0x05
    256c:	c6 01       	movw	r24, r12
    256e:	88 19       	sub	r24, r8
    2570:	99 09       	sbc	r25, r9
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	05 96       	adiw	r24, 0x05	; 5
    2578:	68 0e       	add	r6, r24
    257a:	79 1e       	adc	r7, r25
        } while(a <= b);   
    257c:	e4 15       	cp	r30, r4
    257e:	f5 05       	cpc	r31, r5
    2580:	0c f0       	brlt	.+2      	; 0x2584 <RoundRectangle+0x180>
    2582:	8b cf       	rjmp	.-234    	; 0x249a <RoundRectangle+0x96>
    2584:	4b 80       	ldd	r4, Y+3	; 0x03
    2586:	5c 80       	ldd	r5, Y+4	; 0x04
    2588:	69 80       	ldd	r6, Y+1	; 0x01
    258a:	7a 80       	ldd	r7, Y+2	; 0x02
    258c:	29 84       	ldd	r2, Y+9	; 0x09
    258e:	3a 84       	ldd	r3, Y+10	; 0x0a
   
        if (fill && (bx != b))   
        {   
            FillRectangle(x1-bx, y1-ay, x1-bx, y2+ay); // left in   
    2590:	56 01       	movw	r10, r12
    2592:	a2 0c       	add	r10, r2
    2594:	b3 1c       	adc	r11, r3
    2596:	72 01       	movw	r14, r4
    2598:	ec 18       	sub	r14, r12
    259a:	fd 08       	sbc	r15, r13
    259c:	8f 81       	ldd	r24, Y+7	; 0x07
    259e:	98 85       	ldd	r25, Y+8	; 0x08
    25a0:	88 19       	sub	r24, r8
    25a2:	99 09       	sbc	r25, r9
    25a4:	00 91 78 00 	lds	r16, 0x0078
    25a8:	10 91 79 00 	lds	r17, 0x0079
    25ac:	95 01       	movw	r18, r10
    25ae:	ac 01       	movw	r20, r24
    25b0:	b7 01       	movw	r22, r14
    25b2:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
            FillRectangle(x2+bx, y1-ay, x2+bx, y2+ay); // right in   
    25b6:	c4 01       	movw	r24, r8
    25b8:	86 0d       	add	r24, r6
    25ba:	97 1d       	adc	r25, r7
    25bc:	00 91 78 00 	lds	r16, 0x0078
    25c0:	10 91 79 00 	lds	r17, 0x0079
    25c4:	95 01       	movw	r18, r10
    25c6:	ac 01       	movw	r20, r24
    25c8:	b7 01       	movw	r22, r14
    25ca:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
    }   
   
    // draw broder   
    {   
        a = 0;       // increment by 1   
        b = radius;  // decrement by 1 using P   
    25ce:	8b 84       	ldd	r8, Y+11	; 0x0b
    25d0:	9c 84       	ldd	r9, Y+12	; 0x0c
        P = 1 - radius;   
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	5c 01       	movw	r10, r24
    25d8:	a8 18       	sub	r10, r8
    25da:	b9 08       	sbc	r11, r9
    25dc:	0f 2e       	mov	r0, r31
    25de:	f3 e0       	ldi	r31, 0x03	; 3
    25e0:	cf 2e       	mov	r12, r31
    25e2:	d1 2c       	mov	r13, r1
    25e4:	f0 2d       	mov	r31, r0
    25e6:	ee 24       	eor	r14, r14
    25e8:	e3 94       	inc	r14
    25ea:	f1 2c       	mov	r15, r1
    25ec:	00 e0       	ldi	r16, 0x00	; 0
    25ee:	10 e0       	ldi	r17, 0x00	; 0
    25f0:	9a 82       	std	Y+2, r9	; 0x02
    25f2:	89 82       	std	Y+1, r8	; 0x01
    25f4:	5a 86       	std	Y+10, r5	; 0x0a
    25f6:	49 86       	std	Y+9, r4	; 0x09
    25f8:	26 01       	movw	r4, r12
    25fa:	7e 82       	std	Y+6, r7	; 0x06
    25fc:	6d 82       	std	Y+5, r6	; 0x05
    25fe:	35 01       	movw	r6, r10
    2600:	30 c0       	rjmp	.+96     	; 0x2662 <RoundRectangle+0x25e>
        bx = b;   
        ay = a;   
   
        do   
        {   
            if (a && (a != b))   
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	31 f1       	breq	.+76     	; 0x2652 <RoundRectangle+0x24e>
    2606:	29 81       	ldd	r18, Y+1	; 0x01
    2608:	3a 81       	ldd	r19, Y+2	; 0x02
    260a:	82 17       	cp	r24, r18
    260c:	93 07       	cpc	r25, r19
    260e:	09 f1       	breq	.+66     	; 0x2652 <RoundRectangle+0x24e>
            {   
                PutPixel(x1-b, y1-a);   
    2610:	c9 84       	ldd	r12, Y+9	; 0x09
    2612:	da 84       	ldd	r13, Y+10	; 0x0a
    2614:	ce 18       	sub	r12, r14
    2616:	df 08       	sbc	r13, r15
    2618:	b6 01       	movw	r22, r12
    261a:	af 80       	ldd	r10, Y+7	; 0x07
    261c:	b8 84       	ldd	r11, Y+8	; 0x08
    261e:	a2 1a       	sub	r10, r18
    2620:	b3 0a       	sbc	r11, r19
    2622:	c5 01       	movw	r24, r10
    2624:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
    2628:	47 01       	movw	r8, r14
    262a:	82 0c       	add	r8, r2
    262c:	93 1c       	adc	r9, r3
                PutPixel(x1-b, y2+a);   
    262e:	b4 01       	movw	r22, r8
    2630:	c5 01       	movw	r24, r10
    2632:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
                PutPixel(x2+b, y1-a);   
    2636:	b6 01       	movw	r22, r12
    2638:	cd 80       	ldd	r12, Y+5	; 0x05
    263a:	de 80       	ldd	r13, Y+6	; 0x06
    263c:	49 81       	ldd	r20, Y+1	; 0x01
    263e:	5a 81       	ldd	r21, Y+2	; 0x02
    2640:	c4 0e       	add	r12, r20
    2642:	d5 1e       	adc	r13, r21
    2644:	c6 01       	movw	r24, r12
    2646:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
                PutPixel(x2+b, y2+a);   
    264a:	b4 01       	movw	r22, r8
    264c:	c6 01       	movw	r24, r12
    264e:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
    2652:	0f 5f       	subi	r16, 0xFF	; 255
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	5f ef       	ldi	r21, 0xFF	; 255
    2658:	e5 1a       	sub	r14, r21
    265a:	f5 0a       	sbc	r15, r21
    265c:	82 e0       	ldi	r24, 0x02	; 2
    265e:	48 0e       	add	r4, r24
    2660:	51 1c       	adc	r5, r1
            }   
            PutPixel(x1-a, y1-b);   
    2662:	c9 84       	ldd	r12, Y+9	; 0x09
    2664:	da 84       	ldd	r13, Y+10	; 0x0a
    2666:	e9 81       	ldd	r30, Y+1	; 0x01
    2668:	fa 81       	ldd	r31, Y+2	; 0x02
    266a:	ce 1a       	sub	r12, r30
    266c:	df 0a       	sbc	r13, r31
    266e:	b6 01       	movw	r22, r12
    2670:	8f 80       	ldd	r8, Y+7	; 0x07
    2672:	98 84       	ldd	r9, Y+8	; 0x08
    2674:	80 1a       	sub	r8, r16
    2676:	91 0a       	sbc	r9, r17
    2678:	c4 01       	movw	r24, r8
    267a:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
            PutPixel(x2+a, y1-b);   
    267e:	b6 01       	movw	r22, r12
    2680:	cd 80       	ldd	r12, Y+5	; 0x05
    2682:	de 80       	ldd	r13, Y+6	; 0x06
    2684:	c0 0e       	add	r12, r16
    2686:	d1 1e       	adc	r13, r17
    2688:	c6 01       	movw	r24, r12
    268a:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
            PutPixel(x1-a, y2+b);   
    268e:	a9 80       	ldd	r10, Y+1	; 0x01
    2690:	ba 80       	ldd	r11, Y+2	; 0x02
    2692:	a2 0c       	add	r10, r2
    2694:	b3 1c       	adc	r11, r3
    2696:	b5 01       	movw	r22, r10
    2698:	c4 01       	movw	r24, r8
    269a:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
            PutPixel(x2+a, y2+b);   
    269e:	b5 01       	movw	r22, r10
    26a0:	c6 01       	movw	r24, r12
    26a2:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
   
            if(P < 0)   
    26a6:	77 20       	and	r7, r7
    26a8:	24 f4       	brge	.+8      	; 0x26b2 <RoundRectangle+0x2ae>
                P+= 3 + 2*a++;   
    26aa:	c7 01       	movw	r24, r14
    26ac:	64 0c       	add	r6, r4
    26ae:	75 1c       	adc	r7, r5
    26b0:	10 c0       	rjmp	.+32     	; 0x26d2 <RoundRectangle+0x2ce>
            else   
                P+= 5 + 2*(a++ - b--);   
    26b2:	c7 01       	movw	r24, r14
    26b4:	98 01       	movw	r18, r16
    26b6:	49 81       	ldd	r20, Y+1	; 0x01
    26b8:	5a 81       	ldd	r21, Y+2	; 0x02
    26ba:	24 1b       	sub	r18, r20
    26bc:	35 0b       	sbc	r19, r21
    26be:	22 0f       	add	r18, r18
    26c0:	33 1f       	adc	r19, r19
    26c2:	2b 5f       	subi	r18, 0xFB	; 251
    26c4:	3f 4f       	sbci	r19, 0xFF	; 255
    26c6:	62 0e       	add	r6, r18
    26c8:	73 1e       	adc	r7, r19
    26ca:	41 50       	subi	r20, 0x01	; 1
    26cc:	51 09       	sbc	r21, r1
    26ce:	5a 83       	std	Y+2, r21	; 0x02
    26d0:	49 83       	std	Y+1, r20	; 0x01
        } while(a <= b);   
    26d2:	e9 81       	ldd	r30, Y+1	; 0x01
    26d4:	fa 81       	ldd	r31, Y+2	; 0x02
    26d6:	e8 17       	cp	r30, r24
    26d8:	f9 07       	cpc	r31, r25
    26da:	0c f0       	brlt	.+2      	; 0x26de <RoundRectangle+0x2da>
    26dc:	92 cf       	rjmp	.-220    	; 0x2602 <RoundRectangle+0x1fe>
    26de:	49 84       	ldd	r4, Y+9	; 0x09
    26e0:	5a 84       	ldd	r5, Y+10	; 0x0a
    26e2:	6d 80       	ldd	r6, Y+5	; 0x05
    26e4:	7e 80       	ldd	r7, Y+6	; 0x06
   
        FillRectangle(x1       , y1-radius, x2       , y1-radius);  // top   
    26e6:	b2 01       	movw	r22, r4
    26e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    26ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    26ec:	62 1b       	sub	r22, r18
    26ee:	73 0b       	sbc	r23, r19
    26f0:	00 91 78 00 	lds	r16, 0x0078
    26f4:	10 91 79 00 	lds	r17, 0x0079
    26f8:	9b 01       	movw	r18, r22
    26fa:	a3 01       	movw	r20, r6
    26fc:	8f 81       	ldd	r24, Y+7	; 0x07
    26fe:	98 85       	ldd	r25, Y+8	; 0x08
    2700:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
        FillRectangle(x1       , y2+radius, x2       , y2+radius);  // bottom   
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	62 0d       	add	r22, r2
    270a:	73 1d       	adc	r23, r3
    270c:	00 91 78 00 	lds	r16, 0x0078
    2710:	10 91 79 00 	lds	r17, 0x0079
    2714:	9b 01       	movw	r18, r22
    2716:	a3 01       	movw	r20, r6
    2718:	8f 81       	ldd	r24, Y+7	; 0x07
    271a:	98 85       	ldd	r25, Y+8	; 0x08
    271c:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
        FillRectangle(x1-radius, y1       , x1-radius, y2       );  // left   
    2720:	8f 81       	ldd	r24, Y+7	; 0x07
    2722:	98 85       	ldd	r25, Y+8	; 0x08
    2724:	4b 85       	ldd	r20, Y+11	; 0x0b
    2726:	5c 85       	ldd	r21, Y+12	; 0x0c
    2728:	84 1b       	sub	r24, r20
    272a:	95 0b       	sbc	r25, r21
    272c:	00 91 78 00 	lds	r16, 0x0078
    2730:	10 91 79 00 	lds	r17, 0x0079
    2734:	91 01       	movw	r18, r2
    2736:	ac 01       	movw	r20, r24
    2738:	b2 01       	movw	r22, r4
    273a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
        FillRectangle(x2+radius, y1       , x2+radius, y2       );  // right   
    273e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2740:	9c 85       	ldd	r25, Y+12	; 0x0c
    2742:	86 0d       	add	r24, r6
    2744:	97 1d       	adc	r25, r7
    2746:	00 91 78 00 	lds	r16, 0x0078
    274a:	10 91 79 00 	lds	r17, 0x0079
    274e:	91 01       	movw	r18, r2
    2750:	ac 01       	movw	r20, r24
    2752:	b2 01       	movw	r22, r4
    2754:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
    }   
}   
    2758:	2c 96       	adiw	r28, 0x0c	; 12
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	ef 90       	pop	r14
    2770:	df 90       	pop	r13
    2772:	cf 90       	pop	r12
    2774:	bf 90       	pop	r11
    2776:	af 90       	pop	r10
    2778:	9f 90       	pop	r9
    277a:	8f 90       	pop	r8
    277c:	7f 90       	pop	r7
    277e:	6f 90       	pop	r6
    2780:	5f 90       	pop	r5
    2782:	4f 90       	pop	r4
    2784:	3f 90       	pop	r3
    2786:	2f 90       	pop	r2
    2788:	08 95       	ret

0000278a <Circle>:

void Circle(unsigned int x, unsigned int y, unsigned int radius, unsigned char fill)   
{   
    278a:	2f 92       	push	r2
    278c:	3f 92       	push	r3
    278e:	4f 92       	push	r4
    2790:	5f 92       	push	r5
    2792:	6f 92       	push	r6
    2794:	7f 92       	push	r7
    2796:	8f 92       	push	r8
    2798:	9f 92       	push	r9
    279a:	af 92       	push	r10
    279c:	bf 92       	push	r11
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	2d 97       	sbiw	r28, 0x0d	; 13
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	3c 01       	movw	r6, r24
    27c0:	2b 87       	std	Y+11, r18	; 0x0b
   signed int a, b, P;   
   a = 0;   
   b = radius;   
   P = 1 - radius;   
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	6c 01       	movw	r12, r24
    27c8:	c4 1a       	sub	r12, r20
    27ca:	d5 0a       	sbc	r13, r21
    27cc:	1b 01       	movw	r2, r22
    27ce:	5b 01       	movw	r10, r22
    27d0:	43 01       	movw	r8, r6
    27d2:	23 e0       	ldi	r18, 0x03	; 3
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	3c 83       	std	Y+4, r19	; 0x04
    27d8:	2b 83       	std	Y+3, r18	; 0x03
    27da:	44 24       	eor	r4, r4
    27dc:	43 94       	inc	r4
    27de:	51 2c       	mov	r5, r1
    27e0:	5d 87       	std	Y+13, r21	; 0x0d
    27e2:	4c 87       	std	Y+12, r20	; 0x0c
    27e4:	7e 82       	std	Y+6, r7	; 0x06
    27e6:	6d 82       	std	Y+5, r6	; 0x05
    27e8:	78 87       	std	Y+8, r23	; 0x08
    27ea:	6f 83       	std	Y+7, r22	; 0x07
    27ec:	a2 01       	movw	r20, r4
    27ee:	41 50       	subi	r20, 0x01	; 1
    27f0:	51 09       	sbc	r21, r1
    27f2:	5a 87       	std	Y+10, r21	; 0x0a
    27f4:	49 87       	std	Y+9, r20	; 0x09
   
   do   
   {   
      if(fill)   
    27f6:	5b 85       	ldd	r21, Y+11	; 0x0b
    27f8:	55 23       	and	r21, r21
    27fa:	09 f4       	brne	.+2      	; 0x27fe <Circle+0x74>
    27fc:	3f c0       	rjmp	.+126    	; 0x287c <Circle+0xf2>
      {   
         FillRectangle(x-a, y+b, x+a, y+b);   
    27fe:	00 91 78 00 	lds	r16, 0x0078
    2802:	10 91 79 00 	lds	r17, 0x0079
    2806:	6f 81       	ldd	r22, Y+7	; 0x07
    2808:	78 85       	ldd	r23, Y+8	; 0x08
    280a:	8c 85       	ldd	r24, Y+12	; 0x0c
    280c:	9d 85       	ldd	r25, Y+13	; 0x0d
    280e:	68 0f       	add	r22, r24
    2810:	79 1f       	adc	r23, r25
    2812:	9b 01       	movw	r18, r22
    2814:	a4 01       	movw	r20, r8
    2816:	c3 01       	movw	r24, r6
    2818:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
         FillRectangle(x-a, y-b, x+a, y-b);   
    281c:	00 91 78 00 	lds	r16, 0x0078
    2820:	10 91 79 00 	lds	r17, 0x0079
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	ec 85       	ldd	r30, Y+12	; 0x0c
    282a:	fd 85       	ldd	r31, Y+13	; 0x0d
    282c:	6e 1b       	sub	r22, r30
    282e:	7f 0b       	sbc	r23, r31
    2830:	9b 01       	movw	r18, r22
    2832:	a4 01       	movw	r20, r8
    2834:	c3 01       	movw	r24, r6
    2836:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
         FillRectangle(x-b, y+a, x+b, y+a);   
    283a:	00 91 78 00 	lds	r16, 0x0078
    283e:	10 91 79 00 	lds	r17, 0x0079
    2842:	95 01       	movw	r18, r10
    2844:	4d 81       	ldd	r20, Y+5	; 0x05
    2846:	5e 81       	ldd	r21, Y+6	; 0x06
    2848:	8c 85       	ldd	r24, Y+12	; 0x0c
    284a:	9d 85       	ldd	r25, Y+13	; 0x0d
    284c:	48 0f       	add	r20, r24
    284e:	59 1f       	adc	r21, r25
    2850:	5a 83       	std	Y+2, r21	; 0x02
    2852:	49 83       	std	Y+1, r20	; 0x01
    2854:	b5 01       	movw	r22, r10
    2856:	ed 80       	ldd	r14, Y+5	; 0x05
    2858:	fe 80       	ldd	r15, Y+6	; 0x06
    285a:	e8 1a       	sub	r14, r24
    285c:	f9 0a       	sbc	r15, r25
    285e:	c7 01       	movw	r24, r14
    2860:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
         FillRectangle(x-b, y-a, x+b, y-a);   
    2864:	00 91 78 00 	lds	r16, 0x0078
    2868:	10 91 79 00 	lds	r17, 0x0079
    286c:	91 01       	movw	r18, r2
    286e:	49 81       	ldd	r20, Y+1	; 0x01
    2870:	5a 81       	ldd	r21, Y+2	; 0x02
    2872:	b1 01       	movw	r22, r2
    2874:	c7 01       	movw	r24, r14
    2876:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
    287a:	38 c0       	rjmp	.+112    	; 0x28ec <Circle+0x162>
      }   
      else   
      {   
         PutPixel(a+x, b+y);   
    287c:	0f 81       	ldd	r16, Y+7	; 0x07
    287e:	18 85       	ldd	r17, Y+8	; 0x08
    2880:	ec 85       	ldd	r30, Y+12	; 0x0c
    2882:	fd 85       	ldd	r31, Y+13	; 0x0d
    2884:	0e 0f       	add	r16, r30
    2886:	1f 1f       	adc	r17, r31
    2888:	b8 01       	movw	r22, r16
    288a:	c4 01       	movw	r24, r8
    288c:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
         PutPixel(b+x, a+y);   
    2890:	b5 01       	movw	r22, r10
    2892:	ed 80       	ldd	r14, Y+5	; 0x05
    2894:	fe 80       	ldd	r15, Y+6	; 0x06
    2896:	2c 85       	ldd	r18, Y+12	; 0x0c
    2898:	3d 85       	ldd	r19, Y+13	; 0x0d
    289a:	e2 0e       	add	r14, r18
    289c:	f3 1e       	adc	r15, r19
    289e:	c7 01       	movw	r24, r14
    28a0:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
         PutPixel(x-a, b+y);   
    28a4:	b8 01       	movw	r22, r16
    28a6:	c3 01       	movw	r24, r6
    28a8:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
         PutPixel(x-b, a+y);   
    28ac:	b5 01       	movw	r22, r10
    28ae:	0d 81       	ldd	r16, Y+5	; 0x05
    28b0:	1e 81       	ldd	r17, Y+6	; 0x06
    28b2:	4c 85       	ldd	r20, Y+12	; 0x0c
    28b4:	5d 85       	ldd	r21, Y+13	; 0x0d
    28b6:	04 1b       	sub	r16, r20
    28b8:	15 0b       	sbc	r17, r21
    28ba:	c8 01       	movw	r24, r16
    28bc:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
         PutPixel(b+x, y-a);   
    28c0:	b1 01       	movw	r22, r2
    28c2:	c7 01       	movw	r24, r14
    28c4:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
         PutPixel(a+x, y-b);   
    28c8:	ef 80       	ldd	r14, Y+7	; 0x07
    28ca:	f8 84       	ldd	r15, Y+8	; 0x08
    28cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    28ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    28d0:	e8 1a       	sub	r14, r24
    28d2:	f9 0a       	sbc	r15, r25
    28d4:	b7 01       	movw	r22, r14
    28d6:	c4 01       	movw	r24, r8
    28d8:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
         PutPixel(x-a, y-b);   
    28dc:	b7 01       	movw	r22, r14
    28de:	c3 01       	movw	r24, r6
    28e0:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
         PutPixel(x-b, y-a);   
    28e4:	b1 01       	movw	r22, r2
    28e6:	c8 01       	movw	r24, r16
    28e8:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_PutPixel>
      }   
   
      if(P < 0)   
    28ec:	dd 20       	and	r13, r13
    28ee:	34 f4       	brge	.+12     	; 0x28fc <Circle+0x172>
         P+= 3 + 2*a++;   
    28f0:	c2 01       	movw	r24, r4
    28f2:	eb 81       	ldd	r30, Y+3	; 0x03
    28f4:	fc 81       	ldd	r31, Y+4	; 0x04
    28f6:	ce 0e       	add	r12, r30
    28f8:	df 1e       	adc	r13, r31
    28fa:	11 c0       	rjmp	.+34     	; 0x291e <Circle+0x194>
      else   
         P+= 5 + 2*(a++ - b--);   
    28fc:	c2 01       	movw	r24, r4
    28fe:	29 85       	ldd	r18, Y+9	; 0x09
    2900:	3a 85       	ldd	r19, Y+10	; 0x0a
    2902:	4c 85       	ldd	r20, Y+12	; 0x0c
    2904:	5d 85       	ldd	r21, Y+13	; 0x0d
    2906:	24 1b       	sub	r18, r20
    2908:	35 0b       	sbc	r19, r21
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	2b 5f       	subi	r18, 0xFB	; 251
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	c2 0e       	add	r12, r18
    2914:	d3 1e       	adc	r13, r19
    2916:	41 50       	subi	r20, 0x01	; 1
    2918:	51 09       	sbc	r21, r1
    291a:	5d 87       	std	Y+13, r21	; 0x0d
    291c:	4c 87       	std	Y+12, r20	; 0x0c
    291e:	5f ef       	ldi	r21, 0xFF	; 255
    2920:	45 1a       	sub	r4, r21
    2922:	55 0a       	sbc	r5, r21
    2924:	eb 81       	ldd	r30, Y+3	; 0x03
    2926:	fc 81       	ldd	r31, Y+4	; 0x04
    2928:	32 96       	adiw	r30, 0x02	; 2
    292a:	fc 83       	std	Y+4, r31	; 0x04
    292c:	eb 83       	std	Y+3, r30	; 0x03
    292e:	f1 e0       	ldi	r31, 0x01	; 1
    2930:	6f 1a       	sub	r6, r31
    2932:	71 08       	sbc	r7, r1
    2934:	2f ef       	ldi	r18, 0xFF	; 255
    2936:	82 1a       	sub	r8, r18
    2938:	92 0a       	sbc	r9, r18
    293a:	3f ef       	ldi	r19, 0xFF	; 255
    293c:	a3 1a       	sub	r10, r19
    293e:	b3 0a       	sbc	r11, r19
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	24 1a       	sub	r2, r20
    2944:	31 08       	sbc	r3, r1
    } while(a <= b);   
    2946:	ec 85       	ldd	r30, Y+12	; 0x0c
    2948:	fd 85       	ldd	r31, Y+13	; 0x0d
    294a:	e8 17       	cp	r30, r24
    294c:	f9 07       	cpc	r31, r25
    294e:	0c f0       	brlt	.+2      	; 0x2952 <Circle+0x1c8>
    2950:	4d cf       	rjmp	.-358    	; 0x27ec <Circle+0x62>
}
    2952:	2d 96       	adiw	r28, 0x0d	; 13
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	df 91       	pop	r29
    2960:	cf 91       	pop	r28
    2962:	1f 91       	pop	r17
    2964:	0f 91       	pop	r16
    2966:	ff 90       	pop	r15
    2968:	ef 90       	pop	r14
    296a:	df 90       	pop	r13
    296c:	cf 90       	pop	r12
    296e:	bf 90       	pop	r11
    2970:	af 90       	pop	r10
    2972:	9f 90       	pop	r9
    2974:	8f 90       	pop	r8
    2976:	7f 90       	pop	r7
    2978:	6f 90       	pop	r6
    297a:	5f 90       	pop	r5
    297c:	4f 90       	pop	r4
    297e:	3f 90       	pop	r3
    2980:	2f 90       	pop	r2
    2982:	08 95       	ret

00002984 <serialAvailable>:
uint8_t volatile rxBufferElements[UART_COUNT];
#endif

uint8_t serialAvailable(void) {
    return UART_COUNT;
}
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	08 95       	ret

00002988 <serialInit>:

void serialInit(uint8_t uart, uint16_t baud) {
    if (uart >= UART_COUNT)
    2988:	81 11       	cpse	r24, r1
    298a:	5e c0       	rjmp	.+188    	; 0x2a48 <serialInit+0xc0>
        return;

    // Initialize state variables
    rxRead[uart] = 0;
    298c:	10 92 29 02 	sts	0x0229, r1
    2990:	10 92 28 02 	sts	0x0228, r1
    rxWrite[uart] = 0;
    2994:	10 92 20 02 	sts	0x0220, r1
    2998:	10 92 1f 02 	sts	0x021F, r1
    txRead[uart] = 0;
    299c:	10 92 23 02 	sts	0x0223, r1
    29a0:	10 92 22 02 	sts	0x0222, r1
    txWrite[uart] = 0;
    29a4:	10 92 25 02 	sts	0x0225, r1
    29a8:	10 92 24 02 	sts	0x0224, r1
    shouldStartTransmission[uart] = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	80 93 27 02 	sts	0x0227, r24
#ifdef FLOWCONTROL
    sendThisNext[uart] = 0;
    29b2:	10 92 26 02 	sts	0x0226, r1
    flow[uart] = 1;
    29b6:	80 93 21 02 	sts	0x0221, r24
    rxBufferElements[uart] = 0;
    29ba:	10 92 5a 02 	sts	0x025A, r1
#endif

    // Default Configuration: 8N1
    *serialRegisters[uart][SERIALC] = (1 << serialBits[uart][SERIALUCSZ0]) | (1 << serialBits[uart][SERIALUCSZ1]);
    29be:	e0 91 70 00 	lds	r30, 0x0070
    29c2:	f0 91 71 00 	lds	r31, 0x0071
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	ac 01       	movw	r20, r24
    29cc:	00 90 66 00 	lds	r0, 0x0066
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <serialInit+0x4e>
    29d2:	44 0f       	add	r20, r20
    29d4:	55 1f       	adc	r21, r21
    29d6:	0a 94       	dec	r0
    29d8:	e2 f7       	brpl	.-8      	; 0x29d2 <serialInit+0x4a>
    29da:	9c 01       	movw	r18, r24
    29dc:	00 90 65 00 	lds	r0, 0x0065
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <serialInit+0x5e>
    29e2:	22 0f       	add	r18, r18
    29e4:	33 1f       	adc	r19, r19
    29e6:	0a 94       	dec	r0
    29e8:	e2 f7       	brpl	.-8      	; 0x29e2 <serialInit+0x5a>
    29ea:	24 2b       	or	r18, r20
    29ec:	20 83       	st	Z, r18

    // Set baudrate
#if SERIALBAUDBIT == 8
    *serialRegisters[uart][SERIALUBRRH] = (baud >> 8);
    29ee:	e0 91 74 00 	lds	r30, 0x0074
    29f2:	f0 91 75 00 	lds	r31, 0x0075
    29f6:	70 83       	st	Z, r23
    *serialRegisters[uart][SERIALUBRRL] = baud;
    29f8:	e0 91 76 00 	lds	r30, 0x0076
    29fc:	f0 91 77 00 	lds	r31, 0x0077
    2a00:	60 83       	st	Z, r22
#else
    *serialBaudRegisters[uart] = baud;
#endif

    *serialRegisters[uart][SERIALB] = (1 << serialBits[uart][SERIALRXCIE]); // Enable Interrupts
    2a02:	ee e6       	ldi	r30, 0x6E	; 110
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	a0 81       	ld	r26, Z
    2a08:	b1 81       	ldd	r27, Z+1	; 0x01
    2a0a:	9c 01       	movw	r18, r24
    2a0c:	00 90 67 00 	lds	r0, 0x0067
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <serialInit+0x8e>
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	0a 94       	dec	r0
    2a18:	e2 f7       	brpl	.-8      	; 0x2a12 <serialInit+0x8a>
    2a1a:	2c 93       	st	X, r18
    *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALRXEN]) | (1 << serialBits[uart][SERIALTXEN]); // Enable Receiver/Transmitter
    2a1c:	01 90       	ld	r0, Z+
    2a1e:	f0 81       	ld	r31, Z
    2a20:	e0 2d       	mov	r30, r0
    2a22:	40 81       	ld	r20, Z
    2a24:	9c 01       	movw	r18, r24
    2a26:	00 90 68 00 	lds	r0, 0x0068
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <serialInit+0xa8>
    2a2c:	22 0f       	add	r18, r18
    2a2e:	33 1f       	adc	r19, r19
    2a30:	0a 94       	dec	r0
    2a32:	e2 f7       	brpl	.-8      	; 0x2a2c <serialInit+0xa4>
    2a34:	00 90 69 00 	lds	r0, 0x0069
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <serialInit+0xb6>
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	0a 94       	dec	r0
    2a40:	e2 f7       	brpl	.-8      	; 0x2a3a <serialInit+0xb2>
    2a42:	82 2b       	or	r24, r18
    2a44:	84 2b       	or	r24, r20
    2a46:	80 83       	st	Z, r24
    2a48:	08 95       	ret

00002a4a <serialHasChar>:
// ---------------------
// |     Reception     |
// ---------------------

uint8_t serialHasChar(uint8_t uart) {
    if (uart >= UART_COUNT)
    2a4a:	81 11       	cpse	r24, r1
    2a4c:	0e c0       	rjmp	.+28     	; 0x2a6a <serialHasChar+0x20>
        return 0;

    if (rxRead[uart] != rxWrite[uart]) { // True if char available
    2a4e:	40 91 28 02 	lds	r20, 0x0228
    2a52:	50 91 29 02 	lds	r21, 0x0229
    2a56:	20 91 1f 02 	lds	r18, 0x021F
    2a5a:	30 91 20 02 	lds	r19, 0x0220
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	42 17       	cp	r20, r18
    2a62:	53 07       	cpc	r21, r19
    2a64:	19 f4       	brne	.+6      	; 0x2a6c <serialHasChar+0x22>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	08 95       	ret
// |     Reception     |
// ---------------------

uint8_t serialHasChar(uint8_t uart) {
    if (uart >= UART_COUNT)
        return 0;
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    if (rxRead[uart] != rxWrite[uart]) { // True if char available
        return 1;
    } else {
        return 0;
    }
}
    2a6c:	08 95       	ret

00002a6e <serialGet>:
    while(!serialHasChar(uart));
    return serialGet(uart);
}

uint8_t serialGet(uint8_t uart) {
    if (uart >= UART_COUNT)
    2a6e:	81 11       	cpse	r24, r1
    2a70:	6c c0       	rjmp	.+216    	; 0x2b4a <serialGet+0xdc>
        return 0;

    uint8_t c;

#ifdef FLOWCONTROL
    rxBufferElements[uart]--;
    2a72:	80 91 5a 02 	lds	r24, 0x025A
    2a76:	81 50       	subi	r24, 0x01	; 1
    2a78:	80 93 5a 02 	sts	0x025A, r24
    if ((flow[uart] == 0) && (rxBufferElements[uart] <= FLOWMARK)) {
    2a7c:	80 91 21 02 	lds	r24, 0x0221
    2a80:	81 11       	cpse	r24, r1
    2a82:	33 c0       	rjmp	.+102    	; 0x2aea <serialGet+0x7c>
    2a84:	80 91 5a 02 	lds	r24, 0x025A
    2a88:	86 30       	cpi	r24, 0x06	; 6
    2a8a:	78 f5       	brcc	.+94     	; 0x2aea <serialGet+0x7c>
        while (sendThisNext[uart] != 0);
    2a8c:	80 91 26 02 	lds	r24, 0x0226
    2a90:	81 11       	cpse	r24, r1
    2a92:	fc cf       	rjmp	.-8      	; 0x2a8c <serialGet+0x1e>
        sendThisNext[uart] = XON;
    2a94:	81 e1       	ldi	r24, 0x11	; 17
    2a96:	80 93 26 02 	sts	0x0226, r24
        flow[uart] = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	80 93 21 02 	sts	0x0221, r24
        if (shouldStartTransmission[uart]) {
    2aa0:	80 91 27 02 	lds	r24, 0x0227
    2aa4:	88 23       	and	r24, r24
    2aa6:	09 f1       	breq	.+66     	; 0x2aea <serialGet+0x7c>
            shouldStartTransmission[uart] = 0;
    2aa8:	10 92 27 02 	sts	0x0227, r1
            *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALUDRIE]); // Enable Interrupt
    2aac:	e0 91 6e 00 	lds	r30, 0x006E
    2ab0:	f0 91 6f 00 	lds	r31, 0x006F
    2ab4:	40 81       	ld	r20, Z
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9c 01       	movw	r18, r24
    2abc:	00 90 6a 00 	lds	r0, 0x006A
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <serialGet+0x58>
    2ac2:	22 0f       	add	r18, r18
    2ac4:	33 1f       	adc	r19, r19
    2ac6:	0a 94       	dec	r0
    2ac8:	e2 f7       	brpl	.-8      	; 0x2ac2 <serialGet+0x54>
    2aca:	24 2b       	or	r18, r20
    2acc:	20 83       	st	Z, r18
            *serialRegisters[uart][SERIALA] |= (1 << serialBits[uart][SERIALUDRE]); // Trigger Interrupt
    2ace:	e0 91 72 00 	lds	r30, 0x0072
    2ad2:	f0 91 73 00 	lds	r31, 0x0073
    2ad6:	20 81       	ld	r18, Z
    2ad8:	00 90 6b 00 	lds	r0, 0x006B
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <serialGet+0x74>
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	0a 94       	dec	r0
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <serialGet+0x70>
    2ae6:	82 2b       	or	r24, r18
    2ae8:	80 83       	st	Z, r24
        }
    }
#endif

    if (rxRead[uart] != rxWrite[uart]) {
    2aea:	20 91 28 02 	lds	r18, 0x0228
    2aee:	30 91 29 02 	lds	r19, 0x0229
    2af2:	80 91 1f 02 	lds	r24, 0x021F
    2af6:	90 91 20 02 	lds	r25, 0x0220
    2afa:	28 17       	cp	r18, r24
    2afc:	39 07       	cpc	r19, r25
    2afe:	39 f1       	breq	.+78     	; 0x2b4e <serialGet+0xe0>
        c = rxBuffer[uart][rxRead[uart]];
    2b00:	e0 91 28 02 	lds	r30, 0x0228
    2b04:	f0 91 29 02 	lds	r31, 0x0229
    2b08:	e6 5d       	subi	r30, 0xD6	; 214
    2b0a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b0c:	80 81       	ld	r24, Z
        rxBuffer[uart][rxRead[uart]] = 0;
    2b0e:	e0 91 28 02 	lds	r30, 0x0228
    2b12:	f0 91 29 02 	lds	r31, 0x0229
    2b16:	e6 5d       	subi	r30, 0xD6	; 214
    2b18:	fd 4f       	sbci	r31, 0xFD	; 253
    2b1a:	10 82       	st	Z, r1
        if (rxRead[uart] < (RX_BUFFER_SIZE - 1)) {
    2b1c:	20 91 28 02 	lds	r18, 0x0228
    2b20:	30 91 29 02 	lds	r19, 0x0229
    2b24:	2f 31       	cpi	r18, 0x1F	; 31
    2b26:	31 05       	cpc	r19, r1
    2b28:	58 f4       	brcc	.+22     	; 0x2b40 <serialGet+0xd2>
            rxRead[uart]++;
    2b2a:	20 91 28 02 	lds	r18, 0x0228
    2b2e:	30 91 29 02 	lds	r19, 0x0229
    2b32:	2f 5f       	subi	r18, 0xFF	; 255
    2b34:	3f 4f       	sbci	r19, 0xFF	; 255
    2b36:	30 93 29 02 	sts	0x0229, r19
    2b3a:	20 93 28 02 	sts	0x0228, r18
    2b3e:	08 95       	ret
        } else {
            rxRead[uart] = 0;
    2b40:	10 92 29 02 	sts	0x0229, r1
    2b44:	10 92 28 02 	sts	0x0228, r1
    2b48:	08 95       	ret
    return serialGet(uart);
}

uint8_t serialGet(uint8_t uart) {
    if (uart >= UART_COUNT)
        return 0;
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	08 95       	ret
        } else {
            rxRead[uart] = 0;
        }
        return c;
    } else {
        return 0;
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    2b50:	08 95       	ret

00002b52 <serialReceiveInterrupt>:
    } else {
        return 1;
    }
}

void serialReceiveInterrupt(uint8_t uart) {
    2b52:	cf 93       	push	r28
    2b54:	df 93       	push	r29
    rxBuffer[uart][rxWrite[uart]] = *serialRegisters[uart][SERIALDATA];
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	9c 01       	movw	r18, r24
    2b5a:	22 0f       	add	r18, r18
    2b5c:	33 1f       	adc	r19, r19
    2b5e:	f9 01       	movw	r30, r18
    2b60:	e1 5e       	subi	r30, 0xE1	; 225
    2b62:	fd 4f       	sbci	r31, 0xFD	; 253
    2b64:	40 81       	ld	r20, Z
    2b66:	51 81       	ldd	r21, Z+1	; 0x01
    2b68:	28 0f       	add	r18, r24
    2b6a:	39 1f       	adc	r19, r25
    2b6c:	d9 01       	movw	r26, r18
    2b6e:	aa 0f       	add	r26, r26
    2b70:	bb 1f       	adc	r27, r27
    2b72:	aa 0f       	add	r26, r26
    2b74:	bb 1f       	adc	r27, r27
    2b76:	a4 59       	subi	r26, 0x94	; 148
    2b78:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7a:	0d 90       	ld	r0, X+
    2b7c:	bc 91       	ld	r27, X
    2b7e:	a0 2d       	mov	r26, r0
    2b80:	2c 91       	ld	r18, X
    2b82:	dc 01       	movw	r26, r24
    2b84:	aa 0f       	add	r26, r26
    2b86:	bb 1f       	adc	r27, r27
    2b88:	a2 95       	swap	r26
    2b8a:	b2 95       	swap	r27
    2b8c:	b0 7f       	andi	r27, 0xF0	; 240
    2b8e:	ba 27       	eor	r27, r26
    2b90:	a0 7f       	andi	r26, 0xF0	; 240
    2b92:	ba 27       	eor	r27, r26
    2b94:	a4 0f       	add	r26, r20
    2b96:	b5 1f       	adc	r27, r21
    2b98:	a6 5d       	subi	r26, 0xD6	; 214
    2b9a:	bd 4f       	sbci	r27, 0xFD	; 253
    2b9c:	2c 93       	st	X, r18
    if (rxWrite[uart] < (RX_BUFFER_SIZE - 1)) {
    2b9e:	20 81       	ld	r18, Z
    2ba0:	31 81       	ldd	r19, Z+1	; 0x01
    2ba2:	2f 31       	cpi	r18, 0x1F	; 31
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	60 f4       	brcc	.+24     	; 0x2bc0 <serialReceiveInterrupt+0x6e>
        rxWrite[uart]++;
    2ba8:	fc 01       	movw	r30, r24
    2baa:	ee 0f       	add	r30, r30
    2bac:	ff 1f       	adc	r31, r31
    2bae:	e1 5e       	subi	r30, 0xE1	; 225
    2bb0:	fd 4f       	sbci	r31, 0xFD	; 253
    2bb2:	20 81       	ld	r18, Z
    2bb4:	31 81       	ldd	r19, Z+1	; 0x01
    2bb6:	2f 5f       	subi	r18, 0xFF	; 255
    2bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bba:	31 83       	std	Z+1, r19	; 0x01
    2bbc:	20 83       	st	Z, r18
    2bbe:	07 c0       	rjmp	.+14     	; 0x2bce <serialReceiveInterrupt+0x7c>
    } else {
        rxWrite[uart] = 0;
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	ee 0f       	add	r30, r30
    2bc4:	ff 1f       	adc	r31, r31
    2bc6:	e1 5e       	subi	r30, 0xE1	; 225
    2bc8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bca:	11 82       	std	Z+1, r1	; 0x01
    2bcc:	10 82       	st	Z, r1
    }

#ifdef FLOWCONTROL
    rxBufferElements[uart]++;
    2bce:	fc 01       	movw	r30, r24
    2bd0:	e6 5a       	subi	r30, 0xA6	; 166
    2bd2:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd4:	20 81       	ld	r18, Z
    2bd6:	2f 5f       	subi	r18, 0xFF	; 255
    2bd8:	20 83       	st	Z, r18
    if ((flow[uart] == 1) && (rxBufferElements[uart] >= (RX_BUFFER_SIZE - FLOWMARK))) {
    2bda:	fc 01       	movw	r30, r24
    2bdc:	ef 5d       	subi	r30, 0xDF	; 223
    2bde:	fd 4f       	sbci	r31, 0xFD	; 253
    2be0:	20 81       	ld	r18, Z
    2be2:	21 30       	cpi	r18, 0x01	; 1
    2be4:	09 f0       	breq	.+2      	; 0x2be8 <serialReceiveInterrupt+0x96>
    2be6:	4d c0       	rjmp	.+154    	; 0x2c82 <serialReceiveInterrupt+0x130>
    2be8:	fc 01       	movw	r30, r24
    2bea:	e6 5a       	subi	r30, 0xA6	; 166
    2bec:	fd 4f       	sbci	r31, 0xFD	; 253
    2bee:	20 81       	ld	r18, Z
    2bf0:	2b 31       	cpi	r18, 0x1B	; 27
    2bf2:	08 f4       	brcc	.+2      	; 0x2bf6 <serialReceiveInterrupt+0xa4>
    2bf4:	46 c0       	rjmp	.+140    	; 0x2c82 <serialReceiveInterrupt+0x130>
        sendThisNext[uart] = XOFF;
    2bf6:	23 e1       	ldi	r18, 0x13	; 19
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	ea 5d       	subi	r30, 0xDA	; 218
    2bfc:	fd 4f       	sbci	r31, 0xFD	; 253
    2bfe:	20 83       	st	Z, r18
        flow[uart] = 0;
    2c00:	fc 01       	movw	r30, r24
    2c02:	ef 5d       	subi	r30, 0xDF	; 223
    2c04:	fd 4f       	sbci	r31, 0xFD	; 253
    2c06:	10 82       	st	Z, r1
        if (shouldStartTransmission[uart]) {
    2c08:	fc 01       	movw	r30, r24
    2c0a:	e9 5d       	subi	r30, 0xD9	; 217
    2c0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2c0e:	20 81       	ld	r18, Z
    2c10:	22 23       	and	r18, r18
    2c12:	b9 f1       	breq	.+110    	; 0x2c82 <serialReceiveInterrupt+0x130>
            shouldStartTransmission[uart] = 0;
    2c14:	fc 01       	movw	r30, r24
    2c16:	e9 5d       	subi	r30, 0xD9	; 217
    2c18:	fd 4f       	sbci	r31, 0xFD	; 253
    2c1a:	10 82       	st	Z, r1
            *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALUDRIE]); // Enable Interrupt
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	ee 0f       	add	r30, r30
    2c20:	ff 1f       	adc	r31, r31
    2c22:	e8 0f       	add	r30, r24
    2c24:	f9 1f       	adc	r31, r25
    2c26:	ee 0f       	add	r30, r30
    2c28:	ff 1f       	adc	r31, r31
    2c2a:	ee 0f       	add	r30, r30
    2c2c:	ff 1f       	adc	r31, r31
    2c2e:	e4 59       	subi	r30, 0x94	; 148
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	c2 81       	ldd	r28, Z+2	; 0x02
    2c34:	d3 81       	ldd	r29, Z+3	; 0x03
    2c36:	48 81       	ld	r20, Y
    2c38:	dc 01       	movw	r26, r24
    2c3a:	aa 0f       	add	r26, r26
    2c3c:	bb 1f       	adc	r27, r27
    2c3e:	aa 0f       	add	r26, r26
    2c40:	bb 1f       	adc	r27, r27
    2c42:	aa 0f       	add	r26, r26
    2c44:	bb 1f       	adc	r27, r27
    2c46:	a8 1b       	sub	r26, r24
    2c48:	b9 0b       	sbc	r27, r25
    2c4a:	ab 59       	subi	r26, 0x9B	; 155
    2c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9c 01       	movw	r18, r24
    2c54:	15 96       	adiw	r26, 0x05	; 5
    2c56:	0c 90       	ld	r0, X
    2c58:	15 97       	sbiw	r26, 0x05	; 5
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <serialReceiveInterrupt+0x10e>
    2c5c:	22 0f       	add	r18, r18
    2c5e:	33 1f       	adc	r19, r19
    2c60:	0a 94       	dec	r0
    2c62:	e2 f7       	brpl	.-8      	; 0x2c5c <serialReceiveInterrupt+0x10a>
    2c64:	24 2b       	or	r18, r20
    2c66:	28 83       	st	Y, r18
            *serialRegisters[uart][SERIALA] |= (1 << serialBits[uart][SERIALUDRE]); // Trigger Interrupt
    2c68:	06 80       	ldd	r0, Z+6	; 0x06
    2c6a:	f7 81       	ldd	r31, Z+7	; 0x07
    2c6c:	e0 2d       	mov	r30, r0
    2c6e:	20 81       	ld	r18, Z
    2c70:	16 96       	adiw	r26, 0x06	; 6
    2c72:	0c 90       	ld	r0, X
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <serialReceiveInterrupt+0x128>
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	0a 94       	dec	r0
    2c7c:	e2 f7       	brpl	.-8      	; 0x2c76 <serialReceiveInterrupt+0x124>
    2c7e:	82 2b       	or	r24, r18
    2c80:	80 83       	st	Z, r24
        }
    }
#endif
}
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	08 95       	ret

00002c88 <serialTransmitInterrupt>:

void serialTransmitInterrupt(uint8_t uart) {
    2c88:	cf 93       	push	r28
    2c8a:	df 93       	push	r29
#ifdef FLOWCONTROL
    if (sendThisNext[uart]) {
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	fc 01       	movw	r30, r24
    2c90:	ea 5d       	subi	r30, 0xDA	; 218
    2c92:	fd 4f       	sbci	r31, 0xFD	; 253
    2c94:	20 81       	ld	r18, Z
    2c96:	22 23       	and	r18, r18
    2c98:	a1 f0       	breq	.+40     	; 0x2cc2 <serialTransmitInterrupt+0x3a>
        *serialRegisters[uart][SERIALDATA] = sendThisNext[uart];
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	ee 0f       	add	r30, r30
    2c9e:	ff 1f       	adc	r31, r31
    2ca0:	e8 0f       	add	r30, r24
    2ca2:	f9 1f       	adc	r31, r25
    2ca4:	ee 0f       	add	r30, r30
    2ca6:	ff 1f       	adc	r31, r31
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	e4 59       	subi	r30, 0x94	; 148
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	a0 81       	ld	r26, Z
    2cb2:	b1 81       	ldd	r27, Z+1	; 0x01
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	ea 5d       	subi	r30, 0xDA	; 218
    2cb8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cba:	80 81       	ld	r24, Z
    2cbc:	8c 93       	st	X, r24
        sendThisNext[uart] = 0;
    2cbe:	10 82       	st	Z, r1
    2cc0:	74 c0       	rjmp	.+232    	; 0x2daa <serialTransmitInterrupt+0x122>
    } else {
#endif
        if (txRead[uart] != txWrite[uart]) {
    2cc2:	9c 01       	movw	r18, r24
    2cc4:	22 0f       	add	r18, r18
    2cc6:	33 1f       	adc	r19, r19
    2cc8:	f9 01       	movw	r30, r18
    2cca:	ee 5d       	subi	r30, 0xDE	; 222
    2ccc:	fd 4f       	sbci	r31, 0xFD	; 253
    2cce:	40 81       	ld	r20, Z
    2cd0:	51 81       	ldd	r21, Z+1	; 0x01
    2cd2:	f9 01       	movw	r30, r18
    2cd4:	ec 5d       	subi	r30, 0xDC	; 220
    2cd6:	fd 4f       	sbci	r31, 0xFD	; 253
    2cd8:	20 81       	ld	r18, Z
    2cda:	31 81       	ldd	r19, Z+1	; 0x01
    2cdc:	42 17       	cp	r20, r18
    2cde:	53 07       	cpc	r21, r19
    2ce0:	c1 f1       	breq	.+112    	; 0x2d52 <serialTransmitInterrupt+0xca>
            *serialRegisters[uart][SERIALDATA] = txBuffer[uart][txRead[uart]];
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	ee 0f       	add	r30, r30
    2ce6:	ff 1f       	adc	r31, r31
    2ce8:	df 01       	movw	r26, r30
    2cea:	a8 0f       	add	r26, r24
    2cec:	b9 1f       	adc	r27, r25
    2cee:	aa 0f       	add	r26, r26
    2cf0:	bb 1f       	adc	r27, r27
    2cf2:	aa 0f       	add	r26, r26
    2cf4:	bb 1f       	adc	r27, r27
    2cf6:	a4 59       	subi	r26, 0x94	; 148
    2cf8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfa:	0d 90       	ld	r0, X+
    2cfc:	bc 91       	ld	r27, X
    2cfe:	a0 2d       	mov	r26, r0
    2d00:	ee 5d       	subi	r30, 0xDE	; 222
    2d02:	fd 4f       	sbci	r31, 0xFD	; 253
    2d04:	20 81       	ld	r18, Z
    2d06:	31 81       	ldd	r19, Z+1	; 0x01
    2d08:	ec 01       	movw	r28, r24
    2d0a:	c2 95       	swap	r28
    2d0c:	d2 95       	swap	r29
    2d0e:	d0 7f       	andi	r29, 0xF0	; 240
    2d10:	dc 27       	eor	r29, r28
    2d12:	c0 7f       	andi	r28, 0xF0	; 240
    2d14:	dc 27       	eor	r29, r28
    2d16:	c2 0f       	add	r28, r18
    2d18:	d3 1f       	adc	r29, r19
    2d1a:	c6 5b       	subi	r28, 0xB6	; 182
    2d1c:	dd 4f       	sbci	r29, 0xFD	; 253
    2d1e:	28 81       	ld	r18, Y
    2d20:	2c 93       	st	X, r18
            if (txRead[uart] < (TX_BUFFER_SIZE -1)) {
    2d22:	20 81       	ld	r18, Z
    2d24:	31 81       	ldd	r19, Z+1	; 0x01
    2d26:	2f 30       	cpi	r18, 0x0F	; 15
    2d28:	31 05       	cpc	r19, r1
    2d2a:	58 f4       	brcc	.+22     	; 0x2d42 <serialTransmitInterrupt+0xba>
                txRead[uart]++;
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	ee 0f       	add	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	ee 5d       	subi	r30, 0xDE	; 222
    2d34:	fd 4f       	sbci	r31, 0xFD	; 253
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	01 96       	adiw	r24, 0x01	; 1
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
    2d40:	34 c0       	rjmp	.+104    	; 0x2daa <serialTransmitInterrupt+0x122>
            } else {
                txRead[uart] = 0;
    2d42:	fc 01       	movw	r30, r24
    2d44:	ee 0f       	add	r30, r30
    2d46:	ff 1f       	adc	r31, r31
    2d48:	ee 5d       	subi	r30, 0xDE	; 222
    2d4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4c:	11 82       	std	Z+1, r1	; 0x01
    2d4e:	10 82       	st	Z, r1
    2d50:	2c c0       	rjmp	.+88     	; 0x2daa <serialTransmitInterrupt+0x122>
            }
        } else {
            shouldStartTransmission[uart] = 1;
    2d52:	fc 01       	movw	r30, r24
    2d54:	e9 5d       	subi	r30, 0xD9	; 217
    2d56:	fd 4f       	sbci	r31, 0xFD	; 253
    2d58:	21 e0       	ldi	r18, 0x01	; 1
    2d5a:	20 83       	st	Z, r18
            *serialRegisters[uart][SERIALB] &= ~(1 << serialBits[uart][SERIALUDRIE]); // Disable Interrupt
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	ee 0f       	add	r30, r30
    2d60:	ff 1f       	adc	r31, r31
    2d62:	e8 0f       	add	r30, r24
    2d64:	f9 1f       	adc	r31, r25
    2d66:	ee 0f       	add	r30, r30
    2d68:	ff 1f       	adc	r31, r31
    2d6a:	ee 0f       	add	r30, r30
    2d6c:	ff 1f       	adc	r31, r31
    2d6e:	e4 59       	subi	r30, 0x94	; 148
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	02 80       	ldd	r0, Z+2	; 0x02
    2d74:	f3 81       	ldd	r31, Z+3	; 0x03
    2d76:	e0 2d       	mov	r30, r0
    2d78:	40 81       	ld	r20, Z
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	aa 0f       	add	r26, r26
    2d7e:	bb 1f       	adc	r27, r27
    2d80:	aa 0f       	add	r26, r26
    2d82:	bb 1f       	adc	r27, r27
    2d84:	aa 0f       	add	r26, r26
    2d86:	bb 1f       	adc	r27, r27
    2d88:	a8 1b       	sub	r26, r24
    2d8a:	b9 0b       	sbc	r27, r25
    2d8c:	ab 59       	subi	r26, 0x9B	; 155
    2d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d90:	21 e0       	ldi	r18, 0x01	; 1
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	c9 01       	movw	r24, r18
    2d96:	15 96       	adiw	r26, 0x05	; 5
    2d98:	0c 90       	ld	r0, X
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <serialTransmitInterrupt+0x118>
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	0a 94       	dec	r0
    2da2:	e2 f7       	brpl	.-8      	; 0x2d9c <serialTransmitInterrupt+0x114>
    2da4:	80 95       	com	r24
    2da6:	84 23       	and	r24, r20
    2da8:	80 83       	st	Z, r24
        }
#ifdef FLOWCONTROL
    }
#endif
}
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	08 95       	ret

00002db0 <__vector_13>:

ISR(SERIALRECIEVEINTERRUPT) { // Receive complete
    2db0:	1f 92       	push	r1
    2db2:	0f 92       	push	r0
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	0f 92       	push	r0
    2db8:	11 24       	eor	r1, r1
    2dba:	2f 93       	push	r18
    2dbc:	3f 93       	push	r19
    2dbe:	4f 93       	push	r20
    2dc0:	5f 93       	push	r21
    2dc2:	6f 93       	push	r22
    2dc4:	7f 93       	push	r23
    2dc6:	8f 93       	push	r24
    2dc8:	9f 93       	push	r25
    2dca:	af 93       	push	r26
    2dcc:	bf 93       	push	r27
    2dce:	ef 93       	push	r30
    2dd0:	ff 93       	push	r31
    serialReceiveInterrupt(0);
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <serialReceiveInterrupt>
}
    2dd8:	ff 91       	pop	r31
    2dda:	ef 91       	pop	r30
    2ddc:	bf 91       	pop	r27
    2dde:	af 91       	pop	r26
    2de0:	9f 91       	pop	r25
    2de2:	8f 91       	pop	r24
    2de4:	7f 91       	pop	r23
    2de6:	6f 91       	pop	r22
    2de8:	5f 91       	pop	r21
    2dea:	4f 91       	pop	r20
    2dec:	3f 91       	pop	r19
    2dee:	2f 91       	pop	r18
    2df0:	0f 90       	pop	r0
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	0f 90       	pop	r0
    2df6:	1f 90       	pop	r1
    2df8:	18 95       	reti

00002dfa <__vector_14>:

ISR(SERIALTRANSMITINTERRUPT) { // Data register empty
    2dfa:	1f 92       	push	r1
    2dfc:	0f 92       	push	r0
    2dfe:	0f b6       	in	r0, 0x3f	; 63
    2e00:	0f 92       	push	r0
    2e02:	11 24       	eor	r1, r1
    2e04:	2f 93       	push	r18
    2e06:	3f 93       	push	r19
    2e08:	4f 93       	push	r20
    2e0a:	5f 93       	push	r21
    2e0c:	6f 93       	push	r22
    2e0e:	7f 93       	push	r23
    2e10:	8f 93       	push	r24
    2e12:	9f 93       	push	r25
    2e14:	af 93       	push	r26
    2e16:	bf 93       	push	r27
    2e18:	ef 93       	push	r30
    2e1a:	ff 93       	push	r31
    serialTransmitInterrupt(0);
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <serialTransmitInterrupt>
}
    2e22:	ff 91       	pop	r31
    2e24:	ef 91       	pop	r30
    2e26:	bf 91       	pop	r27
    2e28:	af 91       	pop	r26
    2e2a:	9f 91       	pop	r25
    2e2c:	8f 91       	pop	r24
    2e2e:	7f 91       	pop	r23
    2e30:	6f 91       	pop	r22
    2e32:	5f 91       	pop	r21
    2e34:	4f 91       	pop	r20
    2e36:	3f 91       	pop	r19
    2e38:	2f 91       	pop	r18
    2e3a:	0f 90       	pop	r0
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	0f 90       	pop	r0
    2e40:	1f 90       	pop	r1
    2e42:	18 95       	reti

00002e44 <SPIMasterEnable>:
int spi_cnt;
int spi_ri;
int spi_wi;

void SPIMasterEnable(uint8_t clk_pol,uint8_t clk_phase,uint8_t clk_div,uint8_t order,uint8_t int_enable)
{
    2e44:	0f 93       	push	r16
	uint8_t spcr_buf = SPI_MASTER;
	spcr_buf |= clk_pol | clk_phase | clk_div | order | int_enable;
    2e46:	00 61       	ori	r16, 0x10	; 16
    2e48:	20 2b       	or	r18, r16
    2e4a:	42 2b       	or	r20, r18
    2e4c:	64 2b       	or	r22, r20
    2e4e:	86 2b       	or	r24, r22
	SPCR = spcr_buf;
    2e50:	8d b9       	out	0x0d, r24	; 13

	Orb(DDRB, PB5);	//MOSI = output
    2e52:	bd 9a       	sbi	0x17, 5	; 23
	Orb(DDRB, PB7);		//SCK = output
    2e54:	bf 9a       	sbi	0x17, 7	; 23
	SPCR |= SPI_ENABLE;
    2e56:	6e 9a       	sbi	0x0d, 6	; 13
}
    2e58:	0f 91       	pop	r16
    2e5a:	08 95       	ret

00002e5c <SPIMasterDisable>:

void SPIMasterDisable()
{
	SPCR &= ~SPI_ENABLE;
    2e5c:	6e 98       	cbi	0x0d, 6	; 13
    2e5e:	08 95       	ret

00002e60 <SPIMasterTransfer>:
}

void SPIMasterTransfer(int len, unsigned char *buf)
{
	spi_status = SPI_BUSY;
    2e60:	21 e0       	ldi	r18, 0x01	; 1
    2e62:	20 93 17 02 	sts	0x0217, r18
	spi_cnt = len;
    2e66:	90 93 5e 02 	sts	0x025E, r25
    2e6a:	80 93 5d 02 	sts	0x025D, r24
	spi_wi = 0;
    2e6e:	10 92 5c 02 	sts	0x025C, r1
    2e72:	10 92 5b 02 	sts	0x025B, r1
	spi_ri = 0;
    2e76:	10 92 60 02 	sts	0x0260, r1
    2e7a:	10 92 5f 02 	sts	0x025F, r1

	while (spi_wi != spi_cnt)
    2e7e:	18 16       	cp	r1, r24
    2e80:	19 06       	cpc	r1, r25
    2e82:	59 f1       	breq	.+86     	; 0x2eda <SPIMasterTransfer+0x7a>
	{
		SPDR = buf[spi_ri];
    2e84:	e0 91 5f 02 	lds	r30, 0x025F
    2e88:	f0 91 60 02 	lds	r31, 0x0260
    2e8c:	e6 0f       	add	r30, r22
    2e8e:	f7 1f       	adc	r31, r23
    2e90:	80 81       	ld	r24, Z
    2e92:	8f b9       	out	0x0f, r24	; 15
		spi_ri++;
    2e94:	80 91 5f 02 	lds	r24, 0x025F
    2e98:	90 91 60 02 	lds	r25, 0x0260
    2e9c:	01 96       	adiw	r24, 0x01	; 1
    2e9e:	90 93 60 02 	sts	0x0260, r25
    2ea2:	80 93 5f 02 	sts	0x025F, r24

		while (!(SPSR & 0x80)); //wait until SPIF is set
    2ea6:	77 9b       	sbis	0x0e, 7	; 14
    2ea8:	fe cf       	rjmp	.-4      	; 0x2ea6 <SPIMasterTransfer+0x46>

		buf[spi_wi] = SPDR;
    2eaa:	8f b1       	in	r24, 0x0f	; 15
    2eac:	e0 91 5b 02 	lds	r30, 0x025B
    2eb0:	f0 91 5c 02 	lds	r31, 0x025C
    2eb4:	e6 0f       	add	r30, r22
    2eb6:	f7 1f       	adc	r31, r23
    2eb8:	80 83       	st	Z, r24
		spi_wi++;
    2eba:	80 91 5b 02 	lds	r24, 0x025B
    2ebe:	90 91 5c 02 	lds	r25, 0x025C
    2ec2:	01 96       	adiw	r24, 0x01	; 1
    2ec4:	90 93 5c 02 	sts	0x025C, r25
    2ec8:	80 93 5b 02 	sts	0x025B, r24
	spi_status = SPI_BUSY;
	spi_cnt = len;
	spi_wi = 0;
	spi_ri = 0;

	while (spi_wi != spi_cnt)
    2ecc:	20 91 5d 02 	lds	r18, 0x025D
    2ed0:	30 91 5e 02 	lds	r19, 0x025E
    2ed4:	28 17       	cp	r18, r24
    2ed6:	39 07       	cpc	r19, r25
    2ed8:	a9 f6       	brne	.-86     	; 0x2e84 <SPIMasterTransfer+0x24>
		while (!(SPSR & 0x80)); //wait until SPIF is set

		buf[spi_wi] = SPDR;
		spi_wi++;
}
	spi_status = SPI_IDLE;
    2eda:	10 92 17 02 	sts	0x0217, r1
    2ede:	08 95       	ret

00002ee0 <LCD_WaitMs>:
*********************************************************************************************************/    
void LCD_WaitMs(unsigned int ms)   
{   
    int i;   
   
    while (ms-- > 0)   
    2ee0:	56 e6       	ldi	r21, 0x66	; 102
    2ee2:	46 e0       	ldi	r20, 0x06	; 6
    2ee4:	06 c0       	rjmp	.+12     	; 0x2ef2 <LCD_WaitMs+0x12>
    {   
        /* 8192 (8k) clock cycles for 1ms; each time through loop  
           is 5 cycles (for loop control + nop) */   
        for (i = 0; i < 1638; ++i)   
            asm volatile ("nop");   
    2ee6:	00 00       	nop
    2ee8:	21 50       	subi	r18, 0x01	; 1
    2eea:	31 09       	sbc	r19, r1
   
    while (ms-- > 0)   
    {   
        /* 8192 (8k) clock cycles for 1ms; each time through loop  
           is 5 cycles (for loop control + nop) */   
        for (i = 0; i < 1638; ++i)   
    2eec:	21 15       	cp	r18, r1
    2eee:	31 05       	cpc	r19, r1
    2ef0:	d1 f7       	brne	.-12     	; 0x2ee6 <LCD_WaitMs+0x6>
*********************************************************************************************************/    
void LCD_WaitMs(unsigned int ms)   
{   
    int i;   
   
    while (ms-- > 0)   
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	18 f0       	brcs	.+6      	; 0x2efc <LCD_WaitMs+0x1c>
    2ef6:	25 2f       	mov	r18, r21
    2ef8:	34 2f       	mov	r19, r20
    2efa:	f5 cf       	rjmp	.-22     	; 0x2ee6 <LCD_WaitMs+0x6>
    2efc:	08 95       	ret

00002efe <LCD_WrCmd>:
* Returns     : none   
* Notes       : Hardware specific.   
*********************************************************************************************************/    
void LCD_WrCmd(unsigned char cmd)    
{    
    LCD_CLR_CS();   // clear CS pin to ENABLE LCD   
    2efe:	93 98       	cbi	0x12, 3	; 18
   
    LCD_CLR_RS();   
    2f00:	92 98       	cbi	0x12, 2	; 18
    LCD_SET_DBL = cmd;   
    2f02:	8b bb       	out	0x1b, r24	; 27
    LCD_SET_DBH = (cmd >> 8);   
    2f04:	15 ba       	out	0x15, r1	; 21
    LCD_CLR_WR();   
    2f06:	95 98       	cbi	0x12, 5	; 18
    LCD_SET_WR();   
    2f08:	95 9a       	sbi	0x12, 5	; 18
   
    LCD_SET_CS();   // set CS pin to DISABLE LCD   
    2f0a:	93 9a       	sbi	0x12, 3	; 18
    2f0c:	08 95       	ret

00002f0e <LCD_WrDat>:
* Returns     : none   
* Notes       : Hardware specific.   
********************************************************************************************************/    
void LCD_WrDat(unsigned int val)    
{    
    LCD_CLR_CS();               // clear CS pin to ENABLE LCD    
    2f0e:	93 98       	cbi	0x12, 3	; 18
   
    LCD_SET_RS();   
    2f10:	92 9a       	sbi	0x12, 2	; 18
    LCD_SET_DBL = val;   
    2f12:	8b bb       	out	0x1b, r24	; 27
    LCD_SET_DBH = (val>>8);   
    2f14:	95 bb       	out	0x15, r25	; 21
    LCD_CLR_WR();   
    2f16:	95 98       	cbi	0x12, 5	; 18
    LCD_SET_WR();   
    2f18:	95 9a       	sbi	0x12, 5	; 18
   
    LCD_SET_CS();   // set CS pin to DISABLE LCD    
    2f1a:	93 9a       	sbi	0x12, 3	; 18
    2f1c:	08 95       	ret

00002f1e <LCD_SetReg>:
*             : val   - value to be set  
* Returns     : none  
* Notes       : Hardware specific.   
**********************************************************************************************************/   
void LCD_SetReg(unsigned char index, unsigned int val)   
{   
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	eb 01       	movw	r28, r22
    LCD_WrCmd(index);   
    2f24:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    LCD_WrDat(val);   
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
}   
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	08 95       	ret

00002f34 <LCD_GetReg>:
**********************************************************************************************************/   
unsigned int LCD_GetReg(unsigned char index)   
{   
    unsigned int ret;   
   
    LCD_CLR_CS();   // clear  CS pin to ENABLE LCD    
    2f34:	93 98       	cbi	0x12, 3	; 18
   
    LCD_CLR_RS();   
    2f36:	92 98       	cbi	0x12, 2	; 18
    LCD_SET_DBL = index;   
    2f38:	8b bb       	out	0x1b, r24	; 27
    LCD_SET_DBH = (index >> 8);   
    2f3a:	15 ba       	out	0x15, r1	; 21
    LCD_CLR_WR();   
    2f3c:	95 98       	cbi	0x12, 5	; 18
    LCD_SET_WR();   
    2f3e:	95 9a       	sbi	0x12, 5	; 18
   
    LCD_INPUT();                // input mode   
    2f40:	1a ba       	out	0x1a, r1	; 26
    2f42:	14 ba       	out	0x14, r1	; 20
    LCD_CLR_RD();   
    2f44:	94 98       	cbi	0x12, 4	; 18
    asm volatile ("nop");   
    2f46:	00 00       	nop
    ret = LCD_GET_DBH();   
    2f48:	83 b3       	in	r24, 0x13	; 19
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    ret <<= 8;   
    2f4c:	98 2f       	mov	r25, r24
    2f4e:	88 27       	eor	r24, r24
    ret |= LCD_GET_DBL();   
    2f50:	39 b3       	in	r19, 0x19	; 25
    LCD_SET_RD();   
    2f52:	94 9a       	sbi	0x12, 4	; 18
    LCD_SET_CS();   // set CS pin to DISABLE LCD    
    2f54:	93 9a       	sbi	0x12, 3	; 18
   
    LCD_OUTPUT();               // output data   
    2f56:	2f ef       	ldi	r18, 0xFF	; 255
    2f58:	2a bb       	out	0x1a, r18	; 26
    2f5a:	24 bb       	out	0x14, r18	; 20
    return ret;    
}   
    2f5c:	83 2b       	or	r24, r19
    2f5e:	08 95       	ret

00002f60 <LCD_InitPort>:
* Returns     : none  
* Notes       : none  
**********************************************************************************************************/   
void LCD_InitPort(void)   
{   
    LCD_SET_DBH = 0xFF;   
    2f60:	8f ef       	ldi	r24, 0xFF	; 255
    2f62:	85 bb       	out	0x15, r24	; 21
    LCD_SET_DBL = 0xFF;   
    2f64:	8b bb       	out	0x1b, r24	; 27
    LCD_OUTPUT();   
    2f66:	8a bb       	out	0x1a, r24	; 26
    2f68:	84 bb       	out	0x14, r24	; 20
   
    // set default   
    LCD_SET_CS();   
    2f6a:	93 9a       	sbi	0x12, 3	; 18
    LCD_SET_RS();   
    2f6c:	92 9a       	sbi	0x12, 2	; 18
    LCD_SET_WR();   
    2f6e:	95 9a       	sbi	0x12, 5	; 18
    LCD_SET_RD();   
    2f70:	94 9a       	sbi	0x12, 4	; 18
   
    LCD_CLR_RST();   
    2f72:	97 98       	cbi	0x12, 7	; 18
   
    // init direction   
    LCD_DIR_CS(1);   
    2f74:	8b 9a       	sbi	0x11, 3	; 17
    LCD_DIR_RS(1);   
    2f76:	8a 9a       	sbi	0x11, 2	; 17
    LCD_DIR_WR(1);   
    2f78:	8d 9a       	sbi	0x11, 5	; 17
    LCD_DIR_RD(1);   
    2f7a:	8c 9a       	sbi	0x11, 4	; 17
    LCD_DIR_RST(1);   
    2f7c:	8f 9a       	sbi	0x11, 7	; 17
   
    // reset module   
    LCD_WaitMs(20);   
    2f7e:	84 e1       	ldi	r24, 0x14	; 20
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_WaitMs>
    LCD_SET_RST();   
    2f86:	97 9a       	sbi	0x12, 7	; 18
    LCD_WaitMs(20);   
    2f88:	84 e1       	ldi	r24, 0x14	; 20
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_WaitMs>
    2f90:	08 95       	ret

00002f92 <LCD_Reset>:
/* _____PUBLIC FUNCTIONS_____________________________________________________ */   
  
void LCD_Reset(void)   
{   
    unsigned int driver_code;   
    LCD_InitPort();   
    2f92:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <LCD_InitPort>
   
    driver_code = LCD_GetReg(0x00);   
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <LCD_GetReg>
    LCD_LO_DDR = 0xFF;   
    2f9c:	2f ef       	ldi	r18, 0xFF	; 255
    2f9e:	2a bb       	out	0x1a, r18	; 26
    LCD_HI_DDR = 0xFF;   
    2fa0:	24 bb       	out	0x14, r18	; 20
   
    LCD_LO_PORT = driver_code;   
    2fa2:	8b bb       	out	0x1b, r24	; 27
    LCD_HI_PORT = driver_code>>8;   
    2fa4:	95 bb       	out	0x15, r25	; 21

    LCD_WrCmd(0x0000);LCD_WrDat(0x0001); //Start Oscillation OSCEN=1   
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WaitMs(15);   
    2fb4:	8f e0       	ldi	r24, 0x0F	; 15
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_WaitMs>
    LCD_WrCmd(0x0003);LCD_WrDat(0xAAAC); //Power Control (1)   
    2fbc:	83 e0       	ldi	r24, 0x03	; 3
    2fbe:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    2fc2:	8c ea       	ldi	r24, 0xAC	; 172
    2fc4:	9a ea       	ldi	r25, 0xAA	; 170
    2fc6:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x000C);LCD_WrDat(0x0002); //Power Control (2)   
    2fca:	8c e0       	ldi	r24, 0x0C	; 12
    2fcc:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x000D);LCD_WrDat(0x000A); //Power Control (3)   
    2fd8:	8d e0       	ldi	r24, 0x0D	; 13
    2fda:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    2fde:	8a e0       	ldi	r24, 0x0A	; 10
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x000E);LCD_WrDat(0x2C00); //Power Control (4)   
    2fe6:	8e e0       	ldi	r24, 0x0E	; 14
    2fe8:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	9c e2       	ldi	r25, 0x2C	; 44
    2ff0:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x001E);LCD_WrDat(0x00B8); //Power Control (5)   
    2ff4:	8e e1       	ldi	r24, 0x1E	; 30
    2ff6:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    2ffa:	88 eb       	ldi	r24, 0xB8	; 184
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WaitMs(15);   
    3002:	8f e0       	ldi	r24, 0x0F	; 15
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_WaitMs>
    LCD_WrCmd(0x0001);LCD_WrDat(0x2B3F); //Driver Output Control RL=0, REV=1, BGR=1, TB=1    
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3010:	8f e3       	ldi	r24, 0x3F	; 63
    3012:	9b e2       	ldi	r25, 0x2B	; 43
    3014:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
//      LCD_WrCmd(0x0001);LCD_WrDat(0x6B3F); //Driver Output Control RL=1, REV=1, BGR=1, TB=1    
    LCD_WrCmd(0x0002);LCD_WrDat(0x0600);   
    3018:	82 e0       	ldi	r24, 0x02	; 2
    301a:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	96 e0       	ldi	r25, 0x06	; 6
    3022:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    // Restore VSYNC mode from low power state    
    LCD_WrCmd(0x0010);LCD_WrDat(0x0000); //Sleep mode cancel   
    3026:	80 e1       	ldi	r24, 0x10	; 16
    3028:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0011);LCD_WrDat(0x6030); //Entry Mode   
    3034:	81 e1       	ldi	r24, 0x11	; 17
    3036:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    303a:	80 e3       	ldi	r24, 0x30	; 48
    303c:	90 e6       	ldi	r25, 0x60	; 96
    303e:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
                                        // ID[0] 0x0000 = horizontal decrement   
                                        // ID[0] 0x0010 = horizontal increment   
                                        // ID[1] 0x0000 = Vertical decrement   
                                        // ID[1] 0x0020 = Vertical decrement   
   
    LCD_WaitMs(20);   
    3042:	84 e1       	ldi	r24, 0x14	; 20
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_WaitMs>
    LCD_WrCmd(0x0005);LCD_WrDat(0x0000); // Compare register   
    304a:	85 e0       	ldi	r24, 0x05	; 5
    304c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0006);LCD_WrDat(0x0000); // Compare register   
    3058:	86 e0       	ldi	r24, 0x06	; 6
    305a:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    // Horizontal and Vertical porch are for DOTCLK mode operation   
    LCD_WrCmd(0x0016);LCD_WrDat(0xEF1C); // Horizontal Porch    
    3066:	86 e1       	ldi	r24, 0x16	; 22
    3068:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    306c:	8c e1       	ldi	r24, 0x1C	; 28
    306e:	9f ee       	ldi	r25, 0xEF	; 239
    3070:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0017);LCD_WrDat(0x0003); // Vertical Porch   
    3074:	87 e1       	ldi	r24, 0x17	; 23
    3076:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    307a:	83 e0       	ldi	r24, 0x03	; 3
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    // Display Control   
    LCD_WrCmd(0x0007);LCD_WrDat(0x0233); // Display Control   
    3082:	87 e0       	ldi	r24, 0x07	; 7
    3084:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3088:	83 e3       	ldi	r24, 0x33	; 51
    308a:	92 e0       	ldi	r25, 0x02	; 2
    308c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
                                         // D1 0x0002 = display on   
                                         // D0 0x0000 = internal display halt   
                                         // D0 0x0001 = internal display operate   
   
   
    LCD_WrCmd(0x000B);LCD_WrDat(0x5312); // Frame cycle control   
    3090:	8b e0       	ldi	r24, 0x0B	; 11
    3092:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3096:	82 e1       	ldi	r24, 0x12	; 18
    3098:	93 e5       	ldi	r25, 0x53	; 83
    309a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x000F);LCD_WrDat(0x0000); // Gate Scan Position    
    309e:	8f e0       	ldi	r24, 0x0F	; 15
    30a0:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WaitMs(20);   
    30ac:	84 e1       	ldi	r24, 0x14	; 20
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_WaitMs>
    // Vertical Scroll Control   
    LCD_WrCmd(0x0041);LCD_WrDat(0x0000); // Vertical Scroll Control   
    30b4:	81 e4       	ldi	r24, 0x41	; 65
    30b6:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0042);LCD_WrDat(0x0000); // Vertical Scroll Control   
    30c2:	82 e4       	ldi	r24, 0x42	; 66
    30c4:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
   
    // 1st Screen driving position   
    LCD_WrCmd(0x0048);LCD_WrDat(0x0000); // Start position. 0   
    30d0:	88 e4       	ldi	r24, 0x48	; 72
    30d2:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0049);LCD_WrDat(0x013F); // End position.   319   
    30de:	89 e4       	ldi	r24, 0x49	; 73
    30e0:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    30e4:	8f e3       	ldi	r24, 0x3F	; 63
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
   
    // Source RAM address   
    LCD_WrCmd(0x0044);LCD_WrDat(0xEF00); //Horizontal RAM address position start/end setup    
    30ec:	84 e4       	ldi	r24, 0x44	; 68
    30ee:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	9f ee       	ldi	r25, 0xEF	; 239
    30f6:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
                                         //dec 239    
                                         //dec 0, i.e. horizontal ranges from 0 -> 239    
                                         //POR value is 0xEF00 anyway. This address must be set before RAM write    
   
    LCD_WrCmd(0x0045);LCD_WrDat(0x0000); //Vertical RAM address start position setting    
    30fa:	85 e4       	ldi	r24, 0x45	; 69
    30fc:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
                                         //0x0000 = dec 0   
    LCD_WrCmd(0x0046);LCD_WrDat(0x013F); //Vertical RAM address end position setting (0x013F = dec 319)   
    3108:	86 e4       	ldi	r24, 0x46	; 70
    310a:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    310e:	8f e3       	ldi	r24, 0x3F	; 63
    3110:	91 e0       	ldi	r25, 0x01	; 1
    3112:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
   
        // 2nd Screen driving position   
//      LCD_WrCmd(0x004A);LCD_WrDat(0x0000); // Start position. 0   
//      LCD_WrCmd(0x004B);LCD_WrDat(0x0000); // End position.   0   
    LCD_WaitMs(20);    
    3116:	84 e1       	ldi	r24, 0x14	; 20
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_WaitMs>
    //gamma control    
    LCD_WrCmd(0x0030);LCD_WrDat(0x0707);   
    311e:	80 e3       	ldi	r24, 0x30	; 48
    3120:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3124:	87 e0       	ldi	r24, 0x07	; 7
    3126:	97 e0       	ldi	r25, 0x07	; 7
    3128:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0031);LCD_WrDat(0x0704);   
    312c:	81 e3       	ldi	r24, 0x31	; 49
    312e:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3132:	84 e0       	ldi	r24, 0x04	; 4
    3134:	97 e0       	ldi	r25, 0x07	; 7
    3136:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0032);LCD_WrDat(0x0204);   
    313a:	82 e3       	ldi	r24, 0x32	; 50
    313c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3140:	84 e0       	ldi	r24, 0x04	; 4
    3142:	92 e0       	ldi	r25, 0x02	; 2
    3144:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0033);LCD_WrDat(0x0201);   
    3148:	83 e3       	ldi	r24, 0x33	; 51
    314a:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	92 e0       	ldi	r25, 0x02	; 2
    3152:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0034);LCD_WrDat(0x0203);   
    3156:	84 e3       	ldi	r24, 0x34	; 52
    3158:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    315c:	83 e0       	ldi	r24, 0x03	; 3
    315e:	92 e0       	ldi	r25, 0x02	; 2
    3160:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0035);LCD_WrDat(0x0204);   
    3164:	85 e3       	ldi	r24, 0x35	; 53
    3166:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    316a:	84 e0       	ldi	r24, 0x04	; 4
    316c:	92 e0       	ldi	r25, 0x02	; 2
    316e:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0036);LCD_WrDat(0x0204);   
    3172:	86 e3       	ldi	r24, 0x36	; 54
    3174:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3178:	84 e0       	ldi	r24, 0x04	; 4
    317a:	92 e0       	ldi	r25, 0x02	; 2
    317c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x0037);LCD_WrDat(0x0502);   
    3180:	87 e3       	ldi	r24, 0x37	; 55
    3182:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	95 e0       	ldi	r25, 0x05	; 5
    318a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x003A);LCD_WrDat(0x0302);   
    318e:	8a e3       	ldi	r24, 0x3A	; 58
    3190:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	93 e0       	ldi	r25, 0x03	; 3
    3198:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x003B);LCD_WrDat(0x0500);   
    319c:	8b e3       	ldi	r24, 0x3B	; 59
    319e:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	95 e0       	ldi	r25, 0x05	; 5
    31a6:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
   
    LCD_WaitMs(20);   
    31aa:	84 e1       	ldi	r24, 0x14	; 20
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <LCD_WaitMs>
    31b2:	08 95       	ret

000031b4 <LCD_SetCursor>:
}       
   
void LCD_SetCursor(unsigned int x, unsigned int y)   
{   
    31b4:	cf 93       	push	r28
    31b6:	df 93       	push	r29
    31b8:	eb 01       	movw	r28, r22
#ifdef Horizontal   
    LCD_SetReg(0x4E,x); // initial settings for the GDDRAM X address in the address counter (AC).   
    31ba:	bc 01       	movw	r22, r24
    31bc:	8e e4       	ldi	r24, 0x4E	; 78
    31be:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <LCD_SetReg>
    LCD_SetReg(0x4F,y); // initial settings for the GDDRAM Y address in the address counter (AC).   
    31c2:	be 01       	movw	r22, r28
    31c4:	8f e4       	ldi	r24, 0x4F	; 79
    31c6:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <LCD_SetReg>
#else   
    LCD_SetReg(0x4E,y); // initial settings for the GDDRAM X address in the address counter (AC).   
    LCD_SetReg(0x4F,x); // initial settings for the GDDRAM Y address in the address counter (AC).   
#endif   
    LCD_WrCmd(0x22);    
    31ca:	82 e2       	ldi	r24, 0x22	; 34
    31cc:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
}   
    31d0:	df 91       	pop	r29
    31d2:	cf 91       	pop	r28
    31d4:	08 95       	ret

000031d6 <LCD_SetArea>:
     
void LCD_SetArea(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)   
{   
    31d6:	df 92       	push	r13
    31d8:	ef 92       	push	r14
    31da:	ff 92       	push	r15
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	ec 01       	movw	r28, r24
    31e6:	8b 01       	movw	r16, r22
    31e8:	d4 2e       	mov	r13, r20
    31ea:	79 01       	movw	r14, r18
#ifdef Horizontal   
    LCD_WrCmd(0x44); LCD_WrDat((x2 << 8) | x1);    // Source RAM address window    
    31ec:	84 e4       	ldi	r24, 0x44	; 68
    31ee:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	9d 2d       	mov	r25, r13
    31f8:	8c 2b       	or	r24, r28
    31fa:	9d 2b       	or	r25, r29
    31fc:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x45); LCD_WrDat(y1);    // Gate RAM address window    
    3200:	85 e4       	ldi	r24, 0x45	; 69
    3202:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3206:	c8 01       	movw	r24, r16
    3208:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    LCD_WrCmd(0x46); LCD_WrDat(y2);    // Gate RAM address window    
    320c:	86 e4       	ldi	r24, 0x46	; 70
    320e:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_WrCmd>
    3212:	c7 01       	movw	r24, r14
    3214:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
#else   
    LCD_WrCmd(0x44); LCD_WrDat((y2 << 8) | y1);    // Source RAM address window    
    LCD_WrCmd(0x45); LCD_WrDat(x1);    // Gate RAM address window    
    LCD_WrCmd(0x46); LCD_WrDat(x2);    // Gate RAM address window    
#endif   
    LCD_SetCursor(x1, y1);;   
    3218:	b8 01       	movw	r22, r16
    321a:	ce 01       	movw	r24, r28
    321c:	0e 94 da 18 	call	0x31b4	; 0x31b4 <LCD_SetCursor>
}   
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	1f 91       	pop	r17
    3226:	0f 91       	pop	r16
    3228:	ff 90       	pop	r15
    322a:	ef 90       	pop	r14
    322c:	df 90       	pop	r13
    322e:	08 95       	ret

00003230 <LCD_PutPixel>:
   
void LCD_PutPixel(unsigned int x, unsigned int y)   
{   
    LCD_SetCursor(x,y);   
    3230:	0e 94 da 18 	call	0x31b4	; 0x31b4 <LCD_SetCursor>
    LCD_WrDat(_color);   
    3234:	80 91 78 00 	lds	r24, 0x0078
    3238:	90 91 79 00 	lds	r25, 0x0079
    323c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    3240:	08 95       	ret

00003242 <LCD_Bar>:
}   
   
void LCD_Bar(unsigned int left, unsigned int top, unsigned int right, unsigned int bottom, unsigned int color)   
{   
    3242:	6f 92       	push	r6
    3244:	7f 92       	push	r7
    3246:	8f 92       	push	r8
    3248:	9f 92       	push	r9
    324a:	af 92       	push	r10
    324c:	bf 92       	push	r11
    324e:	cf 92       	push	r12
    3250:	df 92       	push	r13
    3252:	ef 92       	push	r14
    3254:	ff 92       	push	r15
    3256:	0f 93       	push	r16
    3258:	1f 93       	push	r17
    325a:	cf 93       	push	r28
    325c:	df 93       	push	r29
    325e:	5c 01       	movw	r10, r24
    3260:	6b 01       	movw	r12, r22
    3262:	7a 01       	movw	r14, r20
    3264:	49 01       	movw	r8, r18
    register unsigned int x,y;   
   
    LCD_SetArea(left, top, right, bottom);   
    3266:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_SetArea>
    for(y=top; y<=bottom; y++)   
    326a:	8c 14       	cp	r8, r12
    326c:	9d 04       	cpc	r9, r13
    326e:	b0 f0       	brcs	.+44     	; 0x329c <LCD_Bar+0x5a>
    {   
        for(x=left; x<=right; x++)   
    3270:	6a 2c       	mov	r6, r10
    3272:	7b 2c       	mov	r7, r11
    3274:	0d c0       	rjmp	.+26     	; 0x3290 <LCD_Bar+0x4e>
        {   
            LCD_WrDat(color);   
    3276:	c8 01       	movw	r24, r16
    3278:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_WrDat>
    register unsigned int x,y;   
   
    LCD_SetArea(left, top, right, bottom);   
    for(y=top; y<=bottom; y++)   
    {   
        for(x=left; x<=right; x++)   
    327c:	21 96       	adiw	r28, 0x01	; 1
    327e:	ec 16       	cp	r14, r28
    3280:	fd 06       	cpc	r15, r29
    3282:	c8 f7       	brcc	.-14     	; 0x3276 <LCD_Bar+0x34>
void LCD_Bar(unsigned int left, unsigned int top, unsigned int right, unsigned int bottom, unsigned int color)   
{   
    register unsigned int x,y;   
   
    LCD_SetArea(left, top, right, bottom);   
    for(y=top; y<=bottom; y++)   
    3284:	8f ef       	ldi	r24, 0xFF	; 255
    3286:	c8 1a       	sub	r12, r24
    3288:	d8 0a       	sbc	r13, r24
    328a:	8c 14       	cp	r8, r12
    328c:	9d 04       	cpc	r9, r13
    328e:	30 f0       	brcs	.+12     	; 0x329c <LCD_Bar+0x5a>
    {   
        for(x=left; x<=right; x++)   
    3290:	ea 14       	cp	r14, r10
    3292:	fb 04       	cpc	r15, r11
    3294:	b8 f3       	brcs	.-18     	; 0x3284 <LCD_Bar+0x42>
    3296:	c6 2d       	mov	r28, r6
    3298:	d7 2d       	mov	r29, r7
    329a:	ed cf       	rjmp	.-38     	; 0x3276 <LCD_Bar+0x34>
        {   
            LCD_WrDat(color);   
        }   
    }   
    LCD_SetArea(0, 0, GetMaxX(), GetMaxY());   
    329c:	2f e3       	ldi	r18, 0x3F	; 63
    329e:	31 e0       	ldi	r19, 0x01	; 1
    32a0:	4f ee       	ldi	r20, 0xEF	; 239
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	70 e0       	ldi	r23, 0x00	; 0
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_SetArea>
}   
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	ff 90       	pop	r15
    32ba:	ef 90       	pop	r14
    32bc:	df 90       	pop	r13
    32be:	cf 90       	pop	r12
    32c0:	bf 90       	pop	r11
    32c2:	af 90       	pop	r10
    32c4:	9f 90       	pop	r9
    32c6:	8f 90       	pop	r8
    32c8:	7f 90       	pop	r7
    32ca:	6f 90       	pop	r6
    32cc:	08 95       	ret

000032ce <LCD_Clear>:
   
void LCD_Clear(unsigned int color)   
{   
    32ce:	0f 93       	push	r16
    32d0:	1f 93       	push	r17
//  LCD_WrCmd(0x0007);LCD_WrDat(0x0221); // Display Control: display off   
    LCD_Bar(0, 0, GetMaxX(), GetMaxY(), color);   
    32d2:	8c 01       	movw	r16, r24
    32d4:	2f e3       	ldi	r18, 0x3F	; 63
    32d6:	31 e0       	ldi	r19, 0x01	; 1
    32d8:	4f ee       	ldi	r20, 0xEF	; 239
    32da:	50 e0       	ldi	r21, 0x00	; 0
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	70 e0       	ldi	r23, 0x00	; 0
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
//  LCD_WrCmd(0x0007);LCD_WrDat(0x0233); // Display Control: display on   
}   
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	08 95       	ret

000032ee <TCGetX>:

volatile unsigned short tc_x,tc_y;

unsigned short TCGetX(void) //call this after TCRead() to get X value
{
	return (tc_x);
    32ee:	80 91 69 02 	lds	r24, 0x0269
    32f2:	90 91 6a 02 	lds	r25, 0x026A
}
    32f6:	08 95       	ret

000032f8 <TCGetY>:

unsigned short TCGetY(void) //call this after TCRead() to get Y value
{
	return (tc_y);
    32f8:	80 91 6b 02 	lds	r24, 0x026B
    32fc:	90 91 6c 02 	lds	r25, 0x026C
}
    3300:	08 95       	ret

00003302 <TCIsPenOn>:

unsigned char TCIsPenOn(void) //TC_PEN_PIN is 0 when the screen is pressed
{	
	if (!Rdb(PINB, PB2))
    3302:	86 b3       	in	r24, 0x16	; 22
    3304:	82 fb       	bst	r24, 2
    3306:	88 27       	eor	r24, r24
    3308:	80 f9       	bld	r24, 0
		return (1); 
	return (0);
}
    330a:	91 e0       	ldi	r25, 0x01	; 1
    330c:	89 27       	eor	r24, r25
    330e:	08 95       	ret

00003310 <TCRead>:
	Setb(PORTB, PB4);
	TCRead(); //Wake it up
}

void TCRead(void) //read analog voltage
{
    3310:	af 92       	push	r10
    3312:	bf 92       	push	r11
    3314:	cf 92       	push	r12
    3316:	df 92       	push	r13
    3318:	ef 92       	push	r14
    331a:	ff 92       	push	r15
    331c:	0f 93       	push	r16
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
	spi_buf[0] = TC_CR_Y; //read Y first
    3322:	80 e9       	ldi	r24, 0x90	; 144
    3324:	80 93 61 02 	sts	0x0261, r24
	spi_buf[1] = 0; //2nd byte is not used
    3328:	0f 2e       	mov	r0, r31
    332a:	f2 e6       	ldi	r31, 0x62	; 98
    332c:	af 2e       	mov	r10, r31
    332e:	f2 e0       	ldi	r31, 0x02	; 2
    3330:	bf 2e       	mov	r11, r31
    3332:	f0 2d       	mov	r31, r0
    3334:	f5 01       	movw	r30, r10
    3336:	10 82       	st	Z, r1
	spi_buf[2] = TC_CR_X; //then read X
    3338:	0f 2e       	mov	r0, r31
    333a:	f3 e6       	ldi	r31, 0x63	; 99
    333c:	cf 2e       	mov	r12, r31
    333e:	f2 e0       	ldi	r31, 0x02	; 2
    3340:	df 2e       	mov	r13, r31
    3342:	f0 2d       	mov	r31, r0
    3344:	80 ed       	ldi	r24, 0xD0	; 208
    3346:	f6 01       	movw	r30, r12
    3348:	80 83       	st	Z, r24
	spi_buf[3] = 0; //3rd byte is not used
    334a:	0f 2e       	mov	r0, r31
    334c:	f4 e6       	ldi	r31, 0x64	; 100
    334e:	ef 2e       	mov	r14, r31
    3350:	f2 e0       	ldi	r31, 0x02	; 2
    3352:	ff 2e       	mov	r15, r31
    3354:	f0 2d       	mov	r31, r0
    3356:	f7 01       	movw	r30, r14
    3358:	10 82       	st	Z, r1
	spi_buf[4] = 0; //4th byte is not used
    335a:	c5 e6       	ldi	r28, 0x65	; 101
    335c:	d2 e0       	ldi	r29, 0x02	; 2
    335e:	18 82       	st	Y, r1

	SPIMasterEnable(SPI_RIS_FIRST,SPI_SAM_FIRST,SPI_CLK_DIV64,SPI_MSB_FIRST,SPI_INT_DISABLE);
    3360:	00 e0       	ldi	r16, 0x00	; 0
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	42 e0       	ldi	r20, 0x02	; 2
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <SPIMasterEnable>
																			 
	Orb(DDRB, PB4);	//set TC_CS to be output port
    336e:	bc 9a       	sbi	0x17, 4	; 23
	Clrb(PORTB, PB4); //clear TC_CS to 0
    3370:	c4 98       	cbi	0x18, 4	; 24

	SPIMasterTransfer(5,spi_buf); //transfer data for 5 cycles
    3372:	61 e6       	ldi	r22, 0x61	; 97
    3374:	72 e0       	ldi	r23, 0x02	; 2
    3376:	85 e0       	ldi	r24, 0x05	; 5
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <SPIMasterTransfer>

	Setb(PORTB, PB4); //set TC_CS to 1
    337e:	c4 9a       	sbi	0x18, 4	; 24

	SPIMasterDisable(); //disable interrupt
    3380:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <SPIMasterDisable>

	tc_y = (spi_buf[1] << 5); //arrange received data
    3384:	f5 01       	movw	r30, r10
    3386:	80 81       	ld	r24, Z
    3388:	f0 e2       	ldi	r31, 0x20	; 32
    338a:	8f 9f       	mul	r24, r31
    338c:	c0 01       	movw	r24, r0
    338e:	11 24       	eor	r1, r1
    3390:	90 93 6c 02 	sts	0x026C, r25
    3394:	80 93 6b 02 	sts	0x026B, r24
	tc_y |= (spi_buf[2] >> 3); //arrange received data
    3398:	80 91 6b 02 	lds	r24, 0x026B
    339c:	90 91 6c 02 	lds	r25, 0x026C
    33a0:	f6 01       	movw	r30, r12
    33a2:	20 81       	ld	r18, Z
    33a4:	26 95       	lsr	r18
    33a6:	26 95       	lsr	r18
    33a8:	26 95       	lsr	r18
    33aa:	82 2b       	or	r24, r18
    33ac:	90 93 6c 02 	sts	0x026C, r25
    33b0:	80 93 6b 02 	sts	0x026B, r24
	tc_x = (spi_buf[3] << 5);  //arrange received data
    33b4:	f7 01       	movw	r30, r14
    33b6:	80 81       	ld	r24, Z
    33b8:	f0 e2       	ldi	r31, 0x20	; 32
    33ba:	8f 9f       	mul	r24, r31
    33bc:	c0 01       	movw	r24, r0
    33be:	11 24       	eor	r1, r1
    33c0:	90 93 6a 02 	sts	0x026A, r25
    33c4:	80 93 69 02 	sts	0x0269, r24
	tc_y |= (spi_buf[4] >> 3); //arrange received data
    33c8:	80 91 6b 02 	lds	r24, 0x026B
    33cc:	90 91 6c 02 	lds	r25, 0x026C
    33d0:	28 81       	ld	r18, Y
    33d2:	26 95       	lsr	r18
    33d4:	26 95       	lsr	r18
    33d6:	26 95       	lsr	r18
    33d8:	82 2b       	or	r24, r18
    33da:	90 93 6c 02 	sts	0x026C, r25
    33de:	80 93 6b 02 	sts	0x026B, r24
}
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	0f 91       	pop	r16
    33e8:	ff 90       	pop	r15
    33ea:	ef 90       	pop	r14
    33ec:	df 90       	pop	r13
    33ee:	cf 90       	pop	r12
    33f0:	bf 90       	pop	r11
    33f2:	af 90       	pop	r10
    33f4:	08 95       	ret

000033f6 <TCInit>:

unsigned char spi_buf[8];

void TCInit(void)
{
	Setb(PORTB, PB4);
    33f6:	c4 9a       	sbi	0x18, 4	; 24
	TCRead(); //Wake it up
    33f8:	0e 94 88 19 	call	0x3310	; 0x3310 <TCRead>
    33fc:	08 95       	ret

000033fe <cal_posx>:

pstatus_t p_stat; /**< Status of event */


long cal_posx(unsigned short x)
{
    33fe:	ef 92       	push	r14
    3400:	ff 92       	push	r15
    3402:	0f 93       	push	r16
    3404:	1f 93       	push	r17
	long buf;
	buf = x - ccx;
    3406:	a0 e0       	ldi	r26, 0x00	; 0
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	40 91 8e 00 	lds	r20, 0x008E
    340e:	50 91 8f 00 	lds	r21, 0x008F
    3412:	60 91 90 00 	lds	r22, 0x0090
    3416:	70 91 91 00 	lds	r23, 0x0091
    341a:	7c 01       	movw	r14, r24
    341c:	8d 01       	movw	r16, r26
    341e:	e4 1a       	sub	r14, r20
    3420:	f5 0a       	sbc	r15, r21
    3422:	06 0b       	sbc	r16, r22
    3424:	17 0b       	sbc	r17, r23
    3426:	a8 01       	movw	r20, r16
    3428:	97 01       	movw	r18, r14
	buf = buf*cm1x;
    342a:	60 91 8a 00 	lds	r22, 0x008A
    342e:	70 91 8b 00 	lds	r23, 0x008B
    3432:	80 91 8c 00 	lds	r24, 0x008C
    3436:	90 91 8d 00 	lds	r25, 0x008D
    343a:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__mulsi3>
	buf = buf/cm2x;
    343e:	20 91 86 00 	lds	r18, 0x0086
    3442:	30 91 87 00 	lds	r19, 0x0087
    3446:	40 91 88 00 	lds	r20, 0x0088
    344a:	50 91 89 00 	lds	r21, 0x0089
    344e:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <__divmodsi4>
	buf = buf + chalfx;
    3452:	ca 01       	movw	r24, r20
    3454:	b9 01       	movw	r22, r18
    3456:	60 56       	subi	r22, 0x60	; 96
    3458:	7f 4f       	sbci	r23, 0xFF	; 255
    345a:	8f 4f       	sbci	r24, 0xFF	; 255
    345c:	9f 4f       	sbci	r25, 0xFF	; 255
	return (buf);
}
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	ff 90       	pop	r15
    3464:	ef 90       	pop	r14
    3466:	08 95       	ret

00003468 <cal_posy>:

long cal_posy(unsigned short y)
{
    3468:	ef 92       	push	r14
    346a:	ff 92       	push	r15
    346c:	0f 93       	push	r16
    346e:	1f 93       	push	r17
	long buf;
	buf = y - ccy;
    3470:	a0 e0       	ldi	r26, 0x00	; 0
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	40 91 82 00 	lds	r20, 0x0082
    3478:	50 91 83 00 	lds	r21, 0x0083
    347c:	60 91 84 00 	lds	r22, 0x0084
    3480:	70 91 85 00 	lds	r23, 0x0085
    3484:	7c 01       	movw	r14, r24
    3486:	8d 01       	movw	r16, r26
    3488:	e4 1a       	sub	r14, r20
    348a:	f5 0a       	sbc	r15, r21
    348c:	06 0b       	sbc	r16, r22
    348e:	17 0b       	sbc	r17, r23
    3490:	a8 01       	movw	r20, r16
    3492:	97 01       	movw	r18, r14
	buf = buf*cm1y;
    3494:	60 91 7e 00 	lds	r22, 0x007E
    3498:	70 91 7f 00 	lds	r23, 0x007F
    349c:	80 91 80 00 	lds	r24, 0x0080
    34a0:	90 91 81 00 	lds	r25, 0x0081
    34a4:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__mulsi3>
	buf = buf/cm2y;
    34a8:	20 91 7a 00 	lds	r18, 0x007A
    34ac:	30 91 7b 00 	lds	r19, 0x007B
    34b0:	40 91 7c 00 	lds	r20, 0x007C
    34b4:	50 91 7d 00 	lds	r21, 0x007D
    34b8:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <__divmodsi4>
	buf = buf + chalfy;
    34bc:	ca 01       	movw	r24, r20
    34be:	b9 01       	movw	r22, r18
    34c0:	68 58       	subi	r22, 0x88	; 136
    34c2:	7f 4f       	sbci	r23, 0xFF	; 255
    34c4:	8f 4f       	sbci	r24, 0xFF	; 255
    34c6:	9f 4f       	sbci	r25, 0xFF	; 255
	return (buf);
}
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	ff 90       	pop	r15
    34ce:	ef 90       	pop	r14
    34d0:	08 95       	ret

000034d2 <distance>:
		
	}
}


double distance(long lat1, long lon1, double lat2, double lon2, char unit) {
    34d2:	4f 92       	push	r4
    34d4:	5f 92       	push	r5
    34d6:	6f 92       	push	r6
    34d8:	7f 92       	push	r7
    34da:	8f 92       	push	r8
    34dc:	9f 92       	push	r9
    34de:	af 92       	push	r10
    34e0:	bf 92       	push	r11
    34e2:	cf 92       	push	r12
    34e4:	df 92       	push	r13
    34e6:	ef 92       	push	r14
    34e8:	ff 92       	push	r15
    34ea:	0f 93       	push	r16
    34ec:	1f 93       	push	r17
    34ee:	cf 93       	push	r28
    34f0:	df 93       	push	r29
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	60 97       	sbiw	r28, 0x10	; 16
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61
    3502:	2d 83       	std	Y+5, r18	; 0x05
    3504:	3e 83       	std	Y+6, r19	; 0x06
    3506:	4f 83       	std	Y+7, r20	; 0x07
    3508:	58 87       	std	Y+8, r21	; 0x08
    350a:	27 01       	movw	r4, r14
    350c:	38 01       	movw	r6, r16
    350e:	18 2d       	mov	r17, r8
	double theta; /**< Longitude difference  */
	double dist; /**< Distance that is going to be returned to the caller */
	double dLat1 = lat1 / 10000000.0; /**< Double precision of first point latitude */
    3510:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    3514:	20 e8       	ldi	r18, 0x80	; 128
    3516:	36 e9       	ldi	r19, 0x96	; 150
    3518:	48 e1       	ldi	r20, 0x18	; 24
    351a:	5b e4       	ldi	r21, 0x4B	; 75
    351c:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divsf3>
	return (dist);
}


double deg2rad(double deg) {
	return (deg * pi / 180);
    3520:	2b ed       	ldi	r18, 0xDB	; 219
    3522:	3f e0       	ldi	r19, 0x0F	; 15
    3524:	49 e4       	ldi	r20, 0x49	; 73
    3526:	50 e4       	ldi	r21, 0x40	; 64
    3528:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	44 e3       	ldi	r20, 0x34	; 52
    3532:	53 e4       	ldi	r21, 0x43	; 67
    3534:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divsf3>
    3538:	69 83       	std	Y+1, r22	; 0x01
    353a:	7a 83       	std	Y+2, r23	; 0x02
    353c:	8b 83       	std	Y+3, r24	; 0x03
    353e:	9c 83       	std	Y+4, r25	; 0x04
	double theta; /**< Longitude difference  */
	double dist; /**< Distance that is going to be returned to the caller */
	double dLat1 = lat1 / 10000000.0; /**< Double precision of first point latitude */
	double dLon1 = lon1 / 10000000.0; /**< Double precision of first point longitude */
	theta = dLon1 - lon2;
	dist = sin(deg2rad(dLat1)) * sin(deg2rad(lat2)) + cos(deg2rad(dLat1)) * cos(deg2rad(lat2)) * cos(deg2rad(theta));
    3540:	0e 94 91 35 	call	0x6b22	; 0x6b22 <sin>
    3544:	69 87       	std	Y+9, r22	; 0x09
    3546:	7a 87       	std	Y+10, r23	; 0x0a
    3548:	8b 87       	std	Y+11, r24	; 0x0b
    354a:	9c 87       	std	Y+12, r25	; 0x0c
	return (dist);
}


double deg2rad(double deg) {
	return (deg * pi / 180);
    354c:	2b ed       	ldi	r18, 0xDB	; 219
    354e:	3f e0       	ldi	r19, 0x0F	; 15
    3550:	49 e4       	ldi	r20, 0x49	; 73
    3552:	50 e4       	ldi	r21, 0x40	; 64
    3554:	c3 01       	movw	r24, r6
    3556:	b2 01       	movw	r22, r4
    3558:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	44 e3       	ldi	r20, 0x34	; 52
    3562:	53 e4       	ldi	r21, 0x43	; 67
    3564:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divsf3>
    3568:	2b 01       	movw	r4, r22
    356a:	3c 01       	movw	r6, r24
	double theta; /**< Longitude difference  */
	double dist; /**< Distance that is going to be returned to the caller */
	double dLat1 = lat1 / 10000000.0; /**< Double precision of first point latitude */
	double dLon1 = lon1 / 10000000.0; /**< Double precision of first point longitude */
	theta = dLon1 - lon2;
	dist = sin(deg2rad(dLat1)) * sin(deg2rad(lat2)) + cos(deg2rad(dLat1)) * cos(deg2rad(lat2)) * cos(deg2rad(theta));
    356c:	0e 94 91 35 	call	0x6b22	; 0x6b22 <sin>
    3570:	6d 87       	std	Y+13, r22	; 0x0d
    3572:	7e 87       	std	Y+14, r23	; 0x0e
    3574:	8f 87       	std	Y+15, r24	; 0x0f
    3576:	98 8b       	std	Y+16, r25	; 0x10
    3578:	69 81       	ldd	r22, Y+1	; 0x01
    357a:	7a 81       	ldd	r23, Y+2	; 0x02
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	9c 81       	ldd	r25, Y+4	; 0x04
    3580:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <cos>
    3584:	69 83       	std	Y+1, r22	; 0x01
    3586:	7a 83       	std	Y+2, r23	; 0x02
    3588:	8b 83       	std	Y+3, r24	; 0x03
    358a:	9c 83       	std	Y+4, r25	; 0x04
    358c:	c3 01       	movw	r24, r6
    358e:	b2 01       	movw	r22, r4
    3590:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <cos>
    3594:	2b 01       	movw	r4, r22
    3596:	3c 01       	movw	r6, r24

double distance(long lat1, long lon1, double lat2, double lon2, char unit) {
	double theta; /**< Longitude difference  */
	double dist; /**< Distance that is going to be returned to the caller */
	double dLat1 = lat1 / 10000000.0; /**< Double precision of first point latitude */
	double dLon1 = lon1 / 10000000.0; /**< Double precision of first point longitude */
    3598:	6d 81       	ldd	r22, Y+5	; 0x05
    359a:	7e 81       	ldd	r23, Y+6	; 0x06
    359c:	8f 81       	ldd	r24, Y+7	; 0x07
    359e:	98 85       	ldd	r25, Y+8	; 0x08
    35a0:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    35a4:	20 e8       	ldi	r18, 0x80	; 128
    35a6:	36 e9       	ldi	r19, 0x96	; 150
    35a8:	48 e1       	ldi	r20, 0x18	; 24
    35aa:	5b e4       	ldi	r21, 0x4B	; 75
    35ac:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divsf3>
	theta = dLon1 - lon2;
    35b0:	a6 01       	movw	r20, r12
    35b2:	95 01       	movw	r18, r10
    35b4:	0e 94 06 33 	call	0x660c	; 0x660c <__subsf3>
	return (dist);
}


double deg2rad(double deg) {
	return (deg * pi / 180);
    35b8:	2b ed       	ldi	r18, 0xDB	; 219
    35ba:	3f e0       	ldi	r19, 0x0F	; 15
    35bc:	49 e4       	ldi	r20, 0x49	; 73
    35be:	50 e4       	ldi	r21, 0x40	; 64
    35c0:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	44 e3       	ldi	r20, 0x34	; 52
    35ca:	53 e4       	ldi	r21, 0x43	; 67
    35cc:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divsf3>
	double theta; /**< Longitude difference  */
	double dist; /**< Distance that is going to be returned to the caller */
	double dLat1 = lat1 / 10000000.0; /**< Double precision of first point latitude */
	double dLon1 = lon1 / 10000000.0; /**< Double precision of first point longitude */
	theta = dLon1 - lon2;
	dist = sin(deg2rad(dLat1)) * sin(deg2rad(lat2)) + cos(deg2rad(dLat1)) * cos(deg2rad(lat2)) * cos(deg2rad(theta));
    35d0:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <cos>
    35d4:	6d 83       	std	Y+5, r22	; 0x05
    35d6:	7e 83       	std	Y+6, r23	; 0x06
    35d8:	8f 83       	std	Y+7, r24	; 0x07
    35da:	98 87       	std	Y+8, r25	; 0x08
    35dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    35de:	3e 85       	ldd	r19, Y+14	; 0x0e
    35e0:	4f 85       	ldd	r20, Y+15	; 0x0f
    35e2:	58 89       	ldd	r21, Y+16	; 0x10
    35e4:	69 85       	ldd	r22, Y+9	; 0x09
    35e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    35e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    35ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    35ec:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    35f0:	4b 01       	movw	r8, r22
    35f2:	5c 01       	movw	r10, r24
    35f4:	a3 01       	movw	r20, r6
    35f6:	92 01       	movw	r18, r4
    35f8:	69 81       	ldd	r22, Y+1	; 0x01
    35fa:	7a 81       	ldd	r23, Y+2	; 0x02
    35fc:	8b 81       	ldd	r24, Y+3	; 0x03
    35fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3600:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    3604:	2d 81       	ldd	r18, Y+5	; 0x05
    3606:	3e 81       	ldd	r19, Y+6	; 0x06
    3608:	4f 81       	ldd	r20, Y+7	; 0x07
    360a:	58 85       	ldd	r21, Y+8	; 0x08
    360c:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    3610:	9b 01       	movw	r18, r22
    3612:	ac 01       	movw	r20, r24
    3614:	c5 01       	movw	r24, r10
    3616:	b4 01       	movw	r22, r8
    3618:	0e 94 07 33 	call	0x660e	; 0x660e <__addsf3>
	dist = acos(dist);
    361c:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <acos>
double deg2rad(double deg) {
	return (deg * pi / 180);
}

double rad2deg(double rad) {
	return (rad * 180 / pi);
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	44 e3       	ldi	r20, 0x34	; 52
    3626:	53 e4       	ldi	r21, 0x43	; 67
    3628:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    362c:	2b ed       	ldi	r18, 0xDB	; 219
    362e:	3f e0       	ldi	r19, 0x0F	; 15
    3630:	49 e4       	ldi	r20, 0x49	; 73
    3632:	50 e4       	ldi	r21, 0x40	; 64
    3634:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divsf3>
	double dLon1 = lon1 / 10000000.0; /**< Double precision of first point longitude */
	theta = dLon1 - lon2;
	dist = sin(deg2rad(dLat1)) * sin(deg2rad(lat2)) + cos(deg2rad(dLat1)) * cos(deg2rad(lat2)) * cos(deg2rad(theta));
	dist = acos(dist);
	dist = rad2deg(dist);
	dist = dist * 60 * 1.1515;
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e7       	ldi	r20, 0x70	; 112
    363e:	52 e4       	ldi	r21, 0x42	; 66
    3640:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    3644:	2a e5       	ldi	r18, 0x5A	; 90
    3646:	34 e6       	ldi	r19, 0x64	; 100
    3648:	43 e9       	ldi	r20, 0x93	; 147
    364a:	5f e3       	ldi	r21, 0x3F	; 63
    364c:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
	switch(unit) {
    3650:	1b 34       	cpi	r17, 0x4B	; 75
    3652:	19 f0       	breq	.+6      	; 0x365a <distance+0x188>
    3654:	1e 34       	cpi	r17, 0x4E	; 78
    3656:	41 f0       	breq	.+16     	; 0x3668 <distance+0x196>
    3658:	0d c0       	rjmp	.+26     	; 0x3674 <distance+0x1a2>
		case 'M':
		break;
		case 'K':
		dist = dist * 1.609344;
    365a:	2c ef       	ldi	r18, 0xFC	; 252
    365c:	3e ef       	ldi	r19, 0xFE	; 254
    365e:	4d ec       	ldi	r20, 0xCD	; 205
    3660:	5f e3       	ldi	r21, 0x3F	; 63
    3662:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
		break;
    3666:	06 c0       	rjmp	.+12     	; 0x3674 <distance+0x1a2>
		case 'N':
		dist = dist * 0.8684;
    3668:	26 e7       	ldi	r18, 0x76	; 118
    366a:	3f e4       	ldi	r19, 0x4F	; 79
    366c:	4e e5       	ldi	r20, 0x5E	; 94
    366e:	5f e3       	ldi	r21, 0x3F	; 63
    3670:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
		break;
	}
	return (dist);
}
    3674:	60 96       	adiw	r28, 0x10	; 16
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	f8 94       	cli
    367a:	de bf       	out	0x3e, r29	; 62
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	cd bf       	out	0x3d, r28	; 61
    3680:	df 91       	pop	r29
    3682:	cf 91       	pop	r28
    3684:	1f 91       	pop	r17
    3686:	0f 91       	pop	r16
    3688:	ff 90       	pop	r15
    368a:	ef 90       	pop	r14
    368c:	df 90       	pop	r13
    368e:	cf 90       	pop	r12
    3690:	bf 90       	pop	r11
    3692:	af 90       	pop	r10
    3694:	9f 90       	pop	r9
    3696:	8f 90       	pop	r8
    3698:	7f 90       	pop	r7
    369a:	6f 90       	pop	r6
    369c:	5f 90       	pop	r5
    369e:	4f 90       	pop	r4
    36a0:	08 95       	ret

000036a2 <parseHex>:
	return (rad * 180 / pi);
}


uint8_t parseHex(char c) {
	if (c < '0')
    36a2:	80 33       	cpi	r24, 0x30	; 48
    36a4:	50 f0       	brcs	.+20     	; 0x36ba <parseHex+0x18>
	return 0;
	if (c <= '9')
    36a6:	8a 33       	cpi	r24, 0x3A	; 58
    36a8:	10 f4       	brcc	.+4      	; 0x36ae <parseHex+0xc>
	return c - '0';
    36aa:	80 53       	subi	r24, 0x30	; 48
    36ac:	08 95       	ret
	if (c < 'A')
    36ae:	9f eb       	ldi	r25, 0xBF	; 191
    36b0:	98 0f       	add	r25, r24
    36b2:	96 30       	cpi	r25, 0x06	; 6
    36b4:	20 f4       	brcc	.+8      	; 0x36be <parseHex+0x1c>
	return 0;
	if (c <= 'F')
	return (c - 'A')+10;
    36b6:	87 53       	subi	r24, 0x37	; 55
    36b8:	08 95       	ret
}


uint8_t parseHex(char c) {
	if (c < '0')
	return 0;
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	08 95       	ret
	if (c <= '9')
	return c - '0';
	if (c < 'A')
	return 0;
    36be:	80 e0       	ldi	r24, 0x00	; 0
	if (c <= 'F')
	return (c - 'A')+10;
	// if (c > 'F')
	return 0;
    36c0:	08 95       	ret

000036c2 <readGPS>:
	
	 return 0;
}


void readGPS() {
    36c2:	2f 92       	push	r2
    36c4:	3f 92       	push	r3
    36c6:	4f 92       	push	r4
    36c8:	5f 92       	push	r5
    36ca:	6f 92       	push	r6
    36cc:	7f 92       	push	r7
    36ce:	8f 92       	push	r8
    36d0:	9f 92       	push	r9
    36d2:	af 92       	push	r10
    36d4:	bf 92       	push	r11
    36d6:	cf 92       	push	r12
    36d8:	df 92       	push	r13
    36da:	ef 92       	push	r14
    36dc:	ff 92       	push	r15
    36de:	0f 93       	push	r16
    36e0:	1f 93       	push	r17
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
    36ea:	cf 58       	subi	r28, 0x8F	; 143
    36ec:	d1 09       	sbc	r29, r1
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	f8 94       	cli
    36f2:	de bf       	out	0x3e, r29	; 62
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	cd bf       	out	0x3d, r28	; 61
		char tHours[3]; /**< A temporary string storing hours */
		char tMinutes[3]; /**< A temporary string storing minutes */
		char tSeconds[3]; /**< A temporary string storing seconds */
		char *p; /**< Pointer used for sliding through an array of chars */
		int32_t degree; /**< A degree from the degree buffer is stored here */
		currentReading.lat[1] = '\0';
    36f8:	10 92 9f 02 	sts	0x029F, r1

	while(currentReading.j <= 119) {
    36fc:	0f 2e       	mov	r0, r31
    36fe:	f0 eb       	ldi	r31, 0xB0	; 176
    3700:	ef 2e       	mov	r14, r31
    3702:	f2 e0       	ldi	r31, 0x02	; 2
    3704:	ff 2e       	mov	r15, r31
    3706:	f0 2d       	mov	r31, r0
    3708:	a1 2c       	mov	r10, r1
    370a:	b1 2c       	mov	r11, r1
    370c:	20 c0       	rjmp	.+64     	; 0x374e <readGPS+0x8c>
		
	
	for (int i = 0; i < serialAvailable(); i++) {
			 if (serialHasChar(i)) {
    370e:	80 2f       	mov	r24, r16
    3710:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <serialHasChar>
    3714:	88 23       	and	r24, r24
    3716:	99 f0       	breq	.+38     	; 0x373e <readGPS+0x7c>
				 fullLine[currentReading.j] = serialGet(i);
    3718:	d7 01       	movw	r26, r14
    371a:	cd 90       	ld	r12, X+
    371c:	dc 90       	ld	r13, X
    371e:	80 2f       	mov	r24, r16
    3720:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <serialGet>
    3724:	eb e0       	ldi	r30, 0x0B	; 11
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	ec 0f       	add	r30, r28
    372a:	fd 1f       	adc	r31, r29
    372c:	ec 0d       	add	r30, r12
    372e:	fd 1d       	adc	r31, r13
    3730:	80 83       	st	Z, r24
				 currentReading.j++;
    3732:	f7 01       	movw	r30, r14
    3734:	80 81       	ld	r24, Z
    3736:	91 81       	ldd	r25, Z+1	; 0x01
    3738:	01 96       	adiw	r24, 0x01	; 1
    373a:	91 83       	std	Z+1, r25	; 0x01
    373c:	80 83       	st	Z, r24
		currentReading.lat[1] = '\0';

	while(currentReading.j <= 119) {
		
	
	for (int i = 0; i < serialAvailable(); i++) {
    373e:	0f 5f       	subi	r16, 0xFF	; 255
    3740:	1f 4f       	sbci	r17, 0xFF	; 255
    3742:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialAvailable>
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	08 17       	cp	r16, r24
    374a:	19 07       	cpc	r17, r25
    374c:	04 f3       	brlt	.-64     	; 0x370e <readGPS+0x4c>
		char tSeconds[3]; /**< A temporary string storing seconds */
		char *p; /**< Pointer used for sliding through an array of chars */
		int32_t degree; /**< A degree from the degree buffer is stored here */
		currentReading.lat[1] = '\0';

	while(currentReading.j <= 119) {
    374e:	d7 01       	movw	r26, r14
    3750:	8d 91       	ld	r24, X+
    3752:	9c 91       	ld	r25, X
    3754:	88 37       	cpi	r24, 0x78	; 120
    3756:	91 05       	cpc	r25, r1
    3758:	1c f4       	brge	.+6      	; 0x3760 <readGPS+0x9e>
    375a:	0a 2d       	mov	r16, r10
    375c:	1b 2d       	mov	r17, r11
    375e:	f1 cf       	rjmp	.-30     	; 0x3742 <readGPS+0x80>
		 }
		 
	}


		if (currentReading.j >= 119) {
    3760:	87 37       	cpi	r24, 0x77	; 119
    3762:	91 05       	cpc	r25, r1
    3764:	0c f4       	brge	.+2      	; 0x3768 <readGPS+0xa6>
    3766:	44 c3       	rjmp	.+1672   	; 0x3df0 <readGPS+0x72e>
			currentReading.j = 0;
    3768:	10 92 b1 02 	sts	0x02B1, r1
    376c:	10 92 b0 02 	sts	0x02B0, r1
			
			  // do checksum check

			  // first look if we even have one
			  if (fullLine[strlen(fullLine)-4] == '*') {
    3770:	fe 01       	movw	r30, r28
    3772:	3b 96       	adiw	r30, 0x0b	; 11
    3774:	df 01       	movw	r26, r30
    3776:	0d 90       	ld	r0, X+
    3778:	00 20       	and	r0, r0
    377a:	e9 f7       	brne	.-6      	; 0x3776 <readGPS+0xb4>
    377c:	11 97       	sbiw	r26, 0x01	; 1
    377e:	7d 01       	movw	r14, r26
    3780:	ee 1a       	sub	r14, r30
    3782:	ff 0a       	sbc	r15, r31
    3784:	87 01       	movw	r16, r14
    3786:	04 50       	subi	r16, 0x04	; 4
    3788:	11 09       	sbc	r17, r1
    378a:	e0 0f       	add	r30, r16
    378c:	f1 1f       	adc	r31, r17
    378e:	80 81       	ld	r24, Z
    3790:	8a 32       	cpi	r24, 0x2A	; 42
    3792:	51 f5       	brne	.+84     	; 0x37e8 <readGPS+0x126>
				  uint16_t sum = parseHex(fullLine[strlen(fullLine)-3]) * 16;
    3794:	fe 01       	movw	r30, r28
    3796:	ee 0d       	add	r30, r14
    3798:	ff 1d       	adc	r31, r15
    379a:	80 85       	ldd	r24, Z+8	; 0x08
    379c:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <parseHex>
    37a0:	b0 e1       	ldi	r27, 0x10	; 16
    37a2:	8b 9f       	mul	r24, r27
    37a4:	60 01       	movw	r12, r0
    37a6:	11 24       	eor	r1, r1
				  sum += parseHex(fullLine[strlen(fullLine)-2]);
    37a8:	de 01       	movw	r26, r28
    37aa:	ae 0d       	add	r26, r14
    37ac:	bf 1d       	adc	r27, r15
    37ae:	19 96       	adiw	r26, 0x09	; 9
    37b0:	8c 91       	ld	r24, X
    37b2:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <parseHex>
    37b6:	f6 01       	movw	r30, r12
    37b8:	e8 0f       	add	r30, r24
    37ba:	f1 1d       	adc	r31, r1
    37bc:	cf 01       	movw	r24, r30
				  
				  // check checksum
				  for (uint8_t i=1; i < (strlen(fullLine)-4); i++) {
    37be:	02 30       	cpi	r16, 0x02	; 2
    37c0:	11 05       	cpc	r17, r1
    37c2:	78 f0       	brcs	.+30     	; 0x37e2 <readGPS+0x120>
    37c4:	41 e0       	ldi	r20, 0x01	; 1
					  sum ^= fullLine[i];
    37c6:	eb e0       	ldi	r30, 0x0B	; 11
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	ec 0f       	add	r30, r28
    37cc:	fd 1f       	adc	r31, r29
    37ce:	e4 0f       	add	r30, r20
    37d0:	f1 1d       	adc	r31, r1
    37d2:	20 81       	ld	r18, Z
    37d4:	82 27       	eor	r24, r18
			  if (fullLine[strlen(fullLine)-4] == '*') {
				  uint16_t sum = parseHex(fullLine[strlen(fullLine)-3]) * 16;
				  sum += parseHex(fullLine[strlen(fullLine)-2]);
				  
				  // check checksum
				  for (uint8_t i=1; i < (strlen(fullLine)-4); i++) {
    37d6:	4f 5f       	subi	r20, 0xFF	; 255
    37d8:	24 2f       	mov	r18, r20
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	20 17       	cp	r18, r16
    37de:	31 07       	cpc	r19, r17
    37e0:	90 f3       	brcs	.-28     	; 0x37c6 <readGPS+0x104>
					  sum ^= fullLine[i];
				  }
				  if (sum != 0) {
    37e2:	89 2b       	or	r24, r25
    37e4:	09 f0       	breq	.+2      	; 0x37e8 <readGPS+0x126>
    37e6:	04 c3       	rjmp	.+1544   	; 0x3df0 <readGPS+0x72e>
					  // bad checksum :(
					  return;
				  }
			  }
			
			memset(tHours, 0, 3);
    37e8:	cd 57       	subi	r28, 0x7D	; 125
    37ea:	df 4f       	sbci	r29, 0xFF	; 255
    37ec:	18 82       	st	Y, r1
    37ee:	19 82       	std	Y+1, r1	; 0x01
    37f0:	1a 82       	std	Y+2, r1	; 0x02
    37f2:	c3 58       	subi	r28, 0x83	; 131
    37f4:	d0 40       	sbci	r29, 0x00	; 0
			memset(tMinutes, 0, 3);
    37f6:	ca 57       	subi	r28, 0x7A	; 122
    37f8:	df 4f       	sbci	r29, 0xFF	; 255
    37fa:	18 82       	st	Y, r1
    37fc:	19 82       	std	Y+1, r1	; 0x01
    37fe:	1a 82       	std	Y+2, r1	; 0x02
    3800:	c6 58       	subi	r28, 0x86	; 134
    3802:	d0 40       	sbci	r29, 0x00	; 0
			memset(tSeconds, 0, 3);
    3804:	c7 57       	subi	r28, 0x77	; 119
    3806:	df 4f       	sbci	r29, 0xFF	; 255
    3808:	18 82       	st	Y, r1
    380a:	19 82       	std	Y+1, r1	; 0x01
    380c:	1a 82       	std	Y+2, r1	; 0x02
    380e:	c9 58       	subi	r28, 0x89	; 137
    3810:	d0 40       	sbci	r29, 0x00	; 0
			memset(degreebuff, 0, 10);
    3812:	fe 01       	movw	r30, r28
    3814:	31 96       	adiw	r30, 0x01	; 1
    3816:	8a e0       	ldi	r24, 0x0A	; 10
    3818:	df 01       	movw	r26, r30
    381a:	1d 92       	st	X+, r1
    381c:	8a 95       	dec	r24
    381e:	e9 f7       	brne	.-6      	; 0x381a <readGPS+0x158>
			memset(currentReading.lat, 0, 1);
    3820:	10 92 9e 02 	sts	0x029E, r1
			
			if (strstr(fullLine, "$GPGGA")) {
    3824:	62 e9       	ldi	r22, 0x92	; 146
    3826:	70 e0       	ldi	r23, 0x00	; 0
    3828:	ce 01       	movw	r24, r28
    382a:	0b 96       	adiw	r24, 0x0b	; 11
    382c:	0e 94 ef 36 	call	0x6dde	; 0x6dde <strstr>
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	09 f4       	brne	.+2      	; 0x3836 <readGPS+0x174>
    3834:	dd c2       	rjmp	.+1466   	; 0x3df0 <readGPS+0x72e>
				// found GGA
				p = strstr(fullLine, "$GPGGA");
				p = strchr(p, ',')+1;
    3836:	6c e2       	ldi	r22, 0x2C	; 44
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <strchr>
    383e:	8c 01       	movw	r16, r24
    3840:	bc 01       	movw	r22, r24
    3842:	6f 5f       	subi	r22, 0xFF	; 255
    3844:	7f 4f       	sbci	r23, 0xFF	; 255
				strncpy(tHours, p, 2); // hours
    3846:	42 e0       	ldi	r20, 0x02	; 2
    3848:	50 e0       	ldi	r21, 0x00	; 0
    384a:	ce 01       	movw	r24, r28
    384c:	8d 57       	subi	r24, 0x7D	; 125
    384e:	9f 4f       	sbci	r25, 0xFF	; 255
    3850:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <strncpy>
				p = p + 2;
				strncpy(tMinutes, p, 2); // minutes
    3854:	b8 01       	movw	r22, r16
    3856:	6d 5f       	subi	r22, 0xFD	; 253
    3858:	7f 4f       	sbci	r23, 0xFF	; 255
    385a:	42 e0       	ldi	r20, 0x02	; 2
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	ce 01       	movw	r24, r28
    3860:	8a 57       	subi	r24, 0x7A	; 122
    3862:	9f 4f       	sbci	r25, 0xFF	; 255
    3864:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <strncpy>
				p = p + 2;
    3868:	68 01       	movw	r12, r16
    386a:	b5 e0       	ldi	r27, 0x05	; 5
    386c:	cb 0e       	add	r12, r27
    386e:	d1 1c       	adc	r13, r1
				strncpy(tSeconds, p, 2); // seconds
    3870:	42 e0       	ldi	r20, 0x02	; 2
    3872:	50 e0       	ldi	r21, 0x00	; 0
    3874:	b6 01       	movw	r22, r12
    3876:	ce 01       	movw	r24, r28
    3878:	87 57       	subi	r24, 0x77	; 119
    387a:	9f 4f       	sbci	r25, 0xFF	; 255
    387c:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <strncpy>
				previousReading.hours = currentReading.hours;
    3880:	08 e8       	ldi	r16, 0x88	; 136
    3882:	12 e0       	ldi	r17, 0x02	; 2
    3884:	f8 01       	movw	r30, r16
    3886:	80 81       	ld	r24, Z
    3888:	91 81       	ldd	r25, Z+1	; 0x01
    388a:	90 93 bb 02 	sts	0x02BB, r25
    388e:	80 93 ba 02 	sts	0x02BA, r24
				currentReading.hours = atoi(tHours);
    3892:	ce 01       	movw	r24, r28
    3894:	8d 57       	subi	r24, 0x7D	; 125
    3896:	9f 4f       	sbci	r25, 0xFF	; 255
    3898:	0e 94 89 36 	call	0x6d12	; 0x6d12 <atoi>
    389c:	7c 01       	movw	r14, r24
    389e:	d8 01       	movw	r26, r16
    38a0:	8d 93       	st	X+, r24
    38a2:	9c 93       	st	X, r25
				previousReading.minutes = currentReading.minutes;
    38a4:	0a e8       	ldi	r16, 0x8A	; 138
    38a6:	12 e0       	ldi	r17, 0x02	; 2
    38a8:	f8 01       	movw	r30, r16
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	90 93 bd 02 	sts	0x02BD, r25
    38b2:	80 93 bc 02 	sts	0x02BC, r24
				currentReading.minutes = atoi(tMinutes);
    38b6:	ce 01       	movw	r24, r28
    38b8:	8a 57       	subi	r24, 0x7A	; 122
    38ba:	9f 4f       	sbci	r25, 0xFF	; 255
    38bc:	0e 94 89 36 	call	0x6d12	; 0x6d12 <atoi>
    38c0:	d8 01       	movw	r26, r16
    38c2:	8d 93       	st	X+, r24
    38c4:	9c 93       	st	X, r25
				currentReading.seconds = atoi(tSeconds);
    38c6:	ce 01       	movw	r24, r28
    38c8:	87 57       	subi	r24, 0x77	; 119
    38ca:	9f 4f       	sbci	r25, 0xFF	; 255
    38cc:	0e 94 89 36 	call	0x6d12	; 0x6d12 <atoi>
    38d0:	90 93 8d 02 	sts	0x028D, r25
    38d4:	80 93 8c 02 	sts	0x028C, r24
				if (currentReading.hours < 22) {
    38d8:	b6 e1       	ldi	r27, 0x16	; 22
    38da:	eb 16       	cp	r14, r27
    38dc:	f1 04       	cpc	r15, r1
    38de:	44 f4       	brge	.+16     	; 0x38f0 <readGPS+0x22e>
					currentReading.hours = currentReading.hours + 2;
    38e0:	e2 e0       	ldi	r30, 0x02	; 2
    38e2:	ee 0e       	add	r14, r30
    38e4:	f1 1c       	adc	r15, r1
    38e6:	f0 92 89 02 	sts	0x0289, r15
    38ea:	e0 92 88 02 	sts	0x0288, r14
    38ee:	0f c0       	rjmp	.+30     	; 0x390e <readGPS+0x24c>
				} else if (currentReading.hours == 22){
    38f0:	f6 e1       	ldi	r31, 0x16	; 22
    38f2:	ef 16       	cp	r14, r31
    38f4:	f1 04       	cpc	r15, r1
    38f6:	29 f4       	brne	.+10     	; 0x3902 <readGPS+0x240>
					currentReading.hours = 0;
    38f8:	10 92 89 02 	sts	0x0289, r1
    38fc:	10 92 88 02 	sts	0x0288, r1
    3900:	06 c0       	rjmp	.+12     	; 0x390e <readGPS+0x24c>
				} else {
					currentReading.hours = 1;
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	90 93 89 02 	sts	0x0289, r25
    390a:	80 93 88 02 	sts	0x0288, r24
				}

				
				p = strchr(p, ',')+1;
    390e:	6c e2       	ldi	r22, 0x2C	; 44
    3910:	70 e0       	ldi	r23, 0x00	; 0
    3912:	c6 01       	movw	r24, r12
    3914:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <strchr>
    3918:	7c 01       	movw	r14, r24
    391a:	8c 01       	movw	r16, r24
    391c:	0f 5f       	subi	r16, 0xFF	; 255
    391e:	1f 4f       	sbci	r17, 0xFF	; 255
				
				 if (',' != *p)
    3920:	dc 01       	movw	r26, r24
    3922:	11 96       	adiw	r26, 0x01	; 1
    3924:	8c 91       	ld	r24, X
    3926:	8c 32       	cpi	r24, 0x2C	; 44
    3928:	09 f4       	brne	.+2      	; 0x392c <readGPS+0x26a>
    392a:	cf c0       	rjmp	.+414    	; 0x3aca <readGPS+0x408>
				 {
					 strncpy(degreebuff, p, 2);
    392c:	42 e0       	ldi	r20, 0x02	; 2
    392e:	50 e0       	ldi	r21, 0x00	; 0
    3930:	b8 01       	movw	r22, r16
    3932:	ce 01       	movw	r24, r28
    3934:	01 96       	adiw	r24, 0x01	; 1
    3936:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <strncpy>
					 p += 2;
					 degreebuff[2] = '\0';
					 degree = atol(degreebuff) * 10000000;
    393a:	ce 01       	movw	r24, r28
    393c:	01 96       	adiw	r24, 0x01	; 1
    393e:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <atol>
    3942:	9b 01       	movw	r18, r22
    3944:	ac 01       	movw	r20, r24
    3946:	60 e8       	ldi	r22, 0x80	; 128
    3948:	76 e9       	ldi	r23, 0x96	; 150
    394a:	88 e9       	ldi	r24, 0x98	; 152
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__mulsi3>
    3952:	4b 01       	movw	r8, r22
    3954:	5c 01       	movw	r10, r24
					 strncpy(degreebuff, p, 2); // minutes
    3956:	b7 01       	movw	r22, r14
    3958:	6d 5f       	subi	r22, 0xFD	; 253
    395a:	7f 4f       	sbci	r23, 0xFF	; 255
    395c:	42 e0       	ldi	r20, 0x02	; 2
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	ce 01       	movw	r24, r28
    3962:	01 96       	adiw	r24, 0x01	; 1
    3964:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <strncpy>
					 p += 3; // skip decimal point
    3968:	0b 5f       	subi	r16, 0xFB	; 251
    396a:	1f 4f       	sbci	r17, 0xFF	; 255
					 strncpy(degreebuff + 2, p, 4);
    396c:	44 e0       	ldi	r20, 0x04	; 4
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	b8 01       	movw	r22, r16
    3972:	ce 01       	movw	r24, r28
    3974:	03 96       	adiw	r24, 0x03	; 3
    3976:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <strncpy>
					 degreebuff[6] = '\0';
					 currentReading.minutesLat = 50 * atol(degreebuff) / 3;
    397a:	ce 01       	movw	r24, r28
    397c:	01 96       	adiw	r24, 0x01	; 1
    397e:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <atol>
    3982:	9b 01       	movw	r18, r22
    3984:	ac 01       	movw	r20, r24
    3986:	a2 e3       	ldi	r26, 0x32	; 50
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	0e 94 49 36 	call	0x6c92	; 0x6c92 <__muluhisi3>
    398e:	23 e0       	ldi	r18, 0x03	; 3
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	40 e0       	ldi	r20, 0x00	; 0
    3994:	50 e0       	ldi	r21, 0x00	; 0
    3996:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <__divmodsi4>
    399a:	69 01       	movw	r12, r18
    399c:	7a 01       	movw	r14, r20
    399e:	20 93 9a 02 	sts	0x029A, r18
    39a2:	30 93 9b 02 	sts	0x029B, r19
    39a6:	40 93 9c 02 	sts	0x029C, r20
    39aa:	50 93 9d 02 	sts	0x029D, r21
					 previousReading.latitude = currentReading.latitude;
    39ae:	0f 2e       	mov	r0, r31
    39b0:	fe e8       	ldi	r31, 0x8E	; 142
    39b2:	2f 2e       	mov	r2, r31
    39b4:	f2 e0       	ldi	r31, 0x02	; 2
    39b6:	3f 2e       	mov	r3, r31
    39b8:	f0 2d       	mov	r31, r0
    39ba:	f1 01       	movw	r30, r2
    39bc:	80 81       	ld	r24, Z
    39be:	91 81       	ldd	r25, Z+1	; 0x01
    39c0:	a2 81       	ldd	r26, Z+2	; 0x02
    39c2:	b3 81       	ldd	r27, Z+3	; 0x03
    39c4:	80 93 c2 02 	sts	0x02C2, r24
    39c8:	90 93 c3 02 	sts	0x02C3, r25
    39cc:	a0 93 c4 02 	sts	0x02C4, r26
    39d0:	b0 93 c5 02 	sts	0x02C5, r27
					 currentReading.latitude = degree / 100000 + currentReading.minutesLat * 0.000006F;				 
    39d4:	c5 01       	movw	r24, r10
    39d6:	b4 01       	movw	r22, r8
    39d8:	20 ea       	ldi	r18, 0xA0	; 160
    39da:	36 e8       	ldi	r19, 0x86	; 134
    39dc:	41 e0       	ldi	r20, 0x01	; 1
    39de:	50 e0       	ldi	r21, 0x00	; 0
    39e0:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <__divmodsi4>
    39e4:	ca 01       	movw	r24, r20
    39e6:	b9 01       	movw	r22, r18
    39e8:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    39ec:	2b 01       	movw	r4, r22
    39ee:	3c 01       	movw	r6, r24
    39f0:	c7 01       	movw	r24, r14
    39f2:	b6 01       	movw	r22, r12
    39f4:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    39f8:	2c e9       	ldi	r18, 0x9C	; 156
    39fa:	33 e5       	ldi	r19, 0x53	; 83
    39fc:	49 ec       	ldi	r20, 0xC9	; 201
    39fe:	56 e3       	ldi	r21, 0x36	; 54
    3a00:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    3a04:	9b 01       	movw	r18, r22
    3a06:	ac 01       	movw	r20, r24
    3a08:	c3 01       	movw	r24, r6
    3a0a:	b2 01       	movw	r22, r4
    3a0c:	0e 94 07 33 	call	0x660e	; 0x660e <__addsf3>
    3a10:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    3a14:	2b 01       	movw	r4, r22
    3a16:	3c 01       	movw	r6, r24
    3a18:	d1 01       	movw	r26, r2
    3a1a:	6d 93       	st	X+, r22
    3a1c:	7d 93       	st	X+, r23
    3a1e:	8d 93       	st	X+, r24
    3a20:	9c 93       	st	X, r25
    3a22:	13 97       	sbiw	r26, 0x03	; 3
					 currentReading.latitudeDegrees = (currentReading.latitude-100*(int)(currentReading.latitude/100))/60.0;
    3a24:	24 e6       	ldi	r18, 0x64	; 100
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e0       	ldi	r20, 0x00	; 0
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <__divmodsi4>
    3a30:	c4 57       	subi	r28, 0x74	; 116
    3a32:	df 4f       	sbci	r29, 0xFF	; 255
    3a34:	28 83       	st	Y, r18
    3a36:	39 83       	std	Y+1, r19	; 0x01
    3a38:	4a 83       	std	Y+2, r20	; 0x02
    3a3a:	5b 83       	std	Y+3, r21	; 0x03
    3a3c:	cc 58       	subi	r28, 0x8C	; 140
    3a3e:	d0 40       	sbci	r29, 0x00	; 0
    3a40:	24 e6       	ldi	r18, 0x64	; 100
    3a42:	c4 57       	subi	r28, 0x74	; 116
    3a44:	df 4f       	sbci	r29, 0xFF	; 255
    3a46:	e8 81       	ld	r30, Y
    3a48:	f9 81       	ldd	r31, Y+1	; 0x01
    3a4a:	cc 58       	subi	r28, 0x8C	; 140
    3a4c:	d0 40       	sbci	r29, 0x00	; 0
    3a4e:	2e 9f       	mul	r18, r30
    3a50:	c0 01       	movw	r24, r0
    3a52:	2f 9f       	mul	r18, r31
    3a54:	90 0d       	add	r25, r0
    3a56:	11 24       	eor	r1, r1
    3a58:	aa 27       	eor	r26, r26
    3a5a:	97 fd       	sbrc	r25, 7
    3a5c:	a0 95       	com	r26
    3a5e:	ba 2f       	mov	r27, r26
    3a60:	a3 01       	movw	r20, r6
    3a62:	92 01       	movw	r18, r4
    3a64:	28 1b       	sub	r18, r24
    3a66:	39 0b       	sbc	r19, r25
    3a68:	4a 0b       	sbc	r20, r26
    3a6a:	5b 0b       	sbc	r21, r27
    3a6c:	ca 01       	movw	r24, r20
    3a6e:	b9 01       	movw	r22, r18
    3a70:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	40 e7       	ldi	r20, 0x70	; 112
    3a7a:	52 e4       	ldi	r21, 0x42	; 66
    3a7c:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divsf3>
    3a80:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
					 currentReading.latitudeDegrees += (int)(currentReading.latitude/100);
    3a84:	c4 57       	subi	r28, 0x74	; 116
    3a86:	df 4f       	sbci	r29, 0xFF	; 255
    3a88:	48 81       	ld	r20, Y
    3a8a:	59 81       	ldd	r21, Y+1	; 0x01
    3a8c:	cc 58       	subi	r28, 0x8C	; 140
    3a8e:	d0 40       	sbci	r29, 0x00	; 0
    3a90:	2a 01       	movw	r4, r20
    3a92:	66 24       	eor	r6, r6
    3a94:	57 fc       	sbrc	r5, 7
    3a96:	60 94       	com	r6
    3a98:	76 2c       	mov	r7, r6
    3a9a:	46 0e       	add	r4, r22
    3a9c:	57 1e       	adc	r5, r23
    3a9e:	68 1e       	adc	r6, r24
    3aa0:	79 1e       	adc	r7, r25
    3aa2:	40 92 92 02 	sts	0x0292, r4
    3aa6:	50 92 93 02 	sts	0x0293, r5
    3aaa:	60 92 94 02 	sts	0x0294, r6
    3aae:	70 92 95 02 	sts	0x0295, r7
					 currentReading.latitude_fixed = degree + currentReading.minutesLat;		 
    3ab2:	c8 0c       	add	r12, r8
    3ab4:	d9 1c       	adc	r13, r9
    3ab6:	ea 1c       	adc	r14, r10
    3ab8:	fb 1c       	adc	r15, r11
    3aba:	c0 92 96 02 	sts	0x0296, r12
    3abe:	d0 92 97 02 	sts	0x0297, r13
    3ac2:	e0 92 98 02 	sts	0x0298, r14
    3ac6:	f0 92 99 02 	sts	0x0299, r15
					 
				 }
				 
				 
				 p = strchr(p, ',')+1;
    3aca:	6c e2       	ldi	r22, 0x2C	; 44
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	c8 01       	movw	r24, r16
    3ad0:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <strchr>
    3ad4:	8c 01       	movw	r16, r24
    3ad6:	6c 01       	movw	r12, r24
    3ad8:	5f ef       	ldi	r21, 0xFF	; 255
    3ada:	c5 1a       	sub	r12, r21
    3adc:	d5 0a       	sbc	r13, r21
				 if (',' != *p)
    3ade:	dc 01       	movw	r26, r24
    3ae0:	11 96       	adiw	r26, 0x01	; 1
    3ae2:	8c 91       	ld	r24, X
    3ae4:	8c 32       	cpi	r24, 0x2C	; 44
    3ae6:	59 f1       	breq	.+86     	; 0x3b3e <readGPS+0x47c>
				 {
					 if (p[0] == 'S') currentReading.latitudeDegrees *= -1.0;
    3ae8:	83 35       	cpi	r24, 0x53	; 83
    3aea:	09 f0       	breq	.+2      	; 0x3aee <readGPS+0x42c>
    3aec:	7d c1       	rjmp	.+762    	; 0x3de8 <readGPS+0x726>
    3aee:	0f 2e       	mov	r0, r31
    3af0:	f2 e9       	ldi	r31, 0x92	; 146
    3af2:	ef 2e       	mov	r14, r31
    3af4:	f2 e0       	ldi	r31, 0x02	; 2
    3af6:	ff 2e       	mov	r15, r31
    3af8:	f0 2d       	mov	r31, r0
    3afa:	f7 01       	movw	r30, r14
    3afc:	60 81       	ld	r22, Z
    3afe:	71 81       	ldd	r23, Z+1	; 0x01
    3b00:	82 81       	ldd	r24, Z+2	; 0x02
    3b02:	93 81       	ldd	r25, Z+3	; 0x03
    3b04:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    3b08:	90 58       	subi	r25, 0x80	; 128
    3b0a:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    3b0e:	d7 01       	movw	r26, r14
    3b10:	6d 93       	st	X+, r22
    3b12:	7d 93       	st	X+, r23
    3b14:	8d 93       	st	X+, r24
    3b16:	9c 93       	st	X, r25
    3b18:	13 97       	sbiw	r26, 0x03	; 3
					 if (p[0] == 'N') currentReading.lat[0] = 'N';
    3b1a:	f8 01       	movw	r30, r16
    3b1c:	81 81       	ldd	r24, Z+1	; 0x01
    3b1e:	8e 34       	cpi	r24, 0x4E	; 78
    3b20:	21 f4       	brne	.+8      	; 0x3b2a <readGPS+0x468>
    3b22:	8e e4       	ldi	r24, 0x4E	; 78
    3b24:	80 93 9e 02 	sts	0x029E, r24
    3b28:	0a c0       	rjmp	.+20     	; 0x3b3e <readGPS+0x47c>
					 else if (p[0] == 'S') currentReading.lat[0] = 'S';
    3b2a:	83 35       	cpi	r24, 0x53	; 83
    3b2c:	19 f4       	brne	.+6      	; 0x3b34 <readGPS+0x472>
    3b2e:	80 93 9e 02 	sts	0x029E, r24
    3b32:	05 c0       	rjmp	.+10     	; 0x3b3e <readGPS+0x47c>
					 else if (p[0] == ',') currentReading.lat[0] = '/';
    3b34:	8c 32       	cpi	r24, 0x2C	; 44
    3b36:	19 f4       	brne	.+6      	; 0x3b3e <readGPS+0x47c>
    3b38:	8f e2       	ldi	r24, 0x2F	; 47
    3b3a:	80 93 9e 02 	sts	0x029E, r24
				 }
				 
				 // parse out longitude
				 p = strchr(p, ',')+1;
    3b3e:	6c e2       	ldi	r22, 0x2C	; 44
    3b40:	70 e0       	ldi	r23, 0x00	; 0
    3b42:	c6 01       	movw	r24, r12
    3b44:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <strchr>
    3b48:	7c 01       	movw	r14, r24
    3b4a:	8c 01       	movw	r16, r24
    3b4c:	0f 5f       	subi	r16, 0xFF	; 255
    3b4e:	1f 4f       	sbci	r17, 0xFF	; 255
				 if (',' != *p)
    3b50:	dc 01       	movw	r26, r24
    3b52:	11 96       	adiw	r26, 0x01	; 1
    3b54:	8c 91       	ld	r24, X
    3b56:	8c 32       	cpi	r24, 0x2C	; 44
    3b58:	09 f4       	brne	.+2      	; 0x3b5c <readGPS+0x49a>
    3b5a:	d0 c0       	rjmp	.+416    	; 0x3cfc <readGPS+0x63a>
				 {
					 strncpy(degreebuff, p, 3);
    3b5c:	43 e0       	ldi	r20, 0x03	; 3
    3b5e:	50 e0       	ldi	r21, 0x00	; 0
    3b60:	b8 01       	movw	r22, r16
    3b62:	ce 01       	movw	r24, r28
    3b64:	01 96       	adiw	r24, 0x01	; 1
    3b66:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <strncpy>
					 p += 3;
					 degreebuff[3] = '\0';
    3b6a:	1c 82       	std	Y+4, r1	; 0x04
					 degree = atol(degreebuff) * 10000000;
    3b6c:	ce 01       	movw	r24, r28
    3b6e:	01 96       	adiw	r24, 0x01	; 1
    3b70:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <atol>
    3b74:	9b 01       	movw	r18, r22
    3b76:	ac 01       	movw	r20, r24
    3b78:	60 e8       	ldi	r22, 0x80	; 128
    3b7a:	76 e9       	ldi	r23, 0x96	; 150
    3b7c:	88 e9       	ldi	r24, 0x98	; 152
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__mulsi3>
    3b84:	4b 01       	movw	r8, r22
    3b86:	5c 01       	movw	r10, r24
					 strncpy(degreebuff, p, 2); // minutes
    3b88:	b7 01       	movw	r22, r14
    3b8a:	6c 5f       	subi	r22, 0xFC	; 252
    3b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8e:	42 e0       	ldi	r20, 0x02	; 2
    3b90:	50 e0       	ldi	r21, 0x00	; 0
    3b92:	ce 01       	movw	r24, r28
    3b94:	01 96       	adiw	r24, 0x01	; 1
    3b96:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <strncpy>
					 p += 3; // skip decimal point
    3b9a:	0a 5f       	subi	r16, 0xFA	; 250
    3b9c:	1f 4f       	sbci	r17, 0xFF	; 255
					 strncpy(degreebuff + 2, p, 4);
    3b9e:	44 e0       	ldi	r20, 0x04	; 4
    3ba0:	50 e0       	ldi	r21, 0x00	; 0
    3ba2:	b8 01       	movw	r22, r16
    3ba4:	ce 01       	movw	r24, r28
    3ba6:	03 96       	adiw	r24, 0x03	; 3
    3ba8:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <strncpy>
					 degreebuff[6] = '\0';
					 currentReading.minutesLon = 50 * atol(degreebuff) / 3;
    3bac:	ce 01       	movw	r24, r28
    3bae:	01 96       	adiw	r24, 0x01	; 1
    3bb0:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <atol>
    3bb4:	9b 01       	movw	r18, r22
    3bb6:	ac 01       	movw	r20, r24
    3bb8:	a2 e3       	ldi	r26, 0x32	; 50
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	0e 94 49 36 	call	0x6c92	; 0x6c92 <__muluhisi3>
    3bc0:	23 e0       	ldi	r18, 0x03	; 3
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	40 e0       	ldi	r20, 0x00	; 0
    3bc6:	50 e0       	ldi	r21, 0x00	; 0
    3bc8:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <__divmodsi4>
    3bcc:	69 01       	movw	r12, r18
    3bce:	7a 01       	movw	r14, r20
    3bd0:	20 93 ac 02 	sts	0x02AC, r18
    3bd4:	30 93 ad 02 	sts	0x02AD, r19
    3bd8:	40 93 ae 02 	sts	0x02AE, r20
    3bdc:	50 93 af 02 	sts	0x02AF, r21
					 previousReading.longitude = currentReading.longitude;
    3be0:	0f 2e       	mov	r0, r31
    3be2:	f0 ea       	ldi	r31, 0xA0	; 160
    3be4:	2f 2e       	mov	r2, r31
    3be6:	f2 e0       	ldi	r31, 0x02	; 2
    3be8:	3f 2e       	mov	r3, r31
    3bea:	f0 2d       	mov	r31, r0
    3bec:	f1 01       	movw	r30, r2
    3bee:	80 81       	ld	r24, Z
    3bf0:	91 81       	ldd	r25, Z+1	; 0x01
    3bf2:	a2 81       	ldd	r26, Z+2	; 0x02
    3bf4:	b3 81       	ldd	r27, Z+3	; 0x03
    3bf6:	80 93 c6 02 	sts	0x02C6, r24
    3bfa:	90 93 c7 02 	sts	0x02C7, r25
    3bfe:	a0 93 c8 02 	sts	0x02C8, r26
    3c02:	b0 93 c9 02 	sts	0x02C9, r27
					 currentReading.longitude = degree / 100000 + currentReading.minutesLon * 0.000006F;
    3c06:	c5 01       	movw	r24, r10
    3c08:	b4 01       	movw	r22, r8
    3c0a:	20 ea       	ldi	r18, 0xA0	; 160
    3c0c:	36 e8       	ldi	r19, 0x86	; 134
    3c0e:	41 e0       	ldi	r20, 0x01	; 1
    3c10:	50 e0       	ldi	r21, 0x00	; 0
    3c12:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <__divmodsi4>
    3c16:	ca 01       	movw	r24, r20
    3c18:	b9 01       	movw	r22, r18
    3c1a:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    3c1e:	2b 01       	movw	r4, r22
    3c20:	3c 01       	movw	r6, r24
    3c22:	c7 01       	movw	r24, r14
    3c24:	b6 01       	movw	r22, r12
    3c26:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    3c2a:	2c e9       	ldi	r18, 0x9C	; 156
    3c2c:	33 e5       	ldi	r19, 0x53	; 83
    3c2e:	49 ec       	ldi	r20, 0xC9	; 201
    3c30:	56 e3       	ldi	r21, 0x36	; 54
    3c32:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    3c36:	9b 01       	movw	r18, r22
    3c38:	ac 01       	movw	r20, r24
    3c3a:	c3 01       	movw	r24, r6
    3c3c:	b2 01       	movw	r22, r4
    3c3e:	0e 94 07 33 	call	0x660e	; 0x660e <__addsf3>
    3c42:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    3c46:	2b 01       	movw	r4, r22
    3c48:	3c 01       	movw	r6, r24
    3c4a:	d1 01       	movw	r26, r2
    3c4c:	6d 93       	st	X+, r22
    3c4e:	7d 93       	st	X+, r23
    3c50:	8d 93       	st	X+, r24
    3c52:	9c 93       	st	X, r25
    3c54:	13 97       	sbiw	r26, 0x03	; 3
					 currentReading.longitudeDegrees = (currentReading.longitude-100*(int)(currentReading.longitude/100))/60.0;
    3c56:	24 e6       	ldi	r18, 0x64	; 100
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e0       	ldi	r20, 0x00	; 0
    3c5c:	50 e0       	ldi	r21, 0x00	; 0
    3c5e:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <__divmodsi4>
    3c62:	c4 57       	subi	r28, 0x74	; 116
    3c64:	df 4f       	sbci	r29, 0xFF	; 255
    3c66:	28 83       	st	Y, r18
    3c68:	39 83       	std	Y+1, r19	; 0x01
    3c6a:	4a 83       	std	Y+2, r20	; 0x02
    3c6c:	5b 83       	std	Y+3, r21	; 0x03
    3c6e:	cc 58       	subi	r28, 0x8C	; 140
    3c70:	d0 40       	sbci	r29, 0x00	; 0
    3c72:	24 e6       	ldi	r18, 0x64	; 100
    3c74:	c4 57       	subi	r28, 0x74	; 116
    3c76:	df 4f       	sbci	r29, 0xFF	; 255
    3c78:	e8 81       	ld	r30, Y
    3c7a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c7c:	cc 58       	subi	r28, 0x8C	; 140
    3c7e:	d0 40       	sbci	r29, 0x00	; 0
    3c80:	2e 9f       	mul	r18, r30
    3c82:	c0 01       	movw	r24, r0
    3c84:	2f 9f       	mul	r18, r31
    3c86:	90 0d       	add	r25, r0
    3c88:	11 24       	eor	r1, r1
    3c8a:	aa 27       	eor	r26, r26
    3c8c:	97 fd       	sbrc	r25, 7
    3c8e:	a0 95       	com	r26
    3c90:	ba 2f       	mov	r27, r26
    3c92:	a3 01       	movw	r20, r6
    3c94:	92 01       	movw	r18, r4
    3c96:	28 1b       	sub	r18, r24
    3c98:	39 0b       	sbc	r19, r25
    3c9a:	4a 0b       	sbc	r20, r26
    3c9c:	5b 0b       	sbc	r21, r27
    3c9e:	ca 01       	movw	r24, r20
    3ca0:	b9 01       	movw	r22, r18
    3ca2:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 e7       	ldi	r20, 0x70	; 112
    3cac:	52 e4       	ldi	r21, 0x42	; 66
    3cae:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divsf3>
    3cb2:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
					 currentReading.longitudeDegrees += (int)(currentReading.longitude/100);
    3cb6:	c4 57       	subi	r28, 0x74	; 116
    3cb8:	df 4f       	sbci	r29, 0xFF	; 255
    3cba:	48 81       	ld	r20, Y
    3cbc:	59 81       	ldd	r21, Y+1	; 0x01
    3cbe:	cc 58       	subi	r28, 0x8C	; 140
    3cc0:	d0 40       	sbci	r29, 0x00	; 0
    3cc2:	2a 01       	movw	r4, r20
    3cc4:	66 24       	eor	r6, r6
    3cc6:	57 fc       	sbrc	r5, 7
    3cc8:	60 94       	com	r6
    3cca:	76 2c       	mov	r7, r6
    3ccc:	46 0e       	add	r4, r22
    3cce:	57 1e       	adc	r5, r23
    3cd0:	68 1e       	adc	r6, r24
    3cd2:	79 1e       	adc	r7, r25
    3cd4:	40 92 a4 02 	sts	0x02A4, r4
    3cd8:	50 92 a5 02 	sts	0x02A5, r5
    3cdc:	60 92 a6 02 	sts	0x02A6, r6
    3ce0:	70 92 a7 02 	sts	0x02A7, r7
					 currentReading.longitude_fixed = degree + currentReading.minutesLon;
    3ce4:	c8 0c       	add	r12, r8
    3ce6:	d9 1c       	adc	r13, r9
    3ce8:	ea 1c       	adc	r14, r10
    3cea:	fb 1c       	adc	r15, r11
    3cec:	c0 92 a8 02 	sts	0x02A8, r12
    3cf0:	d0 92 a9 02 	sts	0x02A9, r13
    3cf4:	e0 92 aa 02 	sts	0x02AA, r14
    3cf8:	f0 92 ab 02 	sts	0x02AB, r15
				  }
				 
				p = strchr(p, ',')+1;
    3cfc:	6c e2       	ldi	r22, 0x2C	; 44
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	c8 01       	movw	r24, r16
    3d02:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <strchr>
    3d06:	8c 01       	movw	r16, r24
    3d08:	0f 5f       	subi	r16, 0xFF	; 255
    3d0a:	1f 4f       	sbci	r17, 0xFF	; 255
				if (',' != *p)
					{
						if (p[0] == 'W') currentReading.longitudeDegrees *= -1.0;
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	11 96       	adiw	r26, 0x01	; 1
    3d10:	8c 91       	ld	r24, X
    3d12:	87 35       	cpi	r24, 0x57	; 87
    3d14:	b1 f4       	brne	.+44     	; 0x3d42 <readGPS+0x680>
    3d16:	0f 2e       	mov	r0, r31
    3d18:	f4 ea       	ldi	r31, 0xA4	; 164
    3d1a:	ef 2e       	mov	r14, r31
    3d1c:	f2 e0       	ldi	r31, 0x02	; 2
    3d1e:	ff 2e       	mov	r15, r31
    3d20:	f0 2d       	mov	r31, r0
    3d22:	f7 01       	movw	r30, r14
    3d24:	60 81       	ld	r22, Z
    3d26:	71 81       	ldd	r23, Z+1	; 0x01
    3d28:	82 81       	ldd	r24, Z+2	; 0x02
    3d2a:	93 81       	ldd	r25, Z+3	; 0x03
    3d2c:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    3d30:	90 58       	subi	r25, 0x80	; 128
    3d32:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    3d36:	d7 01       	movw	r26, r14
    3d38:	6d 93       	st	X+, r22
    3d3a:	7d 93       	st	X+, r23
    3d3c:	8d 93       	st	X+, r24
    3d3e:	9c 93       	st	X, r25
    3d40:	13 97       	sbiw	r26, 0x03	; 3
					}
				 
				 
				 
				 p = strchr(p, ',')+1;
    3d42:	6c e2       	ldi	r22, 0x2C	; 44
    3d44:	70 e0       	ldi	r23, 0x00	; 0
    3d46:	c8 01       	movw	r24, r16
    3d48:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <strchr>
    3d4c:	8c 01       	movw	r16, r24
    3d4e:	0f 5f       	subi	r16, 0xFF	; 255
    3d50:	1f 4f       	sbci	r17, 0xFF	; 255
				 if (',' != *p)
    3d52:	fc 01       	movw	r30, r24
    3d54:	81 81       	ldd	r24, Z+1	; 0x01
    3d56:	8c 32       	cpi	r24, 0x2C	; 44
    3d58:	39 f0       	breq	.+14     	; 0x3d68 <readGPS+0x6a6>
				 {
					 currentReading.fixquality = atoi(p);
    3d5a:	c8 01       	movw	r24, r16
    3d5c:	0e 94 89 36 	call	0x6d12	; 0x6d12 <atoi>
    3d60:	90 93 b7 02 	sts	0x02B7, r25
    3d64:	80 93 b6 02 	sts	0x02B6, r24
				 }
				 
				 
				 
				 p = strchr(p, ',')+1;
    3d68:	6c e2       	ldi	r22, 0x2C	; 44
    3d6a:	70 e0       	ldi	r23, 0x00	; 0
    3d6c:	c8 01       	movw	r24, r16
    3d6e:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <strchr>
    3d72:	8c 01       	movw	r16, r24
    3d74:	0f 5f       	subi	r16, 0xFF	; 255
    3d76:	1f 4f       	sbci	r17, 0xFF	; 255
				 if (',' != *p)
    3d78:	dc 01       	movw	r26, r24
    3d7a:	11 96       	adiw	r26, 0x01	; 1
    3d7c:	8c 91       	ld	r24, X
    3d7e:	8c 32       	cpi	r24, 0x2C	; 44
    3d80:	99 f0       	breq	.+38     	; 0x3da8 <readGPS+0x6e6>
				 {
					 previousReading.satellites = currentReading.satellites;
    3d82:	0f 2e       	mov	r0, r31
    3d84:	f2 eb       	ldi	r31, 0xB2	; 178
    3d86:	ef 2e       	mov	r14, r31
    3d88:	f2 e0       	ldi	r31, 0x02	; 2
    3d8a:	ff 2e       	mov	r15, r31
    3d8c:	f0 2d       	mov	r31, r0
    3d8e:	f7 01       	movw	r30, r14
    3d90:	80 81       	ld	r24, Z
    3d92:	91 81       	ldd	r25, Z+1	; 0x01
    3d94:	90 93 bf 02 	sts	0x02BF, r25
    3d98:	80 93 be 02 	sts	0x02BE, r24
					 currentReading.satellites = atoi(p);
    3d9c:	c8 01       	movw	r24, r16
    3d9e:	0e 94 89 36 	call	0x6d12	; 0x6d12 <atoi>
    3da2:	d7 01       	movw	r26, r14
    3da4:	8d 93       	st	X+, r24
    3da6:	9c 93       	st	X, r25
				 }
				 
				 
				 p = strchr(p, ',')+1;
    3da8:	6c e2       	ldi	r22, 0x2C	; 44
    3daa:	70 e0       	ldi	r23, 0x00	; 0
    3dac:	c8 01       	movw	r24, r16
    3dae:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <strchr>
				 
				 p = strchr(p, ',')+1;
    3db2:	6c e2       	ldi	r22, 0x2C	; 44
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <strchr>
				 if (',' != *p)
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	21 81       	ldd	r18, Z+1	; 0x01
    3dc0:	2c 32       	cpi	r18, 0x2C	; 44
    3dc2:	b1 f0       	breq	.+44     	; 0x3df0 <readGPS+0x72e>
				 {
					 previousReading.altitude = currentReading.altitude;
    3dc4:	04 eb       	ldi	r16, 0xB4	; 180
    3dc6:	12 e0       	ldi	r17, 0x02	; 2
    3dc8:	d8 01       	movw	r26, r16
    3dca:	2d 91       	ld	r18, X+
    3dcc:	3c 91       	ld	r19, X
    3dce:	30 93 c1 02 	sts	0x02C1, r19
    3dd2:	20 93 c0 02 	sts	0x02C0, r18
					 currentReading.altitude = atof(p);
    3dd6:	01 96       	adiw	r24, 0x01	; 1
    3dd8:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <atof>
    3ddc:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    3de0:	f8 01       	movw	r30, r16
    3de2:	71 83       	std	Z+1, r23	; 0x01
    3de4:	60 83       	st	Z, r22
    3de6:	04 c0       	rjmp	.+8      	; 0x3df0 <readGPS+0x72e>
				 
				 p = strchr(p, ',')+1;
				 if (',' != *p)
				 {
					 if (p[0] == 'S') currentReading.latitudeDegrees *= -1.0;
					 if (p[0] == 'N') currentReading.lat[0] = 'N';
    3de8:	8e 34       	cpi	r24, 0x4E	; 78
    3dea:	09 f0       	breq	.+2      	; 0x3dee <readGPS+0x72c>
    3dec:	a8 ce       	rjmp	.-688    	; 0x3b3e <readGPS+0x47c>
    3dee:	99 ce       	rjmp	.-718    	; 0x3b22 <readGPS+0x460>
			}	
			
		}
		

}
    3df0:	c1 57       	subi	r28, 0x71	; 113
    3df2:	df 4f       	sbci	r29, 0xFF	; 255
    3df4:	0f b6       	in	r0, 0x3f	; 63
    3df6:	f8 94       	cli
    3df8:	de bf       	out	0x3e, r29	; 62
    3dfa:	0f be       	out	0x3f, r0	; 63
    3dfc:	cd bf       	out	0x3d, r28	; 61
    3dfe:	df 91       	pop	r29
    3e00:	cf 91       	pop	r28
    3e02:	1f 91       	pop	r17
    3e04:	0f 91       	pop	r16
    3e06:	ff 90       	pop	r15
    3e08:	ef 90       	pop	r14
    3e0a:	df 90       	pop	r13
    3e0c:	cf 90       	pop	r12
    3e0e:	bf 90       	pop	r11
    3e10:	af 90       	pop	r10
    3e12:	9f 90       	pop	r9
    3e14:	8f 90       	pop	r8
    3e16:	7f 90       	pop	r7
    3e18:	6f 90       	pop	r6
    3e1a:	5f 90       	pop	r5
    3e1c:	4f 90       	pop	r4
    3e1e:	3f 90       	pop	r3
    3e20:	2f 90       	pop	r2
    3e22:	08 95       	ret

00003e24 <showAltitude>:
	}
	

}

void showAltitude() {
    3e24:	2f 92       	push	r2
    3e26:	3f 92       	push	r3
    3e28:	4f 92       	push	r4
    3e2a:	5f 92       	push	r5
    3e2c:	6f 92       	push	r6
    3e2e:	7f 92       	push	r7
    3e30:	8f 92       	push	r8
    3e32:	9f 92       	push	r9
    3e34:	af 92       	push	r10
    3e36:	bf 92       	push	r11
    3e38:	cf 92       	push	r12
    3e3a:	df 92       	push	r13
    3e3c:	ef 92       	push	r14
    3e3e:	ff 92       	push	r15
    3e40:	0f 93       	push	r16
    3e42:	1f 93       	push	r17
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	cd b7       	in	r28, 0x3d	; 61
    3e4a:	de b7       	in	r29, 0x3e	; 62
    3e4c:	64 97       	sbiw	r28, 0x14	; 20
    3e4e:	0f b6       	in	r0, 0x3f	; 63
    3e50:	f8 94       	cli
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	0f be       	out	0x3f, r0	; 63
    3e56:	cd bf       	out	0x3d, r28	; 61
	
	currentReading.lat[1] = '\0';
    3e58:	10 92 9f 02 	sts	0x029F, r1
	int firstShow = 1; /**< A flag showing if this is the first time showing the screen */
	char str[20]; /**< A helper string used to store text that is to be shown on the screen */
	
	SetColor(TURQUOISE);
    3e5c:	83 ef       	ldi	r24, 0xF3	; 243
    3e5e:	9d e1       	ldi	r25, 0x1D	; 29
    3e60:	90 93 79 00 	sts	0x0079, r25
    3e64:	80 93 78 00 	sts	0x0078, r24
	FillRectangle(0, 40, GetMaxX(), 80);
    3e68:	03 ef       	ldi	r16, 0xF3	; 243
    3e6a:	1d e1       	ldi	r17, 0x1D	; 29
    3e6c:	20 e5       	ldi	r18, 0x50	; 80
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	4f ee       	ldi	r20, 0xEF	; 239
    3e72:	50 e0       	ldi	r21, 0x00	; 0
    3e74:	68 e2       	ldi	r22, 0x28	; 40
    3e76:	70 e0       	ldi	r23, 0x00	; 0
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	SetColor(GREEN_SEA);
    3e80:	80 e1       	ldi	r24, 0x10	; 16
    3e82:	95 e1       	ldi	r25, 0x15	; 21
    3e84:	90 93 79 00 	sts	0x0079, r25
    3e88:	80 93 78 00 	sts	0x0078, r24
	FillRectangle(0, 40, 40, 80);
    3e8c:	00 e1       	ldi	r16, 0x10	; 16
    3e8e:	15 e1       	ldi	r17, 0x15	; 21
    3e90:	20 e5       	ldi	r18, 0x50	; 80
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	48 e2       	ldi	r20, 0x28	; 40
    3e96:	50 e0       	ldi	r21, 0x00	; 0
    3e98:	68 e2       	ldi	r22, 0x28	; 40
    3e9a:	70 e0       	ldi	r23, 0x00	; 0
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	SetFgColor(CLOUDS);
    3ea4:	0f 2e       	mov	r0, r31
    3ea6:	fe e9       	ldi	r31, 0x9E	; 158
    3ea8:	cf 2e       	mov	r12, r31
    3eaa:	ff ee       	ldi	r31, 0xEF	; 239
    3eac:	df 2e       	mov	r13, r31
    3eae:	f0 2d       	mov	r31, r0
    3eb0:	d0 92 64 00 	sts	0x0064, r13
    3eb4:	c0 92 63 00 	sts	0x0063, r12
	DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
    3eb8:	ee 24       	eor	r14, r14
    3eba:	e3 94       	inc	r14
    3ebc:	09 e9       	ldi	r16, 0x99	; 153
    3ebe:	10 e0       	ldi	r17, 0x00	; 0
    3ec0:	20 e5       	ldi	r18, 0x50	; 80
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	48 e2       	ldi	r20, 0x28	; 40
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	68 e2       	ldi	r22, 0x28	; 40
    3eca:	70 e0       	ldi	r23, 0x00	; 0
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(0, 40, GetMaxX(), 80, "Altitude", ALINE_CENTER);
    3ed4:	0b e9       	ldi	r16, 0x9B	; 155
    3ed6:	10 e0       	ldi	r17, 0x00	; 0
    3ed8:	20 e5       	ldi	r18, 0x50	; 80
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	4f ee       	ldi	r20, 0xEF	; 239
    3ede:	50 e0       	ldi	r21, 0x00	; 0
    3ee0:	68 e2       	ldi	r22, 0x28	; 40
    3ee2:	70 e0       	ldi	r23, 0x00	; 0
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	SetColor(CLOUDS);
    3eec:	d0 92 79 00 	sts	0x0079, r13
    3ef0:	c0 92 78 00 	sts	0x0078, r12
	BevelFill(0, 81, GetMaxX(), GetMaxY(), 0);
    3ef4:	00 e0       	ldi	r16, 0x00	; 0
    3ef6:	10 e0       	ldi	r17, 0x00	; 0
    3ef8:	2f e3       	ldi	r18, 0x3F	; 63
    3efa:	31 e0       	ldi	r19, 0x01	; 1
    3efc:	4f ee       	ldi	r20, 0xEF	; 239
    3efe:	50 e0       	ldi	r21, 0x00	; 0
    3f00:	61 e5       	ldi	r22, 0x51	; 81
    3f02:	70 e0       	ldi	r23, 0x00	; 0
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
	
	
	SetColor(BLACK);
    3f0c:	10 92 79 00 	sts	0x0079, r1
    3f10:	10 92 78 00 	sts	0x0078, r1
	SetFgColor(BLACK);
    3f14:	10 92 64 00 	sts	0x0064, r1
    3f18:	10 92 63 00 	sts	0x0063, r1
	DrawText(15, 90, GetMaxX() - 15, 100, "1472 m", ALINE_CENTER);
    3f1c:	04 ea       	ldi	r16, 0xA4	; 164
    3f1e:	10 e0       	ldi	r17, 0x00	; 0
    3f20:	24 e6       	ldi	r18, 0x64	; 100
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	40 ee       	ldi	r20, 0xE0	; 224
    3f26:	50 e0       	ldi	r21, 0x00	; 0
    3f28:	6a e5       	ldi	r22, 0x5A	; 90
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	8f e0       	ldi	r24, 0x0F	; 15
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	Line(5, 85, 10, 85);
    3f34:	25 e5       	ldi	r18, 0x55	; 85
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	4a e0       	ldi	r20, 0x0A	; 10
    3f3a:	50 e0       	ldi	r21, 0x00	; 0
    3f3c:	65 e5       	ldi	r22, 0x55	; 85
    3f3e:	70 e0       	ldi	r23, 0x00	; 0
    3f40:	85 e0       	ldi	r24, 0x05	; 5
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	0e 94 b2 10 	call	0x2164	; 0x2164 <Line>
	Line(5, 85, 5, GetMaxY() - 40);
    3f48:	27 e1       	ldi	r18, 0x17	; 23
    3f4a:	31 e0       	ldi	r19, 0x01	; 1
    3f4c:	45 e0       	ldi	r20, 0x05	; 5
    3f4e:	50 e0       	ldi	r21, 0x00	; 0
    3f50:	65 e5       	ldi	r22, 0x55	; 85
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	85 e0       	ldi	r24, 0x05	; 5
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	0e 94 b2 10 	call	0x2164	; 0x2164 <Line>
	Line(GetMaxX() - 5, 85, GetMaxX() - 10, 85);
    3f5c:	25 e5       	ldi	r18, 0x55	; 85
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	45 ee       	ldi	r20, 0xE5	; 229
    3f62:	50 e0       	ldi	r21, 0x00	; 0
    3f64:	65 e5       	ldi	r22, 0x55	; 85
    3f66:	70 e0       	ldi	r23, 0x00	; 0
    3f68:	8a ee       	ldi	r24, 0xEA	; 234
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	0e 94 b2 10 	call	0x2164	; 0x2164 <Line>
	Line(GetMaxX() - 5, 85, GetMaxX() - 5, GetMaxY() - 40);
    3f70:	27 e1       	ldi	r18, 0x17	; 23
    3f72:	31 e0       	ldi	r19, 0x01	; 1
    3f74:	4a ee       	ldi	r20, 0xEA	; 234
    3f76:	50 e0       	ldi	r21, 0x00	; 0
    3f78:	65 e5       	ldi	r22, 0x55	; 85
    3f7a:	70 e0       	ldi	r23, 0x00	; 0
    3f7c:	8a ee       	ldi	r24, 0xEA	; 234
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	0e 94 b2 10 	call	0x2164	; 0x2164 <Line>
	SetColor(SEA);
    3f84:	8b ed       	ldi	r24, 0xDB	; 219
    3f86:	94 e3       	ldi	r25, 0x34	; 52
    3f88:	90 93 79 00 	sts	0x0079, r25
    3f8c:	80 93 78 00 	sts	0x0078, r24
	FillRectangle(5, GetMaxY() - 40, GetMaxX() - 5, GetMaxY() - 5);
    3f90:	0b ed       	ldi	r16, 0xDB	; 219
    3f92:	14 e3       	ldi	r17, 0x34	; 52
    3f94:	2a e3       	ldi	r18, 0x3A	; 58
    3f96:	31 e0       	ldi	r19, 0x01	; 1
    3f98:	4a ee       	ldi	r20, 0xEA	; 234
    3f9a:	50 e0       	ldi	r21, 0x00	; 0
    3f9c:	67 e1       	ldi	r22, 0x17	; 23
    3f9e:	71 e0       	ldi	r23, 0x01	; 1
    3fa0:	85 e0       	ldi	r24, 0x05	; 5
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	SetFgColor(CLOUDS);
    3fa8:	d0 92 64 00 	sts	0x0064, r13
    3fac:	c0 92 63 00 	sts	0x0063, r12
	DrawText(15, GetMaxY() - 27, GetMaxX() - 15, GetMaxY() - 17, "SEA LEVEL", ALINE_CENTER);
    3fb0:	0b ea       	ldi	r16, 0xAB	; 171
    3fb2:	10 e0       	ldi	r17, 0x00	; 0
    3fb4:	2e e2       	ldi	r18, 0x2E	; 46
    3fb6:	31 e0       	ldi	r19, 0x01	; 1
    3fb8:	40 ee       	ldi	r20, 0xE0	; 224
    3fba:	50 e0       	ldi	r21, 0x00	; 0
    3fbc:	64 e2       	ldi	r22, 0x24	; 36
    3fbe:	71 e0       	ldi	r23, 0x01	; 1
    3fc0:	8f e0       	ldi	r24, 0x0F	; 15
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
}

void showAltitude() {
	
	currentReading.lat[1] = '\0';
	int firstShow = 1; /**< A flag showing if this is the first time showing the screen */
    3fc8:	01 e0       	ldi	r16, 0x01	; 1
    3fca:	10 e0       	ldi	r17, 0x00	; 0
	while(currentScreen == 4) {
		
		ScanPen();
		readGPS();
		
		memset(str, 0, 20);
    3fcc:	9e 01       	movw	r18, r28
    3fce:	2f 5f       	subi	r18, 0xFF	; 255
    3fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd2:	59 01       	movw	r10, r18
	
				SetFgColor(WET_ASPHALT);
				
				
				if ((currentReading.altitude != previousReading.altitude || firstShow) && currentReading.altitude > 0) {
    3fd4:	0f 2e       	mov	r0, r31
    3fd6:	f4 eb       	ldi	r31, 0xB4	; 180
    3fd8:	cf 2e       	mov	r12, r31
    3fda:	f2 e0       	ldi	r31, 0x02	; 2
    3fdc:	df 2e       	mov	r13, r31
    3fde:	f0 2d       	mov	r31, r0

					SetColor(CLOUDS);
    3fe0:	0f 2e       	mov	r0, r31
    3fe2:	fe e9       	ldi	r31, 0x9E	; 158
    3fe4:	8f 2e       	mov	r8, r31
    3fe6:	ff ee       	ldi	r31, 0xEF	; 239
    3fe8:	9f 2e       	mov	r9, r31
    3fea:	f0 2d       	mov	r31, r0
					for (int i = 11; i <= GetMaxX() - 11; i = i + 12) {
    3fec:	f1 2c       	mov	r15, r1
						Circle(i, GetMaxY() - 40, 5, 1);
					}
					
					SetColor(CLOUDS);
					FillRectangle(6, 110, GetMaxX() - 6, GetMaxY() - 40);
					SetColor(RED);
    3fee:	0f 2e       	mov	r0, r31
    3ff0:	41 2c       	mov	r4, r1
    3ff2:	f8 ef       	ldi	r31, 0xF8	; 248
    3ff4:	5f 2e       	mov	r5, r31
    3ff6:	f0 2d       	mov	r31, r0
					SetFgColor(RED);
					sprintf(str, "%d m", currentReading.altitude);
					DrawText(15, GetMaxY() - 60 - (int) (currentReading.altitude * 0.163), GetMaxX(), GetMaxY() - 50 - (int) (currentReading.altitude * 0.163), str, ALINE_LEFT);
    3ff8:	0f 2e       	mov	r0, r31
    3ffa:	fd e0       	ldi	r31, 0x0D	; 13
    3ffc:	6f 2e       	mov	r6, r31
    3ffe:	77 24       	eor	r7, r7
    4000:	73 94       	inc	r7
    4002:	f0 2d       	mov	r31, r0
    4004:	0f 2e       	mov	r0, r31
    4006:	f3 e0       	ldi	r31, 0x03	; 3
    4008:	2f 2e       	mov	r2, r31
    400a:	33 24       	eor	r3, r3
    400c:	33 94       	inc	r3
    400e:	f0 2d       	mov	r31, r0
	SetColor(SEA);
	FillRectangle(5, GetMaxY() - 40, GetMaxX() - 5, GetMaxY() - 5);
	SetFgColor(CLOUDS);
	DrawText(15, GetMaxY() - 27, GetMaxX() - 15, GetMaxY() - 17, "SEA LEVEL", ALINE_CENTER);
	
	while(currentScreen == 4) {
    4010:	da c0       	rjmp	.+436    	; 0x41c6 <showAltitude+0x3a2>
		
		ScanPen();
    4012:	0e 94 03 21 	call	0x4206	; 0x4206 <ScanPen>
		readGPS();
    4016:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <readGPS>
		
		memset(str, 0, 20);
    401a:	d5 01       	movw	r26, r10
    401c:	e4 e1       	ldi	r30, 0x14	; 20
    401e:	1d 92       	st	X+, r1
    4020:	ea 95       	dec	r30
    4022:	e9 f7       	brne	.-6      	; 0x401e <showAltitude+0x1fa>
	
				SetFgColor(WET_ASPHALT);
    4024:	2b e4       	ldi	r18, 0x4B	; 75
    4026:	32 e3       	ldi	r19, 0x32	; 50
    4028:	30 93 64 00 	sts	0x0064, r19
    402c:	20 93 63 00 	sts	0x0063, r18
				
				
				if ((currentReading.altitude != previousReading.altitude || firstShow) && currentReading.altitude > 0) {
    4030:	d6 01       	movw	r26, r12
    4032:	8d 91       	ld	r24, X+
    4034:	9c 91       	ld	r25, X
    4036:	e0 ec       	ldi	r30, 0xC0	; 192
    4038:	f2 e0       	ldi	r31, 0x02	; 2
    403a:	20 81       	ld	r18, Z
    403c:	31 81       	ldd	r19, Z+1	; 0x01
    403e:	82 17       	cp	r24, r18
    4040:	93 07       	cpc	r25, r19
    4042:	19 f4       	brne	.+6      	; 0x404a <showAltitude+0x226>
    4044:	01 2b       	or	r16, r17
    4046:	09 f4       	brne	.+2      	; 0x404a <showAltitude+0x226>
    4048:	bc c0       	rjmp	.+376    	; 0x41c2 <showAltitude+0x39e>
    404a:	18 16       	cp	r1, r24
    404c:	19 06       	cpc	r1, r25
    404e:	0c f0       	brlt	.+2      	; 0x4052 <showAltitude+0x22e>
    4050:	b8 c0       	rjmp	.+368    	; 0x41c2 <showAltitude+0x39e>

					SetColor(CLOUDS);
    4052:	90 92 79 00 	sts	0x0079, r9
    4056:	80 92 78 00 	sts	0x0078, r8
					for (int i = 11; i <= GetMaxX() - 11; i = i + 12) {
    405a:	8b e0       	ldi	r24, 0x0B	; 11
    405c:	9f 2d       	mov	r25, r15
    405e:	0b e0       	ldi	r16, 0x0B	; 11
    4060:	1f 2d       	mov	r17, r15
						Circle(i, GetMaxY() - 40, 5, 1);
    4062:	21 e0       	ldi	r18, 0x01	; 1
    4064:	45 e0       	ldi	r20, 0x05	; 5
    4066:	50 e0       	ldi	r21, 0x00	; 0
    4068:	67 e1       	ldi	r22, 0x17	; 23
    406a:	71 e0       	ldi	r23, 0x01	; 1
    406c:	0e 94 c5 13 	call	0x278a	; 0x278a <Circle>
				
				
				if ((currentReading.altitude != previousReading.altitude || firstShow) && currentReading.altitude > 0) {

					SetColor(CLOUDS);
					for (int i = 11; i <= GetMaxX() - 11; i = i + 12) {
    4070:	04 5f       	subi	r16, 0xF4	; 244
    4072:	1f 4f       	sbci	r17, 0xFF	; 255
    4074:	80 2f       	mov	r24, r16
    4076:	91 2f       	mov	r25, r17
    4078:	0f 3e       	cpi	r16, 0xEF	; 239
    407a:	11 05       	cpc	r17, r1
    407c:	91 f7       	brne	.-28     	; 0x4062 <showAltitude+0x23e>
						Circle(i, GetMaxY() - 40, 5, 1);
					}
					
					SetColor(CLOUDS);
    407e:	90 92 79 00 	sts	0x0079, r9
    4082:	80 92 78 00 	sts	0x0078, r8
					FillRectangle(6, 110, GetMaxX() - 6, GetMaxY() - 40);
    4086:	84 01       	movw	r16, r8
    4088:	27 e1       	ldi	r18, 0x17	; 23
    408a:	31 e0       	ldi	r19, 0x01	; 1
    408c:	49 ee       	ldi	r20, 0xE9	; 233
    408e:	50 e0       	ldi	r21, 0x00	; 0
    4090:	6e e6       	ldi	r22, 0x6E	; 110
    4092:	70 e0       	ldi	r23, 0x00	; 0
    4094:	86 e0       	ldi	r24, 0x06	; 6
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
					SetColor(RED);
    409c:	50 92 79 00 	sts	0x0079, r5
    40a0:	40 92 78 00 	sts	0x0078, r4
					SetFgColor(RED);
    40a4:	50 92 64 00 	sts	0x0064, r5
    40a8:	40 92 63 00 	sts	0x0063, r4
					sprintf(str, "%d m", currentReading.altitude);
    40ac:	d6 01       	movw	r26, r12
    40ae:	11 96       	adiw	r26, 0x01	; 1
    40b0:	8c 91       	ld	r24, X
    40b2:	11 97       	sbiw	r26, 0x01	; 1
    40b4:	8f 93       	push	r24
    40b6:	8c 91       	ld	r24, X
    40b8:	8f 93       	push	r24
    40ba:	a8 e5       	ldi	r26, 0x58	; 88
    40bc:	b1 e0       	ldi	r27, 0x01	; 1
    40be:	bf 93       	push	r27
    40c0:	af 93       	push	r26
    40c2:	bf 92       	push	r11
    40c4:	af 92       	push	r10
    40c6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
					DrawText(15, GetMaxY() - 60 - (int) (currentReading.altitude * 0.163), GetMaxX(), GetMaxY() - 50 - (int) (currentReading.altitude * 0.163), str, ALINE_LEFT);
    40ca:	d6 01       	movw	r26, r12
    40cc:	6d 91       	ld	r22, X+
    40ce:	7c 91       	ld	r23, X
    40d0:	88 27       	eor	r24, r24
    40d2:	77 fd       	sbrc	r23, 7
    40d4:	80 95       	com	r24
    40d6:	98 2f       	mov	r25, r24
    40d8:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    40dc:	29 e7       	ldi	r18, 0x79	; 121
    40de:	39 ee       	ldi	r19, 0xE9	; 233
    40e0:	46 e2       	ldi	r20, 0x26	; 38
    40e2:	5e e3       	ldi	r21, 0x3E	; 62
    40e4:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    40e8:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    40ec:	93 01       	movw	r18, r6
    40ee:	26 1b       	sub	r18, r22
    40f0:	37 0b       	sbc	r19, r23
    40f2:	f1 01       	movw	r30, r2
    40f4:	e6 1b       	sub	r30, r22
    40f6:	f7 0b       	sbc	r31, r23
    40f8:	bf 01       	movw	r22, r30
    40fa:	e1 2c       	mov	r14, r1
    40fc:	85 01       	movw	r16, r10
    40fe:	4f ee       	ldi	r20, 0xEF	; 239
    4100:	50 e0       	ldi	r21, 0x00	; 0
    4102:	8f e0       	ldi	r24, 0x0F	; 15
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
					Line(6, GetMaxY() - 40 - (int) (currentReading.altitude * 0.163), 100, GetMaxY() - 40 - (int) (currentReading.altitude * 0.163));
    410a:	d6 01       	movw	r26, r12
    410c:	6d 91       	ld	r22, X+
    410e:	7c 91       	ld	r23, X
    4110:	88 27       	eor	r24, r24
    4112:	77 fd       	sbrc	r23, 7
    4114:	80 95       	com	r24
    4116:	98 2f       	mov	r25, r24
    4118:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    411c:	29 e7       	ldi	r18, 0x79	; 121
    411e:	39 ee       	ldi	r19, 0xE9	; 233
    4120:	46 e2       	ldi	r20, 0x26	; 38
    4122:	5e e3       	ldi	r21, 0x3E	; 62
    4124:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    4128:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    412c:	07 e1       	ldi	r16, 0x17	; 23
    412e:	11 e0       	ldi	r17, 0x01	; 1
    4130:	f8 01       	movw	r30, r16
    4132:	e6 1b       	sub	r30, r22
    4134:	f7 0b       	sbc	r31, r23
    4136:	bf 01       	movw	r22, r30
    4138:	9f 01       	movw	r18, r30
    413a:	44 e6       	ldi	r20, 0x64	; 100
    413c:	50 e0       	ldi	r21, 0x00	; 0
    413e:	86 e0       	ldi	r24, 0x06	; 6
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	0e 94 b2 10 	call	0x2164	; 0x2164 <Line>
					Line(GetMaxX() - 6, GetMaxY() - 40 - (int) (currentReading.altitude * 0.163), GetMaxX() - 101, GetMaxY() - 40 - (int) (currentReading.altitude * 0.163));
    4146:	d6 01       	movw	r26, r12
    4148:	6d 91       	ld	r22, X+
    414a:	7c 91       	ld	r23, X
    414c:	88 27       	eor	r24, r24
    414e:	77 fd       	sbrc	r23, 7
    4150:	80 95       	com	r24
    4152:	98 2f       	mov	r25, r24
    4154:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    4158:	29 e7       	ldi	r18, 0x79	; 121
    415a:	39 ee       	ldi	r19, 0xE9	; 233
    415c:	46 e2       	ldi	r20, 0x26	; 38
    415e:	5e e3       	ldi	r21, 0x3E	; 62
    4160:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    4164:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    4168:	f8 01       	movw	r30, r16
    416a:	e6 1b       	sub	r30, r22
    416c:	f7 0b       	sbc	r31, r23
    416e:	bf 01       	movw	r22, r30
    4170:	9f 01       	movw	r18, r30
    4172:	4a e8       	ldi	r20, 0x8A	; 138
    4174:	50 e0       	ldi	r21, 0x00	; 0
    4176:	89 ee       	ldi	r24, 0xE9	; 233
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 b2 10 	call	0x2164	; 0x2164 <Line>
					Circle(GetMaxX() / 2, GetMaxY() - 40 - (int) (currentReading.altitude * 0.163), 5, 1);
    417e:	d6 01       	movw	r26, r12
    4180:	6d 91       	ld	r22, X+
    4182:	7c 91       	ld	r23, X
    4184:	88 27       	eor	r24, r24
    4186:	77 fd       	sbrc	r23, 7
    4188:	80 95       	com	r24
    418a:	98 2f       	mov	r25, r24
    418c:	0e 94 09 34 	call	0x6812	; 0x6812 <__floatsisf>
    4190:	29 e7       	ldi	r18, 0x79	; 121
    4192:	39 ee       	ldi	r19, 0xE9	; 233
    4194:	46 e2       	ldi	r20, 0x26	; 38
    4196:	5e e3       	ldi	r21, 0x3E	; 62
    4198:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    419c:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    41a0:	f8 01       	movw	r30, r16
    41a2:	e6 1b       	sub	r30, r22
    41a4:	f7 0b       	sbc	r31, r23
    41a6:	bf 01       	movw	r22, r30
    41a8:	21 e0       	ldi	r18, 0x01	; 1
    41aa:	45 e0       	ldi	r20, 0x05	; 5
    41ac:	50 e0       	ldi	r21, 0x00	; 0
    41ae:	87 e7       	ldi	r24, 0x77	; 119
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 c5 13 	call	0x278a	; 0x278a <Circle>
    41b6:	0f 90       	pop	r0
    41b8:	0f 90       	pop	r0
    41ba:	0f 90       	pop	r0
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	00 e0       	ldi	r16, 0x00	; 0
    41c4:	10 e0       	ldi	r17, 0x00	; 0
	SetColor(SEA);
	FillRectangle(5, GetMaxY() - 40, GetMaxX() - 5, GetMaxY() - 5);
	SetFgColor(CLOUDS);
	DrawText(15, GetMaxY() - 27, GetMaxX() - 15, GetMaxY() - 17, "SEA LEVEL", ALINE_CENTER);
	
	while(currentScreen == 4) {
    41c6:	80 91 83 02 	lds	r24, 0x0283
    41ca:	90 91 84 02 	lds	r25, 0x0284
    41ce:	04 97       	sbiw	r24, 0x04	; 4
    41d0:	09 f4       	brne	.+2      	; 0x41d4 <showAltitude+0x3b0>
    41d2:	1f cf       	rjmp	.-450    	; 0x4012 <showAltitude+0x1ee>

				}
				
				firstShow = 0;
	}
}
    41d4:	64 96       	adiw	r28, 0x14	; 20
    41d6:	0f b6       	in	r0, 0x3f	; 63
    41d8:	f8 94       	cli
    41da:	de bf       	out	0x3e, r29	; 62
    41dc:	0f be       	out	0x3f, r0	; 63
    41de:	cd bf       	out	0x3d, r28	; 61
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	1f 91       	pop	r17
    41e6:	0f 91       	pop	r16
    41e8:	ff 90       	pop	r15
    41ea:	ef 90       	pop	r14
    41ec:	df 90       	pop	r13
    41ee:	cf 90       	pop	r12
    41f0:	bf 90       	pop	r11
    41f2:	af 90       	pop	r10
    41f4:	9f 90       	pop	r9
    41f6:	8f 90       	pop	r8
    41f8:	7f 90       	pop	r7
    41fa:	6f 90       	pop	r6
    41fc:	5f 90       	pop	r5
    41fe:	4f 90       	pop	r4
    4200:	3f 90       	pop	r3
    4202:	2f 90       	pop	r2
    4204:	08 95       	ret

00004206 <ScanPen>:
 * @brief A function for detecting touch events and calling the appropriate functions depending on the touch event
 *
 * This function should be called in an indefinite loop.
 */
void ScanPen(void)
{
    4206:	2f 92       	push	r2
    4208:	3f 92       	push	r3
    420a:	4f 92       	push	r4
    420c:	5f 92       	push	r5
    420e:	6f 92       	push	r6
    4210:	7f 92       	push	r7
    4212:	8f 92       	push	r8
    4214:	9f 92       	push	r9
    4216:	af 92       	push	r10
    4218:	bf 92       	push	r11
    421a:	cf 92       	push	r12
    421c:	df 92       	push	r13
    421e:	ef 92       	push	r14
    4220:	ff 92       	push	r15
    4222:	0f 93       	push	r16
    4224:	1f 93       	push	r17
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29
    422a:	cd b7       	in	r28, 0x3d	; 61
    422c:	de b7       	in	r29, 0x3e	; 62
    422e:	28 97       	sbiw	r28, 0x08	; 8
    4230:	0f b6       	in	r0, 0x3f	; 63
    4232:	f8 94       	cli
    4234:	de bf       	out	0x3e, r29	; 62
    4236:	0f be       	out	0x3f, r0	; 63
    4238:	cd bf       	out	0x3d, r28	; 61
	unsigned long x,y;
	unsigned short tc_x_buf,tc_y_buf;
	unsigned short tc_x_max,tc_y_max;
	unsigned short tc_x_min,tc_y_min;
	if (TCIsPenOn())
    423a:	0e 94 81 19 	call	0x3302	; 0x3302 <TCIsPenOn>
    423e:	88 23       	and	r24, r24
    4240:	09 f4       	brne	.+2      	; 0x4244 <ScanPen+0x3e>
    4242:	cf c4       	rjmp	.+2462   	; 0x4be2 <ScanPen+0x9dc>
	{
		TCRead();
    4244:	0e 94 88 19 	call	0x3310	; 0x3310 <TCRead>
		tc_x_buf = TCGetH();
    4248:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    424c:	4c 01       	movw	r8, r24
		tc_y_buf = TCGetV();
    424e:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    4252:	9a 83       	std	Y+2, r25	; 0x02
    4254:	89 83       	std	Y+1, r24	; 0x01

		tc_x_max = TCGetH();
    4256:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    425a:	6c 01       	movw	r12, r24
		tc_y_max = TCGetV();
    425c:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    4260:	8c 01       	movw	r16, r24
		tc_x_min = TCGetH();
    4262:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    4266:	7c 01       	movw	r14, r24
		tc_y_min = TCGetV();
    4268:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    426c:	98 87       	std	Y+8, r25	; 0x08
    426e:	8f 83       	std	Y+7, r24	; 0x07

		TCRead();
    4270:	0e 94 88 19 	call	0x3310	; 0x3310 <TCRead>
		tc_x_buf += TCGetH();
    4274:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    4278:	5c 01       	movw	r10, r24
		tc_y_buf += TCGetV();
    427a:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    427e:	1c 01       	movw	r2, r24

		if (TCGetH() > tc_x_max)
    4280:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    4284:	c8 16       	cp	r12, r24
    4286:	d9 06       	cpc	r13, r25
    4288:	18 f4       	brcc	.+6      	; 0x4290 <ScanPen+0x8a>
		tc_x_max = TCGetH();
    428a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    428e:	6c 01       	movw	r12, r24
		if (TCGetH() < tc_x_min)
    4290:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    4294:	8e 15       	cp	r24, r14
    4296:	9f 05       	cpc	r25, r15
    4298:	18 f4       	brcc	.+6      	; 0x42a0 <ScanPen+0x9a>
		tc_x_min = TCGetH();
    429a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    429e:	7c 01       	movw	r14, r24
		if (TCGetV() > tc_y_max)
    42a0:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    42a4:	08 17       	cp	r16, r24
    42a6:	19 07       	cpc	r17, r25
    42a8:	18 f4       	brcc	.+6      	; 0x42b0 <ScanPen+0xaa>
		tc_y_max = TCGetV();
    42aa:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    42ae:	8c 01       	movw	r16, r24
		if (TCGetV() < tc_y_min)
    42b0:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    42b4:	2f 81       	ldd	r18, Y+7	; 0x07
    42b6:	38 85       	ldd	r19, Y+8	; 0x08
    42b8:	82 17       	cp	r24, r18
    42ba:	93 07       	cpc	r25, r19
    42bc:	20 f4       	brcc	.+8      	; 0x42c6 <ScanPen+0xc0>
		tc_y_min = TCGetV();
    42be:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    42c2:	98 87       	std	Y+8, r25	; 0x08
    42c4:	8f 83       	std	Y+7, r24	; 0x07

		TCRead();
    42c6:	0e 94 88 19 	call	0x3310	; 0x3310 <TCRead>
		tc_x_buf += TCGetH();
    42ca:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    42ce:	3c 01       	movw	r6, r24
		tc_y_buf += TCGetV();
    42d0:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    42d4:	9c 83       	std	Y+4, r25	; 0x04
    42d6:	8b 83       	std	Y+3, r24	; 0x03

		if (TCGetH() > tc_x_max)
    42d8:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    42dc:	c8 16       	cp	r12, r24
    42de:	d9 06       	cpc	r13, r25
    42e0:	18 f4       	brcc	.+6      	; 0x42e8 <ScanPen+0xe2>
		tc_x_max = TCGetH();
    42e2:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    42e6:	6c 01       	movw	r12, r24
		if (TCGetH() < tc_x_min)
    42e8:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    42ec:	8e 15       	cp	r24, r14
    42ee:	9f 05       	cpc	r25, r15
    42f0:	18 f4       	brcc	.+6      	; 0x42f8 <ScanPen+0xf2>
		tc_x_min = TCGetH();
    42f2:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    42f6:	7c 01       	movw	r14, r24
		if (TCGetV() > tc_y_max)
    42f8:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    42fc:	08 17       	cp	r16, r24
    42fe:	19 07       	cpc	r17, r25
    4300:	18 f4       	brcc	.+6      	; 0x4308 <ScanPen+0x102>
		tc_y_max = TCGetV();
    4302:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    4306:	8c 01       	movw	r16, r24
		if (TCGetV() < tc_y_min)
    4308:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    430c:	ef 81       	ldd	r30, Y+7	; 0x07
    430e:	f8 85       	ldd	r31, Y+8	; 0x08
    4310:	8e 17       	cp	r24, r30
    4312:	9f 07       	cpc	r25, r31
    4314:	20 f4       	brcc	.+8      	; 0x431e <ScanPen+0x118>
		tc_y_min = TCGetV();
    4316:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    431a:	98 87       	std	Y+8, r25	; 0x08
    431c:	8f 83       	std	Y+7, r24	; 0x07

		TCRead();
    431e:	0e 94 88 19 	call	0x3310	; 0x3310 <TCRead>
		tc_x_buf += TCGetH();
    4322:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    4326:	2c 01       	movw	r4, r24
		tc_y_buf += TCGetV();
    4328:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    432c:	9e 83       	std	Y+6, r25	; 0x06
    432e:	8d 83       	std	Y+5, r24	; 0x05

		if (TCGetH() > tc_x_max)
    4330:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    4334:	c8 16       	cp	r12, r24
    4336:	d9 06       	cpc	r13, r25
    4338:	18 f4       	brcc	.+6      	; 0x4340 <ScanPen+0x13a>
		tc_x_max = TCGetH();
    433a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    433e:	6c 01       	movw	r12, r24
		if (TCGetH() < tc_x_min)
    4340:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    4344:	8e 15       	cp	r24, r14
    4346:	9f 05       	cpc	r25, r15
    4348:	18 f4       	brcc	.+6      	; 0x4350 <ScanPen+0x14a>
		tc_x_min = TCGetH();
    434a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TCGetY>
    434e:	7c 01       	movw	r14, r24
		if (TCGetV() > tc_y_max)
    4350:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    4354:	08 17       	cp	r16, r24
    4356:	19 07       	cpc	r17, r25
    4358:	18 f4       	brcc	.+6      	; 0x4360 <ScanPen+0x15a>
		tc_y_max = TCGetV();
    435a:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    435e:	8c 01       	movw	r16, r24
		if (TCGetV() < tc_y_min)
    4360:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    4364:	2f 81       	ldd	r18, Y+7	; 0x07
    4366:	38 85       	ldd	r19, Y+8	; 0x08
    4368:	82 17       	cp	r24, r18
    436a:	93 07       	cpc	r25, r19
    436c:	20 f4       	brcc	.+8      	; 0x4376 <ScanPen+0x170>
		tc_y_min = TCGetV();
    436e:	0e 94 77 19 	call	0x32ee	; 0x32ee <TCGetX>
    4372:	98 87       	std	Y+8, r25	; 0x08
    4374:	8f 83       	std	Y+7, r24	; 0x07
		tc_y_buf -= tc_y_min;

		tc_x_buf = tc_x_buf >> 1;
		tc_y_buf = tc_y_buf >> 1;

		if (TCIsPenOn())
    4376:	0e 94 81 19 	call	0x3302	; 0x3302 <TCIsPenOn>
    437a:	88 23       	and	r24, r24
    437c:	09 f4       	brne	.+2      	; 0x4380 <ScanPen+0x17a>
    437e:	3d c4       	rjmp	.+2170   	; 0x4bfa <ScanPen+0x9f4>
		tc_y_max = TCGetV();
		tc_x_min = TCGetH();
		tc_y_min = TCGetV();

		TCRead();
		tc_x_buf += TCGetH();
    4380:	a8 0c       	add	r10, r8
    4382:	b9 1c       	adc	r11, r9
		tc_y_max = TCGetV();
		if (TCGetV() < tc_y_min)
		tc_y_min = TCGetV();

		TCRead();
		tc_x_buf += TCGetH();
    4384:	a6 0c       	add	r10, r6
    4386:	b7 1c       	adc	r11, r7
		tc_y_max = TCGetV();
		if (TCGetV() < tc_y_min)
		tc_y_min = TCGetV();

		TCRead();
		tc_x_buf += TCGetH();
    4388:	c5 01       	movw	r24, r10
    438a:	84 0d       	add	r24, r4
    438c:	95 1d       	adc	r25, r5
		if (TCGetV() > tc_y_max)
		tc_y_max = TCGetV();
		if (TCGetV() < tc_y_min)
		tc_y_min = TCGetV();

		tc_x_buf -= tc_x_max;
    438e:	8c 19       	sub	r24, r12
    4390:	9d 09       	sbc	r25, r13
		tc_x_buf -= tc_x_min;
    4392:	8e 19       	sub	r24, r14
    4394:	9f 09       	sbc	r25, r15
		tc_x_buf = tc_x_buf >> 1;
		tc_y_buf = tc_y_buf >> 1;

		if (TCIsPenOn())
		{
			x = cal_posx(tc_x_buf);
    4396:	96 95       	lsr	r25
    4398:	87 95       	ror	r24
    439a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <cal_posx>
    439e:	6b 01       	movw	r12, r22
    43a0:	7c 01       	movw	r14, r24
		tc_x_min = TCGetH();
		tc_y_min = TCGetV();

		TCRead();
		tc_x_buf += TCGetH();
		tc_y_buf += TCGetV();
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	9a 81       	ldd	r25, Y+2	; 0x02
    43a6:	82 0d       	add	r24, r2
    43a8:	93 1d       	adc	r25, r3
		if (TCGetV() < tc_y_min)
		tc_y_min = TCGetV();

		TCRead();
		tc_x_buf += TCGetH();
		tc_y_buf += TCGetV();
    43aa:	eb 81       	ldd	r30, Y+3	; 0x03
    43ac:	fc 81       	ldd	r31, Y+4	; 0x04
    43ae:	8e 0f       	add	r24, r30
    43b0:	9f 1f       	adc	r25, r31
		if (TCGetV() < tc_y_min)
		tc_y_min = TCGetV();

		TCRead();
		tc_x_buf += TCGetH();
		tc_y_buf += TCGetV();
    43b2:	2d 81       	ldd	r18, Y+5	; 0x05
    43b4:	3e 81       	ldd	r19, Y+6	; 0x06
    43b6:	82 0f       	add	r24, r18
    43b8:	93 1f       	adc	r25, r19
		if (TCGetV() < tc_y_min)
		tc_y_min = TCGetV();

		tc_x_buf -= tc_x_max;
		tc_x_buf -= tc_x_min;
		tc_y_buf -= tc_y_max;
    43ba:	80 1b       	sub	r24, r16
    43bc:	91 0b       	sbc	r25, r17
		tc_y_buf -= tc_y_min;
    43be:	ef 81       	ldd	r30, Y+7	; 0x07
    43c0:	f8 85       	ldd	r31, Y+8	; 0x08
    43c2:	8e 1b       	sub	r24, r30
    43c4:	9f 0b       	sbc	r25, r31
		tc_y_buf = tc_y_buf >> 1;

		if (TCIsPenOn())
		{
			x = cal_posx(tc_x_buf);
			y = cal_posy(tc_y_buf);
    43c6:	96 95       	lsr	r25
    43c8:	87 95       	ror	r24
    43ca:	0e 94 34 1a 	call	0x3468	; 0x3468 <cal_posy>

			if (last_pen_check)
    43ce:	20 91 18 02 	lds	r18, 0x0218
    43d2:	22 23       	and	r18, r18
    43d4:	21 f0       	breq	.+8      	; 0x43de <ScanPen+0x1d8>
			{
				p_stat = PST_HOLD;
    43d6:	22 e0       	ldi	r18, 0x02	; 2
    43d8:	20 93 85 02 	sts	0x0285, r18
    43dc:	03 c0       	rjmp	.+6      	; 0x43e4 <ScanPen+0x1de>
			}
			else
			{
				p_stat = PST_DOWN;
    43de:	21 e0       	ldi	r18, 0x01	; 1
    43e0:	20 93 85 02 	sts	0x0285, r18
			}

			if ((x) && (y) && (x < TS_SIZE_X) && (y < TS_SIZE_Y))
    43e4:	97 01       	movw	r18, r14
    43e6:	86 01       	movw	r16, r12
    43e8:	01 50       	subi	r16, 0x01	; 1
    43ea:	11 09       	sbc	r17, r1
    43ec:	21 09       	sbc	r18, r1
    43ee:	31 09       	sbc	r19, r1
    43f0:	0f 33       	cpi	r16, 0x3F	; 63
    43f2:	11 40       	sbci	r17, 0x01	; 1
    43f4:	21 05       	cpc	r18, r1
    43f6:	31 05       	cpc	r19, r1
    43f8:	08 f0       	brcs	.+2      	; 0x43fc <ScanPen+0x1f6>
    43fa:	ef c3       	rjmp	.+2014   	; 0x4bda <ScanPen+0x9d4>
    43fc:	8b 01       	movw	r16, r22
    43fe:	9c 01       	movw	r18, r24
    4400:	01 50       	subi	r16, 0x01	; 1
    4402:	11 09       	sbc	r17, r1
    4404:	21 09       	sbc	r18, r1
    4406:	31 09       	sbc	r19, r1
    4408:	0f 3e       	cpi	r16, 0xEF	; 239
    440a:	11 05       	cpc	r17, r1
    440c:	21 05       	cpc	r18, r1
    440e:	31 05       	cpc	r19, r1
    4410:	08 f0       	brcs	.+2      	; 0x4414 <ScanPen+0x20e>
    4412:	e3 c3       	rjmp	.+1990   	; 0x4bda <ScanPen+0x9d4>
			{
				hpos = x;
    4414:	d0 92 b9 02 	sts	0x02B9, r13
    4418:	c0 92 b8 02 	sts	0x02B8, r12
				vpos = y;
    441c:	9b 01       	movw	r18, r22
    441e:	70 93 87 02 	sts	0x0287, r23
    4422:	60 93 86 02 	sts	0x0286, r22

				if (p_stat == PST_DOWN)
    4426:	40 91 85 02 	lds	r20, 0x0285
    442a:	41 30       	cpi	r20, 0x01	; 1
    442c:	09 f0       	breq	.+2      	; 0x4430 <ScanPen+0x22a>
    442e:	d5 c3       	rjmp	.+1962   	; 0x4bda <ScanPen+0x9d4>
				{
					
					switch (currentScreen) {
    4430:	40 91 83 02 	lds	r20, 0x0283
    4434:	50 91 84 02 	lds	r21, 0x0284
    4438:	42 30       	cpi	r20, 0x02	; 2
    443a:	51 05       	cpc	r21, r1
    443c:	09 f4       	brne	.+2      	; 0x4440 <ScanPen+0x23a>
    443e:	03 c1       	rjmp	.+518    	; 0x4646 <ScanPen+0x440>
    4440:	44 f4       	brge	.+16     	; 0x4452 <ScanPen+0x24c>
    4442:	41 15       	cp	r20, r1
    4444:	51 05       	cpc	r21, r1
    4446:	81 f0       	breq	.+32     	; 0x4468 <ScanPen+0x262>
    4448:	41 30       	cpi	r20, 0x01	; 1
    444a:	51 05       	cpc	r21, r1
    444c:	09 f4       	brne	.+2      	; 0x4450 <ScanPen+0x24a>
    444e:	ba c0       	rjmp	.+372    	; 0x45c4 <ScanPen+0x3be>
    4450:	c4 c3       	rjmp	.+1928   	; 0x4bda <ScanPen+0x9d4>
    4452:	44 30       	cpi	r20, 0x04	; 4
    4454:	51 05       	cpc	r21, r1
    4456:	09 f4       	brne	.+2      	; 0x445a <ScanPen+0x254>
    4458:	a4 c1       	rjmp	.+840    	; 0x47a2 <ScanPen+0x59c>
    445a:	0c f4       	brge	.+2      	; 0x445e <ScanPen+0x258>
    445c:	4b c1       	rjmp	.+662    	; 0x46f4 <ScanPen+0x4ee>
    445e:	45 30       	cpi	r20, 0x05	; 5
    4460:	51 05       	cpc	r21, r1
    4462:	09 f4       	brne	.+2      	; 0x4466 <ScanPen+0x260>
    4464:	df c1       	rjmp	.+958    	; 0x4824 <ScanPen+0x61e>
    4466:	b9 c3       	rjmp	.+1906   	; 0x4bda <ScanPen+0x9d4>
						case 0:
						if (vpos >= 5 && vpos <= GetMaxX() - 5 && hpos >= 62 && hpos <= 117) {
    4468:	ab 01       	movw	r20, r22
    446a:	45 50       	subi	r20, 0x05	; 5
    446c:	51 09       	sbc	r21, r1
    446e:	46 3e       	cpi	r20, 0xE6	; 230
    4470:	51 05       	cpc	r21, r1
    4472:	08 f0       	brcs	.+2      	; 0x4476 <ScanPen+0x270>
    4474:	b2 c3       	rjmp	.+1892   	; 0x4bda <ScanPen+0x9d4>
    4476:	c6 01       	movw	r24, r12
    4478:	ce 97       	sbiw	r24, 0x3e	; 62
    447a:	c8 97       	sbiw	r24, 0x38	; 56
    447c:	08 f5       	brcc	.+66     	; 0x44c0 <ScanPen+0x2ba>
							SetColor(GREEN_SEA);
    447e:	80 e1       	ldi	r24, 0x10	; 16
    4480:	95 e1       	ldi	r25, 0x15	; 21
    4482:	90 93 79 00 	sts	0x0079, r25
    4486:	80 93 78 00 	sts	0x0078, r24
							FillRectangle(GetMaxX() - 5, 62, GetMaxX(), 117);
    448a:	00 e1       	ldi	r16, 0x10	; 16
    448c:	15 e1       	ldi	r17, 0x15	; 21
    448e:	25 e7       	ldi	r18, 0x75	; 117
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	4f ee       	ldi	r20, 0xEF	; 239
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	6e e3       	ldi	r22, 0x3E	; 62
    4498:	70 e0       	ldi	r23, 0x00	; 0
    449a:	8a ee       	ldi	r24, 0xEA	; 234
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
							SetColor(CLOUDS);
    44a2:	8e e9       	ldi	r24, 0x9E	; 158
    44a4:	9f ee       	ldi	r25, 0xEF	; 239
    44a6:	90 93 79 00 	sts	0x0079, r25
    44aa:	80 93 78 00 	sts	0x0078, r24
							currentScreen = 1;
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	90 93 84 02 	sts	0x0284, r25
    44b6:	80 93 83 02 	sts	0x0283, r24
							showLiveGPS();
    44ba:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <showLiveGPS>
    44be:	8d c3       	rjmp	.+1818   	; 0x4bda <ScanPen+0x9d4>
							} else if (vpos >= 5 && vpos <= GetMaxX() - 5 && hpos >= 122 && hpos <= 177) {
    44c0:	c6 01       	movw	r24, r12
    44c2:	8a 57       	subi	r24, 0x7A	; 122
    44c4:	91 09       	sbc	r25, r1
    44c6:	c8 97       	sbiw	r24, 0x38	; 56
    44c8:	78 f5       	brcc	.+94     	; 0x4528 <ScanPen+0x322>
							SetColor(GREEN_SEA);
    44ca:	80 e1       	ldi	r24, 0x10	; 16
    44cc:	95 e1       	ldi	r25, 0x15	; 21
    44ce:	90 93 79 00 	sts	0x0079, r25
    44d2:	80 93 78 00 	sts	0x0078, r24
							FillRectangle(GetMaxX() - 5, 122, GetMaxX(), 177);
    44d6:	00 e1       	ldi	r16, 0x10	; 16
    44d8:	15 e1       	ldi	r17, 0x15	; 21
    44da:	21 eb       	ldi	r18, 0xB1	; 177
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	4f ee       	ldi	r20, 0xEF	; 239
    44e0:	50 e0       	ldi	r21, 0x00	; 0
    44e2:	6a e7       	ldi	r22, 0x7A	; 122
    44e4:	70 e0       	ldi	r23, 0x00	; 0
    44e6:	8a ee       	ldi	r24, 0xEA	; 234
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
							SetColor(CLOUDS);
    44ee:	8e e9       	ldi	r24, 0x9E	; 158
    44f0:	9f ee       	ldi	r25, 0xEF	; 239
    44f2:	90 93 79 00 	sts	0x0079, r25
    44f6:	80 93 78 00 	sts	0x0078, r24
							currentScreen = 2;
    44fa:	82 e0       	ldi	r24, 0x02	; 2
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	90 93 84 02 	sts	0x0284, r25
    4502:	80 93 83 02 	sts	0x0283, r24
							BevelFill(0, 41, GetMaxX(), GetMaxY(), 0);
    4506:	ee 24       	eor	r14, r14
    4508:	e3 94       	inc	r14
    450a:	00 e0       	ldi	r16, 0x00	; 0
    450c:	10 e0       	ldi	r17, 0x00	; 0
    450e:	2f e3       	ldi	r18, 0x3F	; 63
    4510:	31 e0       	ldi	r19, 0x01	; 1
    4512:	4f ee       	ldi	r20, 0xEF	; 239
    4514:	50 e0       	ldi	r21, 0x00	; 0
    4516:	69 e2       	ldi	r22, 0x29	; 41
    4518:	70 e0       	ldi	r23, 0x00	; 0
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
							showDistances();
    4522:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <showDistances>
    4526:	59 c3       	rjmp	.+1714   	; 0x4bda <ScanPen+0x9d4>
							} else if (vpos >= 5 && vpos <= GetMaxX() - 5 && hpos >= 182 && hpos <= 237) {
    4528:	c6 01       	movw	r24, r12
    452a:	86 5b       	subi	r24, 0xB6	; 182
    452c:	91 09       	sbc	r25, r1
    452e:	c8 97       	sbiw	r24, 0x38	; 56
    4530:	08 f5       	brcc	.+66     	; 0x4574 <ScanPen+0x36e>
							SetColor(GREEN_SEA);
    4532:	80 e1       	ldi	r24, 0x10	; 16
    4534:	95 e1       	ldi	r25, 0x15	; 21
    4536:	90 93 79 00 	sts	0x0079, r25
    453a:	80 93 78 00 	sts	0x0078, r24
							FillRectangle(GetMaxX() - 5, 182, GetMaxX(), 237);
    453e:	00 e1       	ldi	r16, 0x10	; 16
    4540:	15 e1       	ldi	r17, 0x15	; 21
    4542:	2d ee       	ldi	r18, 0xED	; 237
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	4f ee       	ldi	r20, 0xEF	; 239
    4548:	50 e0       	ldi	r21, 0x00	; 0
    454a:	66 eb       	ldi	r22, 0xB6	; 182
    454c:	70 e0       	ldi	r23, 0x00	; 0
    454e:	8a ee       	ldi	r24, 0xEA	; 234
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
							SetColor(CLOUDS);
    4556:	8e e9       	ldi	r24, 0x9E	; 158
    4558:	9f ee       	ldi	r25, 0xEF	; 239
    455a:	90 93 79 00 	sts	0x0079, r25
    455e:	80 93 78 00 	sts	0x0078, r24
							currentScreen = 4;
    4562:	84 e0       	ldi	r24, 0x04	; 4
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	90 93 84 02 	sts	0x0284, r25
    456a:	80 93 83 02 	sts	0x0283, r24
							showAltitude();
    456e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <showAltitude>
    4572:	33 c3       	rjmp	.+1638   	; 0x4bda <ScanPen+0x9d4>
							} else if (vpos >= 5 && vpos <= GetMaxX() - 5 && hpos >= 242 && hpos <= 297) {
    4574:	22 ef       	ldi	r18, 0xF2	; 242
    4576:	c2 1a       	sub	r12, r18
    4578:	d1 08       	sbc	r13, r1
    457a:	38 e3       	ldi	r19, 0x38	; 56
    457c:	c3 16       	cp	r12, r19
    457e:	d1 04       	cpc	r13, r1
    4580:	08 f0       	brcs	.+2      	; 0x4584 <ScanPen+0x37e>
    4582:	2b c3       	rjmp	.+1622   	; 0x4bda <ScanPen+0x9d4>
							SetColor(GREEN_SEA);
    4584:	80 e1       	ldi	r24, 0x10	; 16
    4586:	95 e1       	ldi	r25, 0x15	; 21
    4588:	90 93 79 00 	sts	0x0079, r25
    458c:	80 93 78 00 	sts	0x0078, r24
							FillRectangle(GetMaxX() - 5, 242, GetMaxX(), 297);
    4590:	00 e1       	ldi	r16, 0x10	; 16
    4592:	15 e1       	ldi	r17, 0x15	; 21
    4594:	29 e2       	ldi	r18, 0x29	; 41
    4596:	31 e0       	ldi	r19, 0x01	; 1
    4598:	4f ee       	ldi	r20, 0xEF	; 239
    459a:	50 e0       	ldi	r21, 0x00	; 0
    459c:	62 ef       	ldi	r22, 0xF2	; 242
    459e:	70 e0       	ldi	r23, 0x00	; 0
    45a0:	8a ee       	ldi	r24, 0xEA	; 234
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
							SetColor(CLOUDS);
    45a8:	8e e9       	ldi	r24, 0x9E	; 158
    45aa:	9f ee       	ldi	r25, 0xEF	; 239
    45ac:	90 93 79 00 	sts	0x0079, r25
    45b0:	80 93 78 00 	sts	0x0078, r24
							currentScreen = 5;
    45b4:	85 e0       	ldi	r24, 0x05	; 5
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	90 93 84 02 	sts	0x0284, r25
    45bc:	80 93 83 02 	sts	0x0283, r24
							showCalc();
    45c0:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <showCalc>
						}
						break;
						case 1:
						if (vpos >= 0 && vpos <= 40 && hpos >= 40 && hpos <= 80) {
    45c4:	69 32       	cpi	r22, 0x29	; 41
    45c6:	71 05       	cpc	r23, r1
    45c8:	08 f0       	brcs	.+2      	; 0x45cc <ScanPen+0x3c6>
    45ca:	07 c3       	rjmp	.+1550   	; 0x4bda <ScanPen+0x9d4>
    45cc:	48 e2       	ldi	r20, 0x28	; 40
    45ce:	c4 1a       	sub	r12, r20
    45d0:	d1 08       	sbc	r13, r1
    45d2:	89 e2       	ldi	r24, 0x29	; 41
    45d4:	c8 16       	cp	r12, r24
    45d6:	d1 04       	cpc	r13, r1
    45d8:	08 f0       	brcs	.+2      	; 0x45dc <ScanPen+0x3d6>
    45da:	ff c2       	rjmp	.+1534   	; 0x4bda <ScanPen+0x9d4>
							SetColor(WET_ASPHALT);
    45dc:	8b e4       	ldi	r24, 0x4B	; 75
    45de:	92 e3       	ldi	r25, 0x32	; 50
    45e0:	90 93 79 00 	sts	0x0079, r25
    45e4:	80 93 78 00 	sts	0x0078, r24
							FillRectangle(0, 40, 40, 80);
    45e8:	0b e4       	ldi	r16, 0x4B	; 75
    45ea:	12 e3       	ldi	r17, 0x32	; 50
    45ec:	20 e5       	ldi	r18, 0x50	; 80
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	48 e2       	ldi	r20, 0x28	; 40
    45f2:	50 e0       	ldi	r21, 0x00	; 0
    45f4:	68 e2       	ldi	r22, 0x28	; 40
    45f6:	70 e0       	ldi	r23, 0x00	; 0
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
							SetFgColor(CLOUDS);
    4600:	0f 2e       	mov	r0, r31
    4602:	fe e9       	ldi	r31, 0x9E	; 158
    4604:	cf 2e       	mov	r12, r31
    4606:	ff ee       	ldi	r31, 0xEF	; 239
    4608:	df 2e       	mov	r13, r31
    460a:	f0 2d       	mov	r31, r0
    460c:	d0 92 64 00 	sts	0x0064, r13
    4610:	c0 92 63 00 	sts	0x0063, r12
							DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
    4614:	ee 24       	eor	r14, r14
    4616:	e3 94       	inc	r14
    4618:	09 e9       	ldi	r16, 0x99	; 153
    461a:	10 e0       	ldi	r17, 0x00	; 0
    461c:	20 e5       	ldi	r18, 0x50	; 80
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	48 e2       	ldi	r20, 0x28	; 40
    4622:	50 e0       	ldi	r21, 0x00	; 0
    4624:	68 e2       	ldi	r22, 0x28	; 40
    4626:	70 e0       	ldi	r23, 0x00	; 0
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
							SetColor(CLOUDS);
    4630:	d0 92 79 00 	sts	0x0079, r13
    4634:	c0 92 78 00 	sts	0x0078, r12
							currentScreen = 0;
    4638:	10 92 84 02 	sts	0x0284, r1
    463c:	10 92 83 02 	sts	0x0283, r1
							showMenu();
    4640:	0e 94 04 2a 	call	0x5408	; 0x5408 <showMenu>
    4644:	ca c2       	rjmp	.+1428   	; 0x4bda <ScanPen+0x9d4>
						}
						break;
						case 2:
						if (vpos >= 0 && vpos <= 40 && hpos >= 40 && hpos <= 80) {
    4646:	69 32       	cpi	r22, 0x29	; 41
    4648:	71 05       	cpc	r23, r1
    464a:	d8 f5       	brcc	.+118    	; 0x46c2 <ScanPen+0x4bc>
    464c:	96 01       	movw	r18, r12
    464e:	28 52       	subi	r18, 0x28	; 40
    4650:	31 09       	sbc	r19, r1
    4652:	29 32       	cpi	r18, 0x29	; 41
    4654:	31 05       	cpc	r19, r1
    4656:	a8 f5       	brcc	.+106    	; 0x46c2 <ScanPen+0x4bc>
							SetColor(WET_ASPHALT);
    4658:	8b e4       	ldi	r24, 0x4B	; 75
    465a:	92 e3       	ldi	r25, 0x32	; 50
    465c:	90 93 79 00 	sts	0x0079, r25
    4660:	80 93 78 00 	sts	0x0078, r24
							FillRectangle(0, 40, 40, 80);
    4664:	0b e4       	ldi	r16, 0x4B	; 75
    4666:	12 e3       	ldi	r17, 0x32	; 50
    4668:	20 e5       	ldi	r18, 0x50	; 80
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	48 e2       	ldi	r20, 0x28	; 40
    466e:	50 e0       	ldi	r21, 0x00	; 0
    4670:	68 e2       	ldi	r22, 0x28	; 40
    4672:	70 e0       	ldi	r23, 0x00	; 0
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
							SetFgColor(CLOUDS);
    467c:	0f 2e       	mov	r0, r31
    467e:	fe e9       	ldi	r31, 0x9E	; 158
    4680:	cf 2e       	mov	r12, r31
    4682:	ff ee       	ldi	r31, 0xEF	; 239
    4684:	df 2e       	mov	r13, r31
    4686:	f0 2d       	mov	r31, r0
    4688:	d0 92 64 00 	sts	0x0064, r13
    468c:	c0 92 63 00 	sts	0x0063, r12
							DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
    4690:	ee 24       	eor	r14, r14
    4692:	e3 94       	inc	r14
    4694:	09 e9       	ldi	r16, 0x99	; 153
    4696:	10 e0       	ldi	r17, 0x00	; 0
    4698:	20 e5       	ldi	r18, 0x50	; 80
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	48 e2       	ldi	r20, 0x28	; 40
    469e:	50 e0       	ldi	r21, 0x00	; 0
    46a0:	68 e2       	ldi	r22, 0x28	; 40
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
							SetColor(CLOUDS);
    46ac:	d0 92 79 00 	sts	0x0079, r13
    46b0:	c0 92 78 00 	sts	0x0078, r12
							currentScreen = 0;
    46b4:	10 92 84 02 	sts	0x0284, r1
    46b8:	10 92 83 02 	sts	0x0283, r1
							showMenu();
    46bc:	0e 94 04 2a 	call	0x5408	; 0x5408 <showMenu>
    46c0:	8c c2       	rjmp	.+1304   	; 0x4bda <ScanPen+0x9d4>
							} else if (vpos >= GetMaxX() / 2 && vpos <= GetMaxX() - 20 && hpos >= GetMaxY() - 50 && hpos <= GetMaxY() - 20) {
    46c2:	ab 01       	movw	r20, r22
    46c4:	47 57       	subi	r20, 0x77	; 119
    46c6:	51 09       	sbc	r21, r1
    46c8:	45 36       	cpi	r20, 0x65	; 101
    46ca:	51 05       	cpc	r21, r1
    46cc:	08 f0       	brcs	.+2      	; 0x46d0 <ScanPen+0x4ca>
    46ce:	85 c2       	rjmp	.+1290   	; 0x4bda <ScanPen+0x9d4>
    46d0:	ed e0       	ldi	r30, 0x0D	; 13
    46d2:	ce 1a       	sub	r12, r30
    46d4:	e1 e0       	ldi	r30, 0x01	; 1
    46d6:	de 0a       	sbc	r13, r30
    46d8:	ff e1       	ldi	r31, 0x1F	; 31
    46da:	cf 16       	cp	r12, r31
    46dc:	d1 04       	cpc	r13, r1
    46de:	08 f0       	brcs	.+2      	; 0x46e2 <ScanPen+0x4dc>
    46e0:	7c c2       	rjmp	.+1272   	; 0x4bda <ScanPen+0x9d4>
							currentScreen = 3;
    46e2:	83 e0       	ldi	r24, 0x03	; 3
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	90 93 84 02 	sts	0x0284, r25
    46ea:	80 93 83 02 	sts	0x0283, r24
							showDistances();
    46ee:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <showDistances>
    46f2:	73 c2       	rjmp	.+1254   	; 0x4bda <ScanPen+0x9d4>
						}
						break;
						case 3:
						if (vpos >= 0 && vpos <= 40 && hpos >= 40 && hpos <= 80) {
    46f4:	69 32       	cpi	r22, 0x29	; 41
    46f6:	71 05       	cpc	r23, r1
    46f8:	d8 f5       	brcc	.+118    	; 0x4770 <ScanPen+0x56a>
    46fa:	96 01       	movw	r18, r12
    46fc:	28 52       	subi	r18, 0x28	; 40
    46fe:	31 09       	sbc	r19, r1
    4700:	29 32       	cpi	r18, 0x29	; 41
    4702:	31 05       	cpc	r19, r1
    4704:	a8 f5       	brcc	.+106    	; 0x4770 <ScanPen+0x56a>
							SetColor(WET_ASPHALT);
    4706:	8b e4       	ldi	r24, 0x4B	; 75
    4708:	92 e3       	ldi	r25, 0x32	; 50
    470a:	90 93 79 00 	sts	0x0079, r25
    470e:	80 93 78 00 	sts	0x0078, r24
							FillRectangle(0, 40, 40, 80);
    4712:	0b e4       	ldi	r16, 0x4B	; 75
    4714:	12 e3       	ldi	r17, 0x32	; 50
    4716:	20 e5       	ldi	r18, 0x50	; 80
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	48 e2       	ldi	r20, 0x28	; 40
    471c:	50 e0       	ldi	r21, 0x00	; 0
    471e:	68 e2       	ldi	r22, 0x28	; 40
    4720:	70 e0       	ldi	r23, 0x00	; 0
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
							SetFgColor(CLOUDS);
    472a:	0f 2e       	mov	r0, r31
    472c:	fe e9       	ldi	r31, 0x9E	; 158
    472e:	cf 2e       	mov	r12, r31
    4730:	ff ee       	ldi	r31, 0xEF	; 239
    4732:	df 2e       	mov	r13, r31
    4734:	f0 2d       	mov	r31, r0
    4736:	d0 92 64 00 	sts	0x0064, r13
    473a:	c0 92 63 00 	sts	0x0063, r12
							DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
    473e:	ee 24       	eor	r14, r14
    4740:	e3 94       	inc	r14
    4742:	09 e9       	ldi	r16, 0x99	; 153
    4744:	10 e0       	ldi	r17, 0x00	; 0
    4746:	20 e5       	ldi	r18, 0x50	; 80
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	48 e2       	ldi	r20, 0x28	; 40
    474c:	50 e0       	ldi	r21, 0x00	; 0
    474e:	68 e2       	ldi	r22, 0x28	; 40
    4750:	70 e0       	ldi	r23, 0x00	; 0
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
							SetColor(CLOUDS);
    475a:	d0 92 79 00 	sts	0x0079, r13
    475e:	c0 92 78 00 	sts	0x0078, r12
							currentScreen = 0;
    4762:	10 92 84 02 	sts	0x0284, r1
    4766:	10 92 83 02 	sts	0x0283, r1
							showMenu();
    476a:	0e 94 04 2a 	call	0x5408	; 0x5408 <showMenu>
    476e:	35 c2       	rjmp	.+1130   	; 0x4bda <ScanPen+0x9d4>
							} else if (vpos >= 20 && vpos <= GetMaxX() / 2 && hpos >= GetMaxY() - 50 && hpos <= GetMaxY() - 20) {
    4770:	ab 01       	movw	r20, r22
    4772:	44 51       	subi	r20, 0x14	; 20
    4774:	51 09       	sbc	r21, r1
    4776:	44 36       	cpi	r20, 0x64	; 100
    4778:	51 05       	cpc	r21, r1
    477a:	08 f0       	brcs	.+2      	; 0x477e <ScanPen+0x578>
    477c:	2e c2       	rjmp	.+1116   	; 0x4bda <ScanPen+0x9d4>
    477e:	2d e0       	ldi	r18, 0x0D	; 13
    4780:	c2 1a       	sub	r12, r18
    4782:	21 e0       	ldi	r18, 0x01	; 1
    4784:	d2 0a       	sbc	r13, r18
    4786:	3f e1       	ldi	r19, 0x1F	; 31
    4788:	c3 16       	cp	r12, r19
    478a:	d1 04       	cpc	r13, r1
    478c:	08 f0       	brcs	.+2      	; 0x4790 <ScanPen+0x58a>
    478e:	25 c2       	rjmp	.+1098   	; 0x4bda <ScanPen+0x9d4>
							currentScreen = 2;
    4790:	82 e0       	ldi	r24, 0x02	; 2
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	90 93 84 02 	sts	0x0284, r25
    4798:	80 93 83 02 	sts	0x0283, r24
							showDistances();
    479c:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <showDistances>
    47a0:	1c c2       	rjmp	.+1080   	; 0x4bda <ScanPen+0x9d4>
						}
						break;
						case 4:
						if (vpos >= 0 && vpos <= 40 && hpos >= 40 && hpos <= 80) {
    47a2:	69 32       	cpi	r22, 0x29	; 41
    47a4:	71 05       	cpc	r23, r1
    47a6:	08 f0       	brcs	.+2      	; 0x47aa <ScanPen+0x5a4>
    47a8:	18 c2       	rjmp	.+1072   	; 0x4bda <ScanPen+0x9d4>
    47aa:	48 e2       	ldi	r20, 0x28	; 40
    47ac:	c4 1a       	sub	r12, r20
    47ae:	d1 08       	sbc	r13, r1
    47b0:	89 e2       	ldi	r24, 0x29	; 41
    47b2:	c8 16       	cp	r12, r24
    47b4:	d1 04       	cpc	r13, r1
    47b6:	08 f0       	brcs	.+2      	; 0x47ba <ScanPen+0x5b4>
    47b8:	10 c2       	rjmp	.+1056   	; 0x4bda <ScanPen+0x9d4>
							SetColor(WET_ASPHALT);
    47ba:	8b e4       	ldi	r24, 0x4B	; 75
    47bc:	92 e3       	ldi	r25, 0x32	; 50
    47be:	90 93 79 00 	sts	0x0079, r25
    47c2:	80 93 78 00 	sts	0x0078, r24
							FillRectangle(0, 40, 40, 80);
    47c6:	0b e4       	ldi	r16, 0x4B	; 75
    47c8:	12 e3       	ldi	r17, 0x32	; 50
    47ca:	20 e5       	ldi	r18, 0x50	; 80
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	48 e2       	ldi	r20, 0x28	; 40
    47d0:	50 e0       	ldi	r21, 0x00	; 0
    47d2:	68 e2       	ldi	r22, 0x28	; 40
    47d4:	70 e0       	ldi	r23, 0x00	; 0
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
							SetFgColor(CLOUDS);
    47de:	0f 2e       	mov	r0, r31
    47e0:	fe e9       	ldi	r31, 0x9E	; 158
    47e2:	cf 2e       	mov	r12, r31
    47e4:	ff ee       	ldi	r31, 0xEF	; 239
    47e6:	df 2e       	mov	r13, r31
    47e8:	f0 2d       	mov	r31, r0
    47ea:	d0 92 64 00 	sts	0x0064, r13
    47ee:	c0 92 63 00 	sts	0x0063, r12
							DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
    47f2:	ee 24       	eor	r14, r14
    47f4:	e3 94       	inc	r14
    47f6:	09 e9       	ldi	r16, 0x99	; 153
    47f8:	10 e0       	ldi	r17, 0x00	; 0
    47fa:	20 e5       	ldi	r18, 0x50	; 80
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	48 e2       	ldi	r20, 0x28	; 40
    4800:	50 e0       	ldi	r21, 0x00	; 0
    4802:	68 e2       	ldi	r22, 0x28	; 40
    4804:	70 e0       	ldi	r23, 0x00	; 0
    4806:	80 e0       	ldi	r24, 0x00	; 0
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
							SetColor(CLOUDS);
    480e:	d0 92 79 00 	sts	0x0079, r13
    4812:	c0 92 78 00 	sts	0x0078, r12
							currentScreen = 0;
    4816:	10 92 84 02 	sts	0x0284, r1
    481a:	10 92 83 02 	sts	0x0283, r1
							showMenu();
    481e:	0e 94 04 2a 	call	0x5408	; 0x5408 <showMenu>
    4822:	db c1       	rjmp	.+950    	; 0x4bda <ScanPen+0x9d4>
						}
						break;
						case 5:
						if (vpos >= 0 && vpos <= 40 && hpos >= 40 && hpos <= 80) {
    4824:	fb 01       	movw	r30, r22
    4826:	69 32       	cpi	r22, 0x29	; 41
    4828:	71 05       	cpc	r23, r1
    482a:	d8 f5       	brcc	.+118    	; 0x48a2 <ScanPen+0x69c>
    482c:	a6 01       	movw	r20, r12
    482e:	48 52       	subi	r20, 0x28	; 40
    4830:	51 09       	sbc	r21, r1
    4832:	49 32       	cpi	r20, 0x29	; 41
    4834:	51 05       	cpc	r21, r1
    4836:	a8 f5       	brcc	.+106    	; 0x48a2 <ScanPen+0x69c>
							SetColor(WET_ASPHALT);
    4838:	8b e4       	ldi	r24, 0x4B	; 75
    483a:	92 e3       	ldi	r25, 0x32	; 50
    483c:	90 93 79 00 	sts	0x0079, r25
    4840:	80 93 78 00 	sts	0x0078, r24
							FillRectangle(0, 40, 40, 80);
    4844:	0b e4       	ldi	r16, 0x4B	; 75
    4846:	12 e3       	ldi	r17, 0x32	; 50
    4848:	20 e5       	ldi	r18, 0x50	; 80
    484a:	30 e0       	ldi	r19, 0x00	; 0
    484c:	48 e2       	ldi	r20, 0x28	; 40
    484e:	50 e0       	ldi	r21, 0x00	; 0
    4850:	68 e2       	ldi	r22, 0x28	; 40
    4852:	70 e0       	ldi	r23, 0x00	; 0
    4854:	80 e0       	ldi	r24, 0x00	; 0
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
							SetFgColor(CLOUDS);
    485c:	0f 2e       	mov	r0, r31
    485e:	fe e9       	ldi	r31, 0x9E	; 158
    4860:	cf 2e       	mov	r12, r31
    4862:	ff ee       	ldi	r31, 0xEF	; 239
    4864:	df 2e       	mov	r13, r31
    4866:	f0 2d       	mov	r31, r0
    4868:	d0 92 64 00 	sts	0x0064, r13
    486c:	c0 92 63 00 	sts	0x0063, r12
							DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
    4870:	ee 24       	eor	r14, r14
    4872:	e3 94       	inc	r14
    4874:	09 e9       	ldi	r16, 0x99	; 153
    4876:	10 e0       	ldi	r17, 0x00	; 0
    4878:	20 e5       	ldi	r18, 0x50	; 80
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	48 e2       	ldi	r20, 0x28	; 40
    487e:	50 e0       	ldi	r21, 0x00	; 0
    4880:	68 e2       	ldi	r22, 0x28	; 40
    4882:	70 e0       	ldi	r23, 0x00	; 0
    4884:	80 e0       	ldi	r24, 0x00	; 0
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
							SetColor(CLOUDS);
    488c:	d0 92 79 00 	sts	0x0079, r13
    4890:	c0 92 78 00 	sts	0x0078, r12
							currentScreen = 0;
    4894:	10 92 84 02 	sts	0x0284, r1
    4898:	10 92 83 02 	sts	0x0283, r1
							showMenu();
    489c:	0e 94 04 2a 	call	0x5408	; 0x5408 <showMenu>
    48a0:	9c c1       	rjmp	.+824    	; 0x4bda <ScanPen+0x9d4>
							} else if (focusedField < 2 && vpos >= 10 && vpos <= 50 && hpos >= GetMaxY() - 125 && hpos <= GetMaxY() - 90) {
    48a2:	00 91 19 02 	lds	r16, 0x0219
    48a6:	10 91 1a 02 	lds	r17, 0x021A
    48aa:	02 30       	cpi	r16, 0x02	; 2
    48ac:	11 05       	cpc	r17, r1
    48ae:	0c f0       	brlt	.+2      	; 0x48b2 <ScanPen+0x6ac>
    48b0:	85 c1       	rjmp	.+778    	; 0x4bbc <ScanPen+0x9b6>
    48b2:	db 01       	movw	r26, r22
    48b4:	1a 97       	sbiw	r26, 0x0a	; 10
    48b6:	99 97       	sbiw	r26, 0x29	; 41
    48b8:	08 f0       	brcs	.+2      	; 0x48bc <ScanPen+0x6b6>
    48ba:	57 c0       	rjmp	.+174    	; 0x496a <ScanPen+0x764>
    48bc:	d6 01       	movw	r26, r12
    48be:	a2 5c       	subi	r26, 0xC2	; 194
    48c0:	b1 09       	sbc	r27, r1
    48c2:	94 97       	sbiw	r26, 0x24	; 36
    48c4:	c0 f4       	brcc	.+48     	; 0x48f6 <ScanPen+0x6f0>
							if (focusedField == 0) {
    48c6:	01 2b       	or	r16, r17
    48c8:	59 f4       	brne	.+22     	; 0x48e0 <ScanPen+0x6da>
								strcat(latitudeInput, "7");
    48ca:	ed e6       	ldi	r30, 0x6D	; 109
    48cc:	f2 e0       	ldi	r31, 0x02	; 2
    48ce:	01 90       	ld	r0, Z+
    48d0:	00 20       	and	r0, r0
    48d2:	e9 f7       	brne	.-6      	; 0x48ce <ScanPen+0x6c8>
    48d4:	31 97       	sbiw	r30, 0x01	; 1
    48d6:	87 e3       	ldi	r24, 0x37	; 55
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	91 83       	std	Z+1, r25	; 0x01
    48dc:	80 83       	st	Z, r24
    48de:	7d c1       	rjmp	.+762    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "7");
    48e0:	e8 e7       	ldi	r30, 0x78	; 120
    48e2:	f2 e0       	ldi	r31, 0x02	; 2
    48e4:	01 90       	ld	r0, Z+
    48e6:	00 20       	and	r0, r0
    48e8:	e9 f7       	brne	.-6      	; 0x48e4 <ScanPen+0x6de>
    48ea:	31 97       	sbiw	r30, 0x01	; 1
    48ec:	87 e3       	ldi	r24, 0x37	; 55
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	91 83       	std	Z+1, r25	; 0x01
    48f2:	80 83       	st	Z, r24
    48f4:	72 c1       	rjmp	.+740    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 10 && vpos <= 50 && hpos >= GetMaxY() - 85 && hpos <= GetMaxY() - 50) {
    48f6:	d6 01       	movw	r26, r12
    48f8:	aa 5e       	subi	r26, 0xEA	; 234
    48fa:	b1 09       	sbc	r27, r1
    48fc:	94 97       	sbiw	r26, 0x24	; 36
    48fe:	c0 f4       	brcc	.+48     	; 0x4930 <ScanPen+0x72a>
							if (focusedField == 0) {
    4900:	01 2b       	or	r16, r17
    4902:	59 f4       	brne	.+22     	; 0x491a <ScanPen+0x714>
								strcat(latitudeInput, "4");
    4904:	ed e6       	ldi	r30, 0x6D	; 109
    4906:	f2 e0       	ldi	r31, 0x02	; 2
    4908:	01 90       	ld	r0, Z+
    490a:	00 20       	and	r0, r0
    490c:	e9 f7       	brne	.-6      	; 0x4908 <ScanPen+0x702>
    490e:	31 97       	sbiw	r30, 0x01	; 1
    4910:	84 e3       	ldi	r24, 0x34	; 52
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	91 83       	std	Z+1, r25	; 0x01
    4916:	80 83       	st	Z, r24
    4918:	60 c1       	rjmp	.+704    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "4");
    491a:	e8 e7       	ldi	r30, 0x78	; 120
    491c:	f2 e0       	ldi	r31, 0x02	; 2
    491e:	01 90       	ld	r0, Z+
    4920:	00 20       	and	r0, r0
    4922:	e9 f7       	brne	.-6      	; 0x491e <ScanPen+0x718>
    4924:	31 97       	sbiw	r30, 0x01	; 1
    4926:	84 e3       	ldi	r24, 0x34	; 52
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	91 83       	std	Z+1, r25	; 0x01
    492c:	80 83       	st	Z, r24
    492e:	55 c1       	rjmp	.+682    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 10 && vpos <= 50 && hpos >= GetMaxY() - 45 && hpos <= GetMaxY() - 10) {
    4930:	d6 01       	movw	r26, r12
    4932:	a2 51       	subi	r26, 0x12	; 18
    4934:	b1 40       	sbci	r27, 0x01	; 1
    4936:	94 97       	sbiw	r26, 0x24	; 36
    4938:	c0 f4       	brcc	.+48     	; 0x496a <ScanPen+0x764>
							if (focusedField == 0) {
    493a:	01 2b       	or	r16, r17
    493c:	59 f4       	brne	.+22     	; 0x4954 <ScanPen+0x74e>
								strcat(latitudeInput, "1");
    493e:	ed e6       	ldi	r30, 0x6D	; 109
    4940:	f2 e0       	ldi	r31, 0x02	; 2
    4942:	01 90       	ld	r0, Z+
    4944:	00 20       	and	r0, r0
    4946:	e9 f7       	brne	.-6      	; 0x4942 <ScanPen+0x73c>
    4948:	31 97       	sbiw	r30, 0x01	; 1
    494a:	81 e3       	ldi	r24, 0x31	; 49
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	91 83       	std	Z+1, r25	; 0x01
    4950:	80 83       	st	Z, r24
    4952:	43 c1       	rjmp	.+646    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "1");
    4954:	e8 e7       	ldi	r30, 0x78	; 120
    4956:	f2 e0       	ldi	r31, 0x02	; 2
    4958:	01 90       	ld	r0, Z+
    495a:	00 20       	and	r0, r0
    495c:	e9 f7       	brne	.-6      	; 0x4958 <ScanPen+0x752>
    495e:	31 97       	sbiw	r30, 0x01	; 1
    4960:	81 e3       	ldi	r24, 0x31	; 49
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	91 83       	std	Z+1, r25	; 0x01
    4966:	80 83       	st	Z, r24
    4968:	38 c1       	rjmp	.+624    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 55 && vpos <= 95 && hpos >= GetMaxY() - 125 && hpos <= GetMaxY() - 90) {
    496a:	db 01       	movw	r26, r22
    496c:	d7 97       	sbiw	r26, 0x37	; 55
    496e:	99 97       	sbiw	r26, 0x29	; 41
    4970:	08 f0       	brcs	.+2      	; 0x4974 <ScanPen+0x76e>
    4972:	57 c0       	rjmp	.+174    	; 0x4a22 <ScanPen+0x81c>
    4974:	d6 01       	movw	r26, r12
    4976:	a2 5c       	subi	r26, 0xC2	; 194
    4978:	b1 09       	sbc	r27, r1
    497a:	94 97       	sbiw	r26, 0x24	; 36
    497c:	c0 f4       	brcc	.+48     	; 0x49ae <ScanPen+0x7a8>
							if (focusedField == 0) {
    497e:	01 2b       	or	r16, r17
    4980:	59 f4       	brne	.+22     	; 0x4998 <ScanPen+0x792>
								strcat(latitudeInput, "8");
    4982:	ed e6       	ldi	r30, 0x6D	; 109
    4984:	f2 e0       	ldi	r31, 0x02	; 2
    4986:	01 90       	ld	r0, Z+
    4988:	00 20       	and	r0, r0
    498a:	e9 f7       	brne	.-6      	; 0x4986 <ScanPen+0x780>
    498c:	31 97       	sbiw	r30, 0x01	; 1
    498e:	88 e3       	ldi	r24, 0x38	; 56
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	91 83       	std	Z+1, r25	; 0x01
    4994:	80 83       	st	Z, r24
    4996:	21 c1       	rjmp	.+578    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "8");
    4998:	e8 e7       	ldi	r30, 0x78	; 120
    499a:	f2 e0       	ldi	r31, 0x02	; 2
    499c:	01 90       	ld	r0, Z+
    499e:	00 20       	and	r0, r0
    49a0:	e9 f7       	brne	.-6      	; 0x499c <ScanPen+0x796>
    49a2:	31 97       	sbiw	r30, 0x01	; 1
    49a4:	88 e3       	ldi	r24, 0x38	; 56
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	91 83       	std	Z+1, r25	; 0x01
    49aa:	80 83       	st	Z, r24
    49ac:	16 c1       	rjmp	.+556    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 55 && vpos <= 95 && hpos >= GetMaxY() - 85 && hpos <= GetMaxY() - 50) {
    49ae:	d6 01       	movw	r26, r12
    49b0:	aa 5e       	subi	r26, 0xEA	; 234
    49b2:	b1 09       	sbc	r27, r1
    49b4:	94 97       	sbiw	r26, 0x24	; 36
    49b6:	c0 f4       	brcc	.+48     	; 0x49e8 <ScanPen+0x7e2>
							if (focusedField == 0) {
    49b8:	01 2b       	or	r16, r17
    49ba:	59 f4       	brne	.+22     	; 0x49d2 <ScanPen+0x7cc>
								strcat(latitudeInput, "5");
    49bc:	ed e6       	ldi	r30, 0x6D	; 109
    49be:	f2 e0       	ldi	r31, 0x02	; 2
    49c0:	01 90       	ld	r0, Z+
    49c2:	00 20       	and	r0, r0
    49c4:	e9 f7       	brne	.-6      	; 0x49c0 <ScanPen+0x7ba>
    49c6:	31 97       	sbiw	r30, 0x01	; 1
    49c8:	85 e3       	ldi	r24, 0x35	; 53
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	91 83       	std	Z+1, r25	; 0x01
    49ce:	80 83       	st	Z, r24
    49d0:	04 c1       	rjmp	.+520    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "5");
    49d2:	e8 e7       	ldi	r30, 0x78	; 120
    49d4:	f2 e0       	ldi	r31, 0x02	; 2
    49d6:	01 90       	ld	r0, Z+
    49d8:	00 20       	and	r0, r0
    49da:	e9 f7       	brne	.-6      	; 0x49d6 <ScanPen+0x7d0>
    49dc:	31 97       	sbiw	r30, 0x01	; 1
    49de:	85 e3       	ldi	r24, 0x35	; 53
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	91 83       	std	Z+1, r25	; 0x01
    49e4:	80 83       	st	Z, r24
    49e6:	f9 c0       	rjmp	.+498    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 55 && vpos <= 95 && hpos >= GetMaxY() - 45 && hpos <= GetMaxY() - 10) {
    49e8:	d6 01       	movw	r26, r12
    49ea:	a2 51       	subi	r26, 0x12	; 18
    49ec:	b1 40       	sbci	r27, 0x01	; 1
    49ee:	94 97       	sbiw	r26, 0x24	; 36
    49f0:	c0 f4       	brcc	.+48     	; 0x4a22 <ScanPen+0x81c>
							if (focusedField == 0) {
    49f2:	01 2b       	or	r16, r17
    49f4:	59 f4       	brne	.+22     	; 0x4a0c <ScanPen+0x806>
								strcat(latitudeInput, "2");
    49f6:	ed e6       	ldi	r30, 0x6D	; 109
    49f8:	f2 e0       	ldi	r31, 0x02	; 2
    49fa:	01 90       	ld	r0, Z+
    49fc:	00 20       	and	r0, r0
    49fe:	e9 f7       	brne	.-6      	; 0x49fa <ScanPen+0x7f4>
    4a00:	31 97       	sbiw	r30, 0x01	; 1
    4a02:	82 e3       	ldi	r24, 0x32	; 50
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	91 83       	std	Z+1, r25	; 0x01
    4a08:	80 83       	st	Z, r24
    4a0a:	e7 c0       	rjmp	.+462    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "2");
    4a0c:	e8 e7       	ldi	r30, 0x78	; 120
    4a0e:	f2 e0       	ldi	r31, 0x02	; 2
    4a10:	01 90       	ld	r0, Z+
    4a12:	00 20       	and	r0, r0
    4a14:	e9 f7       	brne	.-6      	; 0x4a10 <ScanPen+0x80a>
    4a16:	31 97       	sbiw	r30, 0x01	; 1
    4a18:	82 e3       	ldi	r24, 0x32	; 50
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	91 83       	std	Z+1, r25	; 0x01
    4a1e:	80 83       	st	Z, r24
    4a20:	dc c0       	rjmp	.+440    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 100 && vpos <= 140 && hpos >= GetMaxY() - 125 && hpos <= GetMaxY() - 90) {
    4a22:	ab 01       	movw	r20, r22
    4a24:	44 56       	subi	r20, 0x64	; 100
    4a26:	51 09       	sbc	r21, r1
    4a28:	49 32       	cpi	r20, 0x29	; 41
    4a2a:	51 05       	cpc	r21, r1
    4a2c:	08 f0       	brcs	.+2      	; 0x4a30 <ScanPen+0x82a>
    4a2e:	5a c0       	rjmp	.+180    	; 0x4ae4 <ScanPen+0x8de>
    4a30:	a6 01       	movw	r20, r12
    4a32:	42 5c       	subi	r20, 0xC2	; 194
    4a34:	51 09       	sbc	r21, r1
    4a36:	44 32       	cpi	r20, 0x24	; 36
    4a38:	51 05       	cpc	r21, r1
    4a3a:	c0 f4       	brcc	.+48     	; 0x4a6c <ScanPen+0x866>
							if (focusedField == 0) {
    4a3c:	01 2b       	or	r16, r17
    4a3e:	59 f4       	brne	.+22     	; 0x4a56 <ScanPen+0x850>
								strcat(latitudeInput, "9");
    4a40:	ed e6       	ldi	r30, 0x6D	; 109
    4a42:	f2 e0       	ldi	r31, 0x02	; 2
    4a44:	01 90       	ld	r0, Z+
    4a46:	00 20       	and	r0, r0
    4a48:	e9 f7       	brne	.-6      	; 0x4a44 <ScanPen+0x83e>
    4a4a:	31 97       	sbiw	r30, 0x01	; 1
    4a4c:	89 e3       	ldi	r24, 0x39	; 57
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	91 83       	std	Z+1, r25	; 0x01
    4a52:	80 83       	st	Z, r24
    4a54:	c2 c0       	rjmp	.+388    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "9");
    4a56:	e8 e7       	ldi	r30, 0x78	; 120
    4a58:	f2 e0       	ldi	r31, 0x02	; 2
    4a5a:	01 90       	ld	r0, Z+
    4a5c:	00 20       	and	r0, r0
    4a5e:	e9 f7       	brne	.-6      	; 0x4a5a <ScanPen+0x854>
    4a60:	31 97       	sbiw	r30, 0x01	; 1
    4a62:	89 e3       	ldi	r24, 0x39	; 57
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	91 83       	std	Z+1, r25	; 0x01
    4a68:	80 83       	st	Z, r24
    4a6a:	b7 c0       	rjmp	.+366    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 100 && vpos <= 140 && hpos >= GetMaxY() - 85 && hpos <= GetMaxY() - 50) {
    4a6c:	a6 01       	movw	r20, r12
    4a6e:	4a 5e       	subi	r20, 0xEA	; 234
    4a70:	51 09       	sbc	r21, r1
    4a72:	44 32       	cpi	r20, 0x24	; 36
    4a74:	51 05       	cpc	r21, r1
    4a76:	c0 f4       	brcc	.+48     	; 0x4aa8 <ScanPen+0x8a2>
							if (focusedField == 0) {
    4a78:	01 2b       	or	r16, r17
    4a7a:	59 f4       	brne	.+22     	; 0x4a92 <ScanPen+0x88c>
								strcat(latitudeInput, "6");
    4a7c:	ed e6       	ldi	r30, 0x6D	; 109
    4a7e:	f2 e0       	ldi	r31, 0x02	; 2
    4a80:	01 90       	ld	r0, Z+
    4a82:	00 20       	and	r0, r0
    4a84:	e9 f7       	brne	.-6      	; 0x4a80 <ScanPen+0x87a>
    4a86:	31 97       	sbiw	r30, 0x01	; 1
    4a88:	86 e3       	ldi	r24, 0x36	; 54
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	91 83       	std	Z+1, r25	; 0x01
    4a8e:	80 83       	st	Z, r24
    4a90:	a4 c0       	rjmp	.+328    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "6");
    4a92:	e8 e7       	ldi	r30, 0x78	; 120
    4a94:	f2 e0       	ldi	r31, 0x02	; 2
    4a96:	01 90       	ld	r0, Z+
    4a98:	00 20       	and	r0, r0
    4a9a:	e9 f7       	brne	.-6      	; 0x4a96 <ScanPen+0x890>
    4a9c:	31 97       	sbiw	r30, 0x01	; 1
    4a9e:	86 e3       	ldi	r24, 0x36	; 54
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	91 83       	std	Z+1, r25	; 0x01
    4aa4:	80 83       	st	Z, r24
    4aa6:	99 c0       	rjmp	.+306    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 100 && vpos <= 140 && hpos >= GetMaxY() - 45 && hpos <= GetMaxY() - 10) {
    4aa8:	a6 01       	movw	r20, r12
    4aaa:	42 51       	subi	r20, 0x12	; 18
    4aac:	51 40       	sbci	r21, 0x01	; 1
    4aae:	44 32       	cpi	r20, 0x24	; 36
    4ab0:	51 05       	cpc	r21, r1
    4ab2:	c0 f4       	brcc	.+48     	; 0x4ae4 <ScanPen+0x8de>
							if (focusedField == 0) {
    4ab4:	01 2b       	or	r16, r17
    4ab6:	59 f4       	brne	.+22     	; 0x4ace <ScanPen+0x8c8>
								strcat(latitudeInput, "3");
    4ab8:	ed e6       	ldi	r30, 0x6D	; 109
    4aba:	f2 e0       	ldi	r31, 0x02	; 2
    4abc:	01 90       	ld	r0, Z+
    4abe:	00 20       	and	r0, r0
    4ac0:	e9 f7       	brne	.-6      	; 0x4abc <ScanPen+0x8b6>
    4ac2:	31 97       	sbiw	r30, 0x01	; 1
    4ac4:	83 e3       	ldi	r24, 0x33	; 51
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	91 83       	std	Z+1, r25	; 0x01
    4aca:	80 83       	st	Z, r24
    4acc:	86 c0       	rjmp	.+268    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "3");
    4ace:	e8 e7       	ldi	r30, 0x78	; 120
    4ad0:	f2 e0       	ldi	r31, 0x02	; 2
    4ad2:	01 90       	ld	r0, Z+
    4ad4:	00 20       	and	r0, r0
    4ad6:	e9 f7       	brne	.-6      	; 0x4ad2 <ScanPen+0x8cc>
    4ad8:	31 97       	sbiw	r30, 0x01	; 1
    4ada:	83 e3       	ldi	r24, 0x33	; 51
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	91 83       	std	Z+1, r25	; 0x01
    4ae0:	80 83       	st	Z, r24
    4ae2:	7b c0       	rjmp	.+246    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 150 && vpos <= GetMaxX() - 10 && hpos >= GetMaxY() - 125 && hpos <= GetMaxY() - 90) {
    4ae4:	26 39       	cpi	r18, 0x96	; 150
    4ae6:	31 05       	cpc	r19, r1
    4ae8:	0c f4       	brge	.+2      	; 0x4aec <ScanPen+0x8e6>
    4aea:	53 c0       	rjmp	.+166    	; 0x4b92 <ScanPen+0x98c>
    4aec:	e6 3e       	cpi	r30, 0xE6	; 230
    4aee:	f1 05       	cpc	r31, r1
    4af0:	78 f5       	brcc	.+94     	; 0x4b50 <ScanPen+0x94a>
    4af2:	a6 01       	movw	r20, r12
    4af4:	42 5c       	subi	r20, 0xC2	; 194
    4af6:	51 09       	sbc	r21, r1
    4af8:	44 32       	cpi	r20, 0x24	; 36
    4afa:	51 05       	cpc	r21, r1
    4afc:	58 f4       	brcc	.+22     	; 0x4b14 <ScanPen+0x90e>
							strcat(longitudeInput, "3");
    4afe:	e8 e7       	ldi	r30, 0x78	; 120
    4b00:	f2 e0       	ldi	r31, 0x02	; 2
    4b02:	01 90       	ld	r0, Z+
    4b04:	00 20       	and	r0, r0
    4b06:	e9 f7       	brne	.-6      	; 0x4b02 <ScanPen+0x8fc>
    4b08:	31 97       	sbiw	r30, 0x01	; 1
    4b0a:	83 e3       	ldi	r24, 0x33	; 51
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	91 83       	std	Z+1, r25	; 0x01
    4b10:	80 83       	st	Z, r24
    4b12:	63 c0       	rjmp	.+198    	; 0x4bda <ScanPen+0x9d4>
							} else if (focusedField < 2 && vpos >= 150 && vpos <= GetMaxX() - 10 && hpos >= GetMaxY() - 85 && hpos <= GetMaxY() - 50) {
    4b14:	a6 01       	movw	r20, r12
    4b16:	4a 5e       	subi	r20, 0xEA	; 234
    4b18:	51 09       	sbc	r21, r1
    4b1a:	44 32       	cpi	r20, 0x24	; 36
    4b1c:	51 05       	cpc	r21, r1
    4b1e:	c0 f4       	brcc	.+48     	; 0x4b50 <ScanPen+0x94a>
							if (focusedField == 0) {
    4b20:	01 2b       	or	r16, r17
    4b22:	59 f4       	brne	.+22     	; 0x4b3a <ScanPen+0x934>
								strcat(latitudeInput, ".");
    4b24:	ed e6       	ldi	r30, 0x6D	; 109
    4b26:	f2 e0       	ldi	r31, 0x02	; 2
    4b28:	01 90       	ld	r0, Z+
    4b2a:	00 20       	and	r0, r0
    4b2c:	e9 f7       	brne	.-6      	; 0x4b28 <ScanPen+0x922>
    4b2e:	31 97       	sbiw	r30, 0x01	; 1
    4b30:	8e e2       	ldi	r24, 0x2E	; 46
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	91 83       	std	Z+1, r25	; 0x01
    4b36:	80 83       	st	Z, r24
    4b38:	50 c0       	rjmp	.+160    	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, ".");
    4b3a:	e8 e7       	ldi	r30, 0x78	; 120
    4b3c:	f2 e0       	ldi	r31, 0x02	; 2
    4b3e:	01 90       	ld	r0, Z+
    4b40:	00 20       	and	r0, r0
    4b42:	e9 f7       	brne	.-6      	; 0x4b3e <ScanPen+0x938>
    4b44:	31 97       	sbiw	r30, 0x01	; 1
    4b46:	8e e2       	ldi	r24, 0x2E	; 46
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	91 83       	std	Z+1, r25	; 0x01
    4b4c:	80 83       	st	Z, r24
    4b4e:	45 c0       	rjmp	.+138    	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 150 && vpos <= 190 && hpos >= GetMaxY() - 45 && hpos <= GetMaxY() - 10) {
    4b50:	2f 3b       	cpi	r18, 0xBF	; 191
    4b52:	31 05       	cpc	r19, r1
    4b54:	f4 f4       	brge	.+60     	; 0x4b92 <ScanPen+0x98c>
    4b56:	a6 01       	movw	r20, r12
    4b58:	42 51       	subi	r20, 0x12	; 18
    4b5a:	51 40       	sbci	r21, 0x01	; 1
    4b5c:	44 32       	cpi	r20, 0x24	; 36
    4b5e:	51 05       	cpc	r21, r1
    4b60:	c0 f4       	brcc	.+48     	; 0x4b92 <ScanPen+0x98c>
							if (focusedField == 0) {
    4b62:	01 2b       	or	r16, r17
    4b64:	59 f4       	brne	.+22     	; 0x4b7c <ScanPen+0x976>
								strcat(latitudeInput, "0");
    4b66:	ed e6       	ldi	r30, 0x6D	; 109
    4b68:	f2 e0       	ldi	r31, 0x02	; 2
    4b6a:	01 90       	ld	r0, Z+
    4b6c:	00 20       	and	r0, r0
    4b6e:	e9 f7       	brne	.-6      	; 0x4b6a <ScanPen+0x964>
    4b70:	31 97       	sbiw	r30, 0x01	; 1
    4b72:	80 e3       	ldi	r24, 0x30	; 48
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	91 83       	std	Z+1, r25	; 0x01
    4b78:	80 83       	st	Z, r24
    4b7a:	2f c0       	rjmp	.+94     	; 0x4bda <ScanPen+0x9d4>
								} else {
								strcat(longitudeInput, "0");
    4b7c:	e8 e7       	ldi	r30, 0x78	; 120
    4b7e:	f2 e0       	ldi	r31, 0x02	; 2
    4b80:	01 90       	ld	r0, Z+
    4b82:	00 20       	and	r0, r0
    4b84:	e9 f7       	brne	.-6      	; 0x4b80 <ScanPen+0x97a>
    4b86:	31 97       	sbiw	r30, 0x01	; 1
    4b88:	80 e3       	ldi	r24, 0x30	; 48
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	91 83       	std	Z+1, r25	; 0x01
    4b8e:	80 83       	st	Z, r24
    4b90:	24 c0       	rjmp	.+72     	; 0x4bda <ScanPen+0x9d4>
							}
							} else if (focusedField < 2 && vpos >= 195 && vpos <= GetMaxX() - 10 && hpos >= GetMaxY() - 45 && hpos <= GetMaxY() - 10) {
    4b92:	23 3c       	cpi	r18, 0xC3	; 195
    4b94:	31 05       	cpc	r19, r1
    4b96:	0c f1       	brlt	.+66     	; 0x4bda <ScanPen+0x9d4>
    4b98:	e6 3e       	cpi	r30, 0xE6	; 230
    4b9a:	f1 05       	cpc	r31, r1
    4b9c:	f0 f4       	brcc	.+60     	; 0x4bda <ScanPen+0x9d4>
    4b9e:	e2 e1       	ldi	r30, 0x12	; 18
    4ba0:	ce 1a       	sub	r12, r30
    4ba2:	e1 e0       	ldi	r30, 0x01	; 1
    4ba4:	de 0a       	sbc	r13, r30
    4ba6:	f4 e2       	ldi	r31, 0x24	; 36
    4ba8:	cf 16       	cp	r12, r31
    4baa:	d1 04       	cpc	r13, r1
    4bac:	b0 f4       	brcc	.+44     	; 0x4bda <ScanPen+0x9d4>
							focusedField++;
    4bae:	c8 01       	movw	r24, r16
    4bb0:	01 96       	adiw	r24, 0x01	; 1
    4bb2:	90 93 1a 02 	sts	0x021A, r25
    4bb6:	80 93 19 02 	sts	0x0219, r24
    4bba:	0f c0       	rjmp	.+30     	; 0x4bda <ScanPen+0x9d4>
							} else if (focusedField >= 2 && vpos >= 0 && vpos <= GetMaxX() && hpos >= GetMaxY() - 50 && hpos <= GetMaxY()) {
    4bbc:	33 23       	and	r19, r19
    4bbe:	6c f0       	brlt	.+26     	; 0x4bda <ScanPen+0x9d4>
    4bc0:	e0 3f       	cpi	r30, 0xF0	; 240
    4bc2:	f1 05       	cpc	r31, r1
    4bc4:	50 f4       	brcc	.+20     	; 0x4bda <ScanPen+0x9d4>
    4bc6:	2d e0       	ldi	r18, 0x0D	; 13
    4bc8:	c2 1a       	sub	r12, r18
    4bca:	21 e0       	ldi	r18, 0x01	; 1
    4bcc:	d2 0a       	sbc	r13, r18
    4bce:	33 e3       	ldi	r19, 0x33	; 51
    4bd0:	c3 16       	cp	r12, r19
    4bd2:	d1 04       	cpc	r13, r1
    4bd4:	10 f4       	brcc	.+4      	; 0x4bda <ScanPen+0x9d4>
							showCalc();
    4bd6:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <showCalc>
					
					
				}
			}

			last_pen_check = 1;
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	80 93 18 02 	sts	0x0218, r24
    4be0:	0c c0       	rjmp	.+24     	; 0x4bfa <ScanPen+0x9f4>
		}
	}
	else
	{
		if (last_pen_check)
    4be2:	80 91 18 02 	lds	r24, 0x0218
    4be6:	88 23       	and	r24, r24
    4be8:	21 f0       	breq	.+8      	; 0x4bf2 <ScanPen+0x9ec>
		{
			p_stat = PST_UP;
    4bea:	83 e0       	ldi	r24, 0x03	; 3
    4bec:	80 93 85 02 	sts	0x0285, r24
    4bf0:	02 c0       	rjmp	.+4      	; 0x4bf6 <ScanPen+0x9f0>
		}
		else
		{
			p_stat = PST_NOTFOUND;
    4bf2:	10 92 85 02 	sts	0x0285, r1
		}

		last_pen_check = 0;
    4bf6:	10 92 18 02 	sts	0x0218, r1
	}
}
    4bfa:	28 96       	adiw	r28, 0x08	; 8
    4bfc:	0f b6       	in	r0, 0x3f	; 63
    4bfe:	f8 94       	cli
    4c00:	de bf       	out	0x3e, r29	; 62
    4c02:	0f be       	out	0x3f, r0	; 63
    4c04:	cd bf       	out	0x3d, r28	; 61
    4c06:	df 91       	pop	r29
    4c08:	cf 91       	pop	r28
    4c0a:	1f 91       	pop	r17
    4c0c:	0f 91       	pop	r16
    4c0e:	ff 90       	pop	r15
    4c10:	ef 90       	pop	r14
    4c12:	df 90       	pop	r13
    4c14:	cf 90       	pop	r12
    4c16:	bf 90       	pop	r11
    4c18:	af 90       	pop	r10
    4c1a:	9f 90       	pop	r9
    4c1c:	8f 90       	pop	r8
    4c1e:	7f 90       	pop	r7
    4c20:	6f 90       	pop	r6
    4c22:	5f 90       	pop	r5
    4c24:	4f 90       	pop	r4
    4c26:	3f 90       	pop	r3
    4c28:	2f 90       	pop	r2
    4c2a:	08 95       	ret

00004c2c <showCalc>:
				
				firstShow = 0;
	}
}

void showCalc() {
    4c2c:	cf 93       	push	r28
    4c2e:	df 93       	push	r29
    4c30:	cd b7       	in	r28, 0x3d	; 61
    4c32:	de b7       	in	r29, 0x3e	; 62
    4c34:	68 97       	sbiw	r28, 0x18	; 24
    4c36:	0f b6       	in	r0, 0x3f	; 63
    4c38:	f8 94       	cli
    4c3a:	de bf       	out	0x3e, r29	; 62
    4c3c:	0f be       	out	0x3f, r0	; 63
    4c3e:	cd bf       	out	0x3d, r28	; 61
	
	currentReading.lat[1] = '\0';
    4c40:	10 92 9f 02 	sts	0x029F, r1
	int firstShow = 1; /**< A flag showing if this is the first time showing the screen */
	char str[20]; /**< A helper string used to store text that is to be shown on the screen */
	double latDouble; /**< Double precision latitude value */
	double lonDouble; /**< Double precision longitude value */
	
	focusedField = 0; /**< A flag showing which input field is focused */
    4c44:	10 92 1a 02 	sts	0x021A, r1
    4c48:	10 92 19 02 	sts	0x0219, r1
	memset(longitudeInput, 0, 11);
    4c4c:	8b e0       	ldi	r24, 0x0B	; 11
    4c4e:	e8 e7       	ldi	r30, 0x78	; 120
    4c50:	f2 e0       	ldi	r31, 0x02	; 2
    4c52:	df 01       	movw	r26, r30
    4c54:	98 2f       	mov	r25, r24
    4c56:	1d 92       	st	X+, r1
    4c58:	9a 95       	dec	r25
    4c5a:	e9 f7       	brne	.-6      	; 0x4c56 <showCalc+0x2a>
	memset(latitudeInput, 0, 11);
    4c5c:	ed e6       	ldi	r30, 0x6D	; 109
    4c5e:	f2 e0       	ldi	r31, 0x02	; 2
    4c60:	df 01       	movw	r26, r30
    4c62:	1d 92       	st	X+, r1
    4c64:	8a 95       	dec	r24
    4c66:	e9 f7       	brne	.-6      	; 0x4c62 <showCalc+0x36>
	
	SetColor(TURQUOISE);
    4c68:	0f 2e       	mov	r0, r31
    4c6a:	f3 ef       	ldi	r31, 0xF3	; 243
    4c6c:	cf 2e       	mov	r12, r31
    4c6e:	fd e1       	ldi	r31, 0x1D	; 29
    4c70:	df 2e       	mov	r13, r31
    4c72:	f0 2d       	mov	r31, r0
    4c74:	d0 92 79 00 	sts	0x0079, r13
    4c78:	c0 92 78 00 	sts	0x0078, r12
	FillRectangle(0, 40, GetMaxX(), 80);
    4c7c:	03 ef       	ldi	r16, 0xF3	; 243
    4c7e:	1d e1       	ldi	r17, 0x1D	; 29
    4c80:	20 e5       	ldi	r18, 0x50	; 80
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	4f ee       	ldi	r20, 0xEF	; 239
    4c86:	50 e0       	ldi	r21, 0x00	; 0
    4c88:	68 e2       	ldi	r22, 0x28	; 40
    4c8a:	70 e0       	ldi	r23, 0x00	; 0
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	SetColor(GREEN_SEA);
    4c94:	0f 2e       	mov	r0, r31
    4c96:	f0 e1       	ldi	r31, 0x10	; 16
    4c98:	af 2e       	mov	r10, r31
    4c9a:	f5 e1       	ldi	r31, 0x15	; 21
    4c9c:	bf 2e       	mov	r11, r31
    4c9e:	f0 2d       	mov	r31, r0
    4ca0:	b0 92 79 00 	sts	0x0079, r11
    4ca4:	a0 92 78 00 	sts	0x0078, r10
	FillRectangle(0, 40, 40, 80);
    4ca8:	00 e1       	ldi	r16, 0x10	; 16
    4caa:	15 e1       	ldi	r17, 0x15	; 21
    4cac:	20 e5       	ldi	r18, 0x50	; 80
    4cae:	30 e0       	ldi	r19, 0x00	; 0
    4cb0:	48 e2       	ldi	r20, 0x28	; 40
    4cb2:	50 e0       	ldi	r21, 0x00	; 0
    4cb4:	68 e2       	ldi	r22, 0x28	; 40
    4cb6:	70 e0       	ldi	r23, 0x00	; 0
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	SetFgColor(CLOUDS);
    4cc0:	0f 2e       	mov	r0, r31
    4cc2:	fe e9       	ldi	r31, 0x9E	; 158
    4cc4:	2f 2e       	mov	r2, r31
    4cc6:	ff ee       	ldi	r31, 0xEF	; 239
    4cc8:	3f 2e       	mov	r3, r31
    4cca:	f0 2d       	mov	r31, r0
    4ccc:	30 92 64 00 	sts	0x0064, r3
    4cd0:	20 92 63 00 	sts	0x0063, r2
	DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
    4cd4:	ee 24       	eor	r14, r14
    4cd6:	e3 94       	inc	r14
    4cd8:	09 e9       	ldi	r16, 0x99	; 153
    4cda:	10 e0       	ldi	r17, 0x00	; 0
    4cdc:	20 e5       	ldi	r18, 0x50	; 80
    4cde:	30 e0       	ldi	r19, 0x00	; 0
    4ce0:	48 e2       	ldi	r20, 0x28	; 40
    4ce2:	50 e0       	ldi	r21, 0x00	; 0
    4ce4:	68 e2       	ldi	r22, 0x28	; 40
    4ce6:	70 e0       	ldi	r23, 0x00	; 0
    4ce8:	80 e0       	ldi	r24, 0x00	; 0
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(0, 40, GetMaxX(), 80, "Distance Calc.", ALINE_CENTER);
    4cf0:	05 eb       	ldi	r16, 0xB5	; 181
    4cf2:	10 e0       	ldi	r17, 0x00	; 0
    4cf4:	20 e5       	ldi	r18, 0x50	; 80
    4cf6:	30 e0       	ldi	r19, 0x00	; 0
    4cf8:	4f ee       	ldi	r20, 0xEF	; 239
    4cfa:	50 e0       	ldi	r21, 0x00	; 0
    4cfc:	68 e2       	ldi	r22, 0x28	; 40
    4cfe:	70 e0       	ldi	r23, 0x00	; 0
    4d00:	80 e0       	ldi	r24, 0x00	; 0
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	SetColor(CLOUDS);
    4d08:	30 92 79 00 	sts	0x0079, r3
    4d0c:	20 92 78 00 	sts	0x0078, r2
	BevelFill(0, 81, GetMaxX(), GetMaxY(), 0);
    4d10:	00 e0       	ldi	r16, 0x00	; 0
    4d12:	10 e0       	ldi	r17, 0x00	; 0
    4d14:	2f e3       	ldi	r18, 0x3F	; 63
    4d16:	31 e0       	ldi	r19, 0x01	; 1
    4d18:	4f ee       	ldi	r20, 0xEF	; 239
    4d1a:	50 e0       	ldi	r21, 0x00	; 0
    4d1c:	61 e5       	ldi	r22, 0x51	; 81
    4d1e:	70 e0       	ldi	r23, 0x00	; 0
    4d20:	80 e0       	ldi	r24, 0x00	; 0
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
	
	SetColor(WHITE);
    4d28:	8f ef       	ldi	r24, 0xFF	; 255
    4d2a:	9f ef       	ldi	r25, 0xFF	; 255
    4d2c:	90 93 79 00 	sts	0x0079, r25
    4d30:	80 93 78 00 	sts	0x0078, r24
	FillRectangle(5, 85, GetMaxX() - 5, 115);
    4d34:	0f ef       	ldi	r16, 0xFF	; 255
    4d36:	1f ef       	ldi	r17, 0xFF	; 255
    4d38:	23 e7       	ldi	r18, 0x73	; 115
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	4a ee       	ldi	r20, 0xEA	; 234
    4d3e:	50 e0       	ldi	r21, 0x00	; 0
    4d40:	65 e5       	ldi	r22, 0x55	; 85
    4d42:	70 e0       	ldi	r23, 0x00	; 0
    4d44:	85 e0       	ldi	r24, 0x05	; 5
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	FillRectangle(5, 120, GetMaxX() - 5, 150);
    4d4c:	00 91 78 00 	lds	r16, 0x0078
    4d50:	10 91 79 00 	lds	r17, 0x0079
    4d54:	26 e9       	ldi	r18, 0x96	; 150
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	4a ee       	ldi	r20, 0xEA	; 234
    4d5a:	50 e0       	ldi	r21, 0x00	; 0
    4d5c:	68 e7       	ldi	r22, 0x78	; 120
    4d5e:	70 e0       	ldi	r23, 0x00	; 0
    4d60:	85 e0       	ldi	r24, 0x05	; 5
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	SetFgColor(BLACK);
    4d68:	10 92 64 00 	sts	0x0064, r1
    4d6c:	10 92 63 00 	sts	0x0063, r1
	DrawText(5, 85, GetMaxX() - 10, 115, "LAT", ALINE_RIGHT);
    4d70:	68 94       	set
    4d72:	ee 24       	eor	r14, r14
    4d74:	e1 f8       	bld	r14, 1
    4d76:	04 ec       	ldi	r16, 0xC4	; 196
    4d78:	10 e0       	ldi	r17, 0x00	; 0
    4d7a:	23 e7       	ldi	r18, 0x73	; 115
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	45 ee       	ldi	r20, 0xE5	; 229
    4d80:	50 e0       	ldi	r21, 0x00	; 0
    4d82:	65 e5       	ldi	r22, 0x55	; 85
    4d84:	70 e0       	ldi	r23, 0x00	; 0
    4d86:	85 e0       	ldi	r24, 0x05	; 5
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(5, 120, GetMaxX() - 10, 150, "LON", ALINE_RIGHT);
    4d8e:	08 ec       	ldi	r16, 0xC8	; 200
    4d90:	10 e0       	ldi	r17, 0x00	; 0
    4d92:	26 e9       	ldi	r18, 0x96	; 150
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	45 ee       	ldi	r20, 0xE5	; 229
    4d98:	50 e0       	ldi	r21, 0x00	; 0
    4d9a:	68 e7       	ldi	r22, 0x78	; 120
    4d9c:	70 e0       	ldi	r23, 0x00	; 0
    4d9e:	85 e0       	ldi	r24, 0x05	; 5
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	
	SetColor(BLACK);
    4da6:	10 92 79 00 	sts	0x0079, r1
    4daa:	10 92 78 00 	sts	0x0078, r1
	Rectangle(5, 85, GetMaxX() - 5, 115);
    4dae:	23 e7       	ldi	r18, 0x73	; 115
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	4a ee       	ldi	r20, 0xEA	; 234
    4db4:	50 e0       	ldi	r21, 0x00	; 0
    4db6:	65 e5       	ldi	r22, 0x55	; 85
    4db8:	70 e0       	ldi	r23, 0x00	; 0
    4dba:	85 e0       	ldi	r24, 0x05	; 5
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
	Rectangle(5, 120, GetMaxX() - 5, 150);
    4dc2:	26 e9       	ldi	r18, 0x96	; 150
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	4a ee       	ldi	r20, 0xEA	; 234
    4dc8:	50 e0       	ldi	r21, 0x00	; 0
    4dca:	68 e7       	ldi	r22, 0x78	; 120
    4dcc:	70 e0       	ldi	r23, 0x00	; 0
    4dce:	85 e0       	ldi	r24, 0x05	; 5
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
	

		SetColor(TURQUOISE);
    4dd6:	d0 92 79 00 	sts	0x0079, r13
    4dda:	c0 92 78 00 	sts	0x0078, r12
		FillRectangle(0, GetMaxY() - 135, GetMaxX(), GetMaxY());
    4dde:	03 ef       	ldi	r16, 0xF3	; 243
    4de0:	1d e1       	ldi	r17, 0x1D	; 29
    4de2:	2f e3       	ldi	r18, 0x3F	; 63
    4de4:	31 e0       	ldi	r19, 0x01	; 1
    4de6:	4f ee       	ldi	r20, 0xEF	; 239
    4de8:	50 e0       	ldi	r21, 0x00	; 0
    4dea:	68 eb       	ldi	r22, 0xB8	; 184
    4dec:	70 e0       	ldi	r23, 0x00	; 0
    4dee:	80 e0       	ldi	r24, 0x00	; 0
    4df0:	90 e0       	ldi	r25, 0x00	; 0
    4df2:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>

		SetColor(GREEN_SEA);
    4df6:	b0 92 79 00 	sts	0x0079, r11
    4dfa:	a0 92 78 00 	sts	0x0078, r10
		FillRectangle(10, GetMaxY() - 125, 50, GetMaxY() - 90);
    4dfe:	00 e1       	ldi	r16, 0x10	; 16
    4e00:	15 e1       	ldi	r17, 0x15	; 21
    4e02:	25 ee       	ldi	r18, 0xE5	; 229
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	42 e3       	ldi	r20, 0x32	; 50
    4e08:	50 e0       	ldi	r21, 0x00	; 0
    4e0a:	62 ec       	ldi	r22, 0xC2	; 194
    4e0c:	70 e0       	ldi	r23, 0x00	; 0
    4e0e:	8a e0       	ldi	r24, 0x0A	; 10
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		FillRectangle(10, GetMaxY() - 85, 50, GetMaxY() - 50);
    4e16:	00 91 78 00 	lds	r16, 0x0078
    4e1a:	10 91 79 00 	lds	r17, 0x0079
    4e1e:	2d e0       	ldi	r18, 0x0D	; 13
    4e20:	31 e0       	ldi	r19, 0x01	; 1
    4e22:	42 e3       	ldi	r20, 0x32	; 50
    4e24:	50 e0       	ldi	r21, 0x00	; 0
    4e26:	6a ee       	ldi	r22, 0xEA	; 234
    4e28:	70 e0       	ldi	r23, 0x00	; 0
    4e2a:	8a e0       	ldi	r24, 0x0A	; 10
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		FillRectangle(10, GetMaxY() - 45, 50, GetMaxY() - 10);
    4e32:	00 91 78 00 	lds	r16, 0x0078
    4e36:	10 91 79 00 	lds	r17, 0x0079
    4e3a:	25 e3       	ldi	r18, 0x35	; 53
    4e3c:	31 e0       	ldi	r19, 0x01	; 1
    4e3e:	42 e3       	ldi	r20, 0x32	; 50
    4e40:	50 e0       	ldi	r21, 0x00	; 0
    4e42:	62 e1       	ldi	r22, 0x12	; 18
    4e44:	71 e0       	ldi	r23, 0x01	; 1
    4e46:	8a e0       	ldi	r24, 0x0A	; 10
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		
		FillRectangle(55, GetMaxY() - 125, 95, GetMaxY() - 90);
    4e4e:	00 91 78 00 	lds	r16, 0x0078
    4e52:	10 91 79 00 	lds	r17, 0x0079
    4e56:	25 ee       	ldi	r18, 0xE5	; 229
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	4f e5       	ldi	r20, 0x5F	; 95
    4e5c:	50 e0       	ldi	r21, 0x00	; 0
    4e5e:	62 ec       	ldi	r22, 0xC2	; 194
    4e60:	70 e0       	ldi	r23, 0x00	; 0
    4e62:	87 e3       	ldi	r24, 0x37	; 55
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		FillRectangle(55, GetMaxY() - 85, 95, GetMaxY() - 50);
    4e6a:	00 91 78 00 	lds	r16, 0x0078
    4e6e:	10 91 79 00 	lds	r17, 0x0079
    4e72:	2d e0       	ldi	r18, 0x0D	; 13
    4e74:	31 e0       	ldi	r19, 0x01	; 1
    4e76:	4f e5       	ldi	r20, 0x5F	; 95
    4e78:	50 e0       	ldi	r21, 0x00	; 0
    4e7a:	6a ee       	ldi	r22, 0xEA	; 234
    4e7c:	70 e0       	ldi	r23, 0x00	; 0
    4e7e:	87 e3       	ldi	r24, 0x37	; 55
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		FillRectangle(55, GetMaxY() - 45, 95, GetMaxY() - 10);
    4e86:	00 91 78 00 	lds	r16, 0x0078
    4e8a:	10 91 79 00 	lds	r17, 0x0079
    4e8e:	25 e3       	ldi	r18, 0x35	; 53
    4e90:	31 e0       	ldi	r19, 0x01	; 1
    4e92:	4f e5       	ldi	r20, 0x5F	; 95
    4e94:	50 e0       	ldi	r21, 0x00	; 0
    4e96:	62 e1       	ldi	r22, 0x12	; 18
    4e98:	71 e0       	ldi	r23, 0x01	; 1
    4e9a:	87 e3       	ldi	r24, 0x37	; 55
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		
		FillRectangle(100, GetMaxY() - 125, 140, GetMaxY() - 90);
    4ea2:	00 91 78 00 	lds	r16, 0x0078
    4ea6:	10 91 79 00 	lds	r17, 0x0079
    4eaa:	25 ee       	ldi	r18, 0xE5	; 229
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	4c e8       	ldi	r20, 0x8C	; 140
    4eb0:	50 e0       	ldi	r21, 0x00	; 0
    4eb2:	62 ec       	ldi	r22, 0xC2	; 194
    4eb4:	70 e0       	ldi	r23, 0x00	; 0
    4eb6:	84 e6       	ldi	r24, 0x64	; 100
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		FillRectangle(100, GetMaxY() - 85, 140, GetMaxY() - 50);
    4ebe:	00 91 78 00 	lds	r16, 0x0078
    4ec2:	10 91 79 00 	lds	r17, 0x0079
    4ec6:	2d e0       	ldi	r18, 0x0D	; 13
    4ec8:	31 e0       	ldi	r19, 0x01	; 1
    4eca:	4c e8       	ldi	r20, 0x8C	; 140
    4ecc:	50 e0       	ldi	r21, 0x00	; 0
    4ece:	6a ee       	ldi	r22, 0xEA	; 234
    4ed0:	70 e0       	ldi	r23, 0x00	; 0
    4ed2:	84 e6       	ldi	r24, 0x64	; 100
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		FillRectangle(100, GetMaxY() - 45, 140, GetMaxY() - 10);
    4eda:	00 91 78 00 	lds	r16, 0x0078
    4ede:	10 91 79 00 	lds	r17, 0x0079
    4ee2:	25 e3       	ldi	r18, 0x35	; 53
    4ee4:	31 e0       	ldi	r19, 0x01	; 1
    4ee6:	4c e8       	ldi	r20, 0x8C	; 140
    4ee8:	50 e0       	ldi	r21, 0x00	; 0
    4eea:	62 e1       	ldi	r22, 0x12	; 18
    4eec:	71 e0       	ldi	r23, 0x01	; 1
    4eee:	84 e6       	ldi	r24, 0x64	; 100
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		
		FillRectangle(150, GetMaxY() - 125, GetMaxX() - 10, GetMaxY() - 90);
    4ef6:	00 91 78 00 	lds	r16, 0x0078
    4efa:	10 91 79 00 	lds	r17, 0x0079
    4efe:	25 ee       	ldi	r18, 0xE5	; 229
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	45 ee       	ldi	r20, 0xE5	; 229
    4f04:	50 e0       	ldi	r21, 0x00	; 0
    4f06:	62 ec       	ldi	r22, 0xC2	; 194
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	86 e9       	ldi	r24, 0x96	; 150
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		FillRectangle(150, GetMaxY() - 85, GetMaxX() - 10, GetMaxY() - 50);
    4f12:	00 91 78 00 	lds	r16, 0x0078
    4f16:	10 91 79 00 	lds	r17, 0x0079
    4f1a:	2d e0       	ldi	r18, 0x0D	; 13
    4f1c:	31 e0       	ldi	r19, 0x01	; 1
    4f1e:	45 ee       	ldi	r20, 0xE5	; 229
    4f20:	50 e0       	ldi	r21, 0x00	; 0
    4f22:	6a ee       	ldi	r22, 0xEA	; 234
    4f24:	70 e0       	ldi	r23, 0x00	; 0
    4f26:	86 e9       	ldi	r24, 0x96	; 150
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		
		FillRectangle(150, GetMaxY() - 45, 190, GetMaxY() - 10);
    4f2e:	00 91 78 00 	lds	r16, 0x0078
    4f32:	10 91 79 00 	lds	r17, 0x0079
    4f36:	25 e3       	ldi	r18, 0x35	; 53
    4f38:	31 e0       	ldi	r19, 0x01	; 1
    4f3a:	4e eb       	ldi	r20, 0xBE	; 190
    4f3c:	50 e0       	ldi	r21, 0x00	; 0
    4f3e:	62 e1       	ldi	r22, 0x12	; 18
    4f40:	71 e0       	ldi	r23, 0x01	; 1
    4f42:	86 e9       	ldi	r24, 0x96	; 150
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		FillRectangle(195, GetMaxY() - 45, GetMaxX() - 10, GetMaxY() - 10);
    4f4a:	00 91 78 00 	lds	r16, 0x0078
    4f4e:	10 91 79 00 	lds	r17, 0x0079
    4f52:	25 e3       	ldi	r18, 0x35	; 53
    4f54:	31 e0       	ldi	r19, 0x01	; 1
    4f56:	45 ee       	ldi	r20, 0xE5	; 229
    4f58:	50 e0       	ldi	r21, 0x00	; 0
    4f5a:	62 e1       	ldi	r22, 0x12	; 18
    4f5c:	71 e0       	ldi	r23, 0x01	; 1
    4f5e:	83 ec       	ldi	r24, 0xC3	; 195
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		
		SetFgColor(CLOUDS);
    4f66:	30 92 64 00 	sts	0x0064, r3
    4f6a:	20 92 63 00 	sts	0x0063, r2
		DrawText(10, GetMaxY() - 125, 50, GetMaxY() - 90, "7", ALINE_CENTER);
    4f6e:	ee 24       	eor	r14, r14
    4f70:	e3 94       	inc	r14
    4f72:	0c ec       	ldi	r16, 0xCC	; 204
    4f74:	10 e0       	ldi	r17, 0x00	; 0
    4f76:	25 ee       	ldi	r18, 0xE5	; 229
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	42 e3       	ldi	r20, 0x32	; 50
    4f7c:	50 e0       	ldi	r21, 0x00	; 0
    4f7e:	62 ec       	ldi	r22, 0xC2	; 194
    4f80:	70 e0       	ldi	r23, 0x00	; 0
    4f82:	8a e0       	ldi	r24, 0x0A	; 10
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		DrawText(10, GetMaxY() - 85, 50, GetMaxY() - 50, "4", ALINE_CENTER);
    4f8a:	0e ec       	ldi	r16, 0xCE	; 206
    4f8c:	10 e0       	ldi	r17, 0x00	; 0
    4f8e:	2d e0       	ldi	r18, 0x0D	; 13
    4f90:	31 e0       	ldi	r19, 0x01	; 1
    4f92:	42 e3       	ldi	r20, 0x32	; 50
    4f94:	50 e0       	ldi	r21, 0x00	; 0
    4f96:	6a ee       	ldi	r22, 0xEA	; 234
    4f98:	70 e0       	ldi	r23, 0x00	; 0
    4f9a:	8a e0       	ldi	r24, 0x0A	; 10
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		DrawText(10, GetMaxY() - 45, 50, GetMaxY() - 10, "1", ALINE_CENTER);
    4fa2:	00 ed       	ldi	r16, 0xD0	; 208
    4fa4:	10 e0       	ldi	r17, 0x00	; 0
    4fa6:	25 e3       	ldi	r18, 0x35	; 53
    4fa8:	31 e0       	ldi	r19, 0x01	; 1
    4faa:	42 e3       	ldi	r20, 0x32	; 50
    4fac:	50 e0       	ldi	r21, 0x00	; 0
    4fae:	62 e1       	ldi	r22, 0x12	; 18
    4fb0:	71 e0       	ldi	r23, 0x01	; 1
    4fb2:	8a e0       	ldi	r24, 0x0A	; 10
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		
		DrawText(55, GetMaxY() - 125, 95, GetMaxY() - 90, "8", ALINE_CENTER);
    4fba:	02 ed       	ldi	r16, 0xD2	; 210
    4fbc:	10 e0       	ldi	r17, 0x00	; 0
    4fbe:	25 ee       	ldi	r18, 0xE5	; 229
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	4f e5       	ldi	r20, 0x5F	; 95
    4fc4:	50 e0       	ldi	r21, 0x00	; 0
    4fc6:	62 ec       	ldi	r22, 0xC2	; 194
    4fc8:	70 e0       	ldi	r23, 0x00	; 0
    4fca:	87 e3       	ldi	r24, 0x37	; 55
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		DrawText(55, GetMaxY() - 85, 95, GetMaxY() - 50, "5", ALINE_CENTER);
    4fd2:	04 ed       	ldi	r16, 0xD4	; 212
    4fd4:	10 e0       	ldi	r17, 0x00	; 0
    4fd6:	2d e0       	ldi	r18, 0x0D	; 13
    4fd8:	31 e0       	ldi	r19, 0x01	; 1
    4fda:	4f e5       	ldi	r20, 0x5F	; 95
    4fdc:	50 e0       	ldi	r21, 0x00	; 0
    4fde:	6a ee       	ldi	r22, 0xEA	; 234
    4fe0:	70 e0       	ldi	r23, 0x00	; 0
    4fe2:	87 e3       	ldi	r24, 0x37	; 55
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		DrawText(55, GetMaxY() - 45, 95, GetMaxY() - 10, "2", ALINE_CENTER);
    4fea:	06 ed       	ldi	r16, 0xD6	; 214
    4fec:	10 e0       	ldi	r17, 0x00	; 0
    4fee:	25 e3       	ldi	r18, 0x35	; 53
    4ff0:	31 e0       	ldi	r19, 0x01	; 1
    4ff2:	4f e5       	ldi	r20, 0x5F	; 95
    4ff4:	50 e0       	ldi	r21, 0x00	; 0
    4ff6:	62 e1       	ldi	r22, 0x12	; 18
    4ff8:	71 e0       	ldi	r23, 0x01	; 1
    4ffa:	87 e3       	ldi	r24, 0x37	; 55
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		
		DrawText(100, GetMaxY() - 125, 140, GetMaxY() - 90, "9", ALINE_CENTER);
    5002:	08 ed       	ldi	r16, 0xD8	; 216
    5004:	10 e0       	ldi	r17, 0x00	; 0
    5006:	25 ee       	ldi	r18, 0xE5	; 229
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	4c e8       	ldi	r20, 0x8C	; 140
    500c:	50 e0       	ldi	r21, 0x00	; 0
    500e:	62 ec       	ldi	r22, 0xC2	; 194
    5010:	70 e0       	ldi	r23, 0x00	; 0
    5012:	84 e6       	ldi	r24, 0x64	; 100
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		DrawText(100, GetMaxY() - 85, 140, GetMaxY() - 50, "6", ALINE_CENTER);
    501a:	0a ed       	ldi	r16, 0xDA	; 218
    501c:	10 e0       	ldi	r17, 0x00	; 0
    501e:	2d e0       	ldi	r18, 0x0D	; 13
    5020:	31 e0       	ldi	r19, 0x01	; 1
    5022:	4c e8       	ldi	r20, 0x8C	; 140
    5024:	50 e0       	ldi	r21, 0x00	; 0
    5026:	6a ee       	ldi	r22, 0xEA	; 234
    5028:	70 e0       	ldi	r23, 0x00	; 0
    502a:	84 e6       	ldi	r24, 0x64	; 100
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		DrawText(100, GetMaxY() - 45, 140, GetMaxY() - 10, "3", ALINE_CENTER);
    5032:	0c ed       	ldi	r16, 0xDC	; 220
    5034:	10 e0       	ldi	r17, 0x00	; 0
    5036:	25 e3       	ldi	r18, 0x35	; 53
    5038:	31 e0       	ldi	r19, 0x01	; 1
    503a:	4c e8       	ldi	r20, 0x8C	; 140
    503c:	50 e0       	ldi	r21, 0x00	; 0
    503e:	62 e1       	ldi	r22, 0x12	; 18
    5040:	71 e0       	ldi	r23, 0x01	; 1
    5042:	84 e6       	ldi	r24, 0x64	; 100
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		
		DrawText(150, GetMaxY() - 125, GetMaxX() - 10, GetMaxY() - 90, "<", ALINE_CENTER);
    504a:	09 e9       	ldi	r16, 0x99	; 153
    504c:	10 e0       	ldi	r17, 0x00	; 0
    504e:	25 ee       	ldi	r18, 0xE5	; 229
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	45 ee       	ldi	r20, 0xE5	; 229
    5054:	50 e0       	ldi	r21, 0x00	; 0
    5056:	62 ec       	ldi	r22, 0xC2	; 194
    5058:	70 e0       	ldi	r23, 0x00	; 0
    505a:	86 e9       	ldi	r24, 0x96	; 150
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		DrawText(150, GetMaxY() - 85, GetMaxX() - 10, GetMaxY() - 50, ".", ALINE_CENTER);
    5062:	02 ec       	ldi	r16, 0xC2	; 194
    5064:	10 e0       	ldi	r17, 0x00	; 0
    5066:	2d e0       	ldi	r18, 0x0D	; 13
    5068:	31 e0       	ldi	r19, 0x01	; 1
    506a:	45 ee       	ldi	r20, 0xE5	; 229
    506c:	50 e0       	ldi	r21, 0x00	; 0
    506e:	6a ee       	ldi	r22, 0xEA	; 234
    5070:	70 e0       	ldi	r23, 0x00	; 0
    5072:	86 e9       	ldi	r24, 0x96	; 150
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		
		DrawText(150, GetMaxY() - 45, 190, GetMaxY() - 10, "0", ALINE_CENTER);
    507a:	0e ed       	ldi	r16, 0xDE	; 222
    507c:	10 e0       	ldi	r17, 0x00	; 0
    507e:	25 e3       	ldi	r18, 0x35	; 53
    5080:	31 e0       	ldi	r19, 0x01	; 1
    5082:	4e eb       	ldi	r20, 0xBE	; 190
    5084:	50 e0       	ldi	r21, 0x00	; 0
    5086:	62 e1       	ldi	r22, 0x12	; 18
    5088:	71 e0       	ldi	r23, 0x01	; 1
    508a:	86 e9       	ldi	r24, 0x96	; 150
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		DrawText(195, GetMaxY() - 45, GetMaxX() - 10, GetMaxY() - 10, "->", ALINE_CENTER);
    5092:	00 ee       	ldi	r16, 0xE0	; 224
    5094:	10 e0       	ldi	r17, 0x00	; 0
    5096:	25 e3       	ldi	r18, 0x35	; 53
    5098:	31 e0       	ldi	r19, 0x01	; 1
    509a:	45 ee       	ldi	r20, 0xE5	; 229
    509c:	50 e0       	ldi	r21, 0x00	; 0
    509e:	62 e1       	ldi	r22, 0x12	; 18
    50a0:	71 e0       	ldi	r23, 0x01	; 1
    50a2:	83 ec       	ldi	r24, 0xC3	; 195
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	
	while(1) {
		
		ScanPen();
		
		memset(str, 0, 20);
    50aa:	fe 01       	movw	r30, r28
    50ac:	31 96       	adiw	r30, 0x01	; 1
    50ae:	1f 01       	movw	r2, r30
		DrawText(150, GetMaxY() - 45, 190, GetMaxY() - 10, "0", ALINE_CENTER);
		DrawText(195, GetMaxY() - 45, GetMaxX() - 10, GetMaxY() - 10, "->", ALINE_CENTER);
	
	while(1) {
		
		ScanPen();
    50b0:	0e 94 03 21 	call	0x4206	; 0x4206 <ScanPen>
		
		memset(str, 0, 20);
    50b4:	84 e1       	ldi	r24, 0x14	; 20
    50b6:	d1 01       	movw	r26, r2
    50b8:	1d 92       	st	X+, r1
    50ba:	8a 95       	dec	r24
    50bc:	e9 f7       	brne	.-6      	; 0x50b8 <showCalc+0x48c>
		
		SetFgColor(WET_ASPHALT);
    50be:	eb e4       	ldi	r30, 0x4B	; 75
    50c0:	f2 e3       	ldi	r31, 0x32	; 50
    50c2:	f0 93 64 00 	sts	0x0064, r31
    50c6:	e0 93 63 00 	sts	0x0063, r30
		

			SetColor(BLACK);
    50ca:	10 92 79 00 	sts	0x0079, r1
    50ce:	10 92 78 00 	sts	0x0078, r1
			if (focusedField == 0) {
    50d2:	80 91 19 02 	lds	r24, 0x0219
    50d6:	90 91 1a 02 	lds	r25, 0x021A
    50da:	00 97       	sbiw	r24, 0x00	; 0
    50dc:	d9 f4       	brne	.+54     	; 0x5114 <showCalc+0x4e8>
				SetColor(BLACK);
				Rectangle(6, 86, GetMaxX() - 6, 114);
    50de:	22 e7       	ldi	r18, 0x72	; 114
    50e0:	30 e0       	ldi	r19, 0x00	; 0
    50e2:	49 ee       	ldi	r20, 0xE9	; 233
    50e4:	50 e0       	ldi	r21, 0x00	; 0
    50e6:	66 e5       	ldi	r22, 0x56	; 86
    50e8:	70 e0       	ldi	r23, 0x00	; 0
    50ea:	86 e0       	ldi	r24, 0x06	; 6
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
				SetColor(WHITE);
    50f2:	8f ef       	ldi	r24, 0xFF	; 255
    50f4:	9f ef       	ldi	r25, 0xFF	; 255
    50f6:	90 93 79 00 	sts	0x0079, r25
    50fa:	80 93 78 00 	sts	0x0078, r24
				Rectangle(6, 121, GetMaxX() - 6, 149);
    50fe:	25 e9       	ldi	r18, 0x95	; 149
    5100:	30 e0       	ldi	r19, 0x00	; 0
    5102:	49 ee       	ldi	r20, 0xE9	; 233
    5104:	50 e0       	ldi	r21, 0x00	; 0
    5106:	69 e7       	ldi	r22, 0x79	; 121
    5108:	70 e0       	ldi	r23, 0x00	; 0
    510a:	86 e0       	ldi	r24, 0x06	; 6
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
    5112:	42 c1       	rjmp	.+644    	; 0x5398 <showCalc+0x76c>
			} else if (focusedField == 1) {
    5114:	81 30       	cpi	r24, 0x01	; 1
    5116:	91 05       	cpc	r25, r1
    5118:	d9 f4       	brne	.+54     	; 0x5150 <showCalc+0x524>
				SetColor(BLACK);
				Rectangle(6, 121, GetMaxX() - 6, 149);
    511a:	25 e9       	ldi	r18, 0x95	; 149
    511c:	30 e0       	ldi	r19, 0x00	; 0
    511e:	49 ee       	ldi	r20, 0xE9	; 233
    5120:	50 e0       	ldi	r21, 0x00	; 0
    5122:	69 e7       	ldi	r22, 0x79	; 121
    5124:	70 e0       	ldi	r23, 0x00	; 0
    5126:	86 e0       	ldi	r24, 0x06	; 6
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
				SetColor(WHITE);
    512e:	af ef       	ldi	r26, 0xFF	; 255
    5130:	bf ef       	ldi	r27, 0xFF	; 255
    5132:	b0 93 79 00 	sts	0x0079, r27
    5136:	a0 93 78 00 	sts	0x0078, r26
				Rectangle(6, 86, GetMaxX() - 6, 114);
    513a:	22 e7       	ldi	r18, 0x72	; 114
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	49 ee       	ldi	r20, 0xE9	; 233
    5140:	50 e0       	ldi	r21, 0x00	; 0
    5142:	66 e5       	ldi	r22, 0x56	; 86
    5144:	70 e0       	ldi	r23, 0x00	; 0
    5146:	86 e0       	ldi	r24, 0x06	; 6
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
    514e:	24 c1       	rjmp	.+584    	; 0x5398 <showCalc+0x76c>
			} else if (focusedField == 2) {
    5150:	02 97       	sbiw	r24, 0x02	; 2
    5152:	09 f0       	breq	.+2      	; 0x5156 <showCalc+0x52a>
    5154:	b2 c0       	rjmp	.+356    	; 0x52ba <showCalc+0x68e>
				readGPS();
    5156:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <readGPS>
				latDouble = atof(latitudeInput);
    515a:	8d e6       	ldi	r24, 0x6D	; 109
    515c:	92 e0       	ldi	r25, 0x02	; 2
    515e:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <atof>
    5162:	6d 8b       	std	Y+21, r22	; 0x15
    5164:	7e 8b       	std	Y+22, r23	; 0x16
    5166:	8f 8b       	std	Y+23, r24	; 0x17
    5168:	98 8f       	std	Y+24, r25	; 0x18
				lonDouble = atof(longitudeInput);
    516a:	88 e7       	ldi	r24, 0x78	; 120
    516c:	92 e0       	ldi	r25, 0x02	; 2
    516e:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <atof>
    5172:	2b 01       	movw	r4, r22
    5174:	3c 01       	movw	r6, r24
				sprintf(str, "Distance: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, latDouble, lonDouble, 'K')));
    5176:	e8 ea       	ldi	r30, 0xA8	; 168
    5178:	f2 e0       	ldi	r31, 0x02	; 2
    517a:	20 81       	ld	r18, Z
    517c:	31 81       	ldd	r19, Z+1	; 0x01
    517e:	42 81       	ldd	r20, Z+2	; 0x02
    5180:	53 81       	ldd	r21, Z+3	; 0x03
    5182:	a6 e9       	ldi	r26, 0x96	; 150
    5184:	b2 e0       	ldi	r27, 0x02	; 2
    5186:	6d 91       	ld	r22, X+
    5188:	7d 91       	ld	r23, X+
    518a:	8d 91       	ld	r24, X+
    518c:	9c 91       	ld	r25, X
    518e:	0f 2e       	mov	r0, r31
    5190:	fb e4       	ldi	r31, 0x4B	; 75
    5192:	8f 2e       	mov	r8, r31
    5194:	f0 2d       	mov	r31, r0
    5196:	63 01       	movw	r12, r6
    5198:	52 01       	movw	r10, r4
    519a:	ed 88       	ldd	r14, Y+21	; 0x15
    519c:	fe 88       	ldd	r15, Y+22	; 0x16
    519e:	0f 89       	ldd	r16, Y+23	; 0x17
    51a0:	18 8d       	ldd	r17, Y+24	; 0x18
    51a2:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    51a6:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    51aa:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    51ae:	7f 93       	push	r23
    51b0:	6f 93       	push	r22
    51b2:	a3 ee       	ldi	r26, 0xE3	; 227
    51b4:	b0 e0       	ldi	r27, 0x00	; 0
    51b6:	bf 93       	push	r27
    51b8:	af 93       	push	r26
    51ba:	3f 92       	push	r3
    51bc:	2f 92       	push	r2
    51be:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
				SetColor(WHITE);
    51c2:	8f ef       	ldi	r24, 0xFF	; 255
    51c4:	9f ef       	ldi	r25, 0xFF	; 255
    51c6:	90 93 79 00 	sts	0x0079, r25
    51ca:	80 93 78 00 	sts	0x0078, r24
				Rectangle(6, 121, GetMaxX() - 6, 149);
    51ce:	25 e9       	ldi	r18, 0x95	; 149
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	49 ee       	ldi	r20, 0xE9	; 233
    51d4:	50 e0       	ldi	r21, 0x00	; 0
    51d6:	69 e7       	ldi	r22, 0x79	; 121
    51d8:	70 e0       	ldi	r23, 0x00	; 0
    51da:	86 e0       	ldi	r24, 0x06	; 6
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
				Rectangle(6, 86, GetMaxX() - 6, 114);
    51e2:	22 e7       	ldi	r18, 0x72	; 114
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	49 ee       	ldi	r20, 0xE9	; 233
    51e8:	50 e0       	ldi	r21, 0x00	; 0
    51ea:	66 e5       	ldi	r22, 0x56	; 86
    51ec:	70 e0       	ldi	r23, 0x00	; 0
    51ee:	86 e0       	ldi	r24, 0x06	; 6
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
				SetColor(CLOUDS);
    51f6:	ae e9       	ldi	r26, 0x9E	; 158
    51f8:	bf ee       	ldi	r27, 0xEF	; 239
    51fa:	b0 93 79 00 	sts	0x0079, r27
    51fe:	a0 93 78 00 	sts	0x0078, r26
				FillRectangle(90, 152, GetMaxX() - 5, 180);
    5202:	0e e9       	ldi	r16, 0x9E	; 158
    5204:	1f ee       	ldi	r17, 0xEF	; 239
    5206:	24 eb       	ldi	r18, 0xB4	; 180
    5208:	30 e0       	ldi	r19, 0x00	; 0
    520a:	4a ee       	ldi	r20, 0xEA	; 234
    520c:	50 e0       	ldi	r21, 0x00	; 0
    520e:	68 e9       	ldi	r22, 0x98	; 152
    5210:	70 e0       	ldi	r23, 0x00	; 0
    5212:	8a e5       	ldi	r24, 0x5A	; 90
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
				FillRectangle(0, GetMaxY() - 135, GetMaxX(), GetMaxY());
    521a:	00 91 78 00 	lds	r16, 0x0078
    521e:	10 91 79 00 	lds	r17, 0x0079
    5222:	2f e3       	ldi	r18, 0x3F	; 63
    5224:	31 e0       	ldi	r19, 0x01	; 1
    5226:	4f ee       	ldi	r20, 0xEF	; 239
    5228:	50 e0       	ldi	r21, 0x00	; 0
    522a:	68 eb       	ldi	r22, 0xB8	; 184
    522c:	70 e0       	ldi	r23, 0x00	; 0
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
				DrawText(10, 150, GetMaxX() - 10, 180, str, ALINE_LEFT);
    5236:	e1 2c       	mov	r14, r1
    5238:	81 01       	movw	r16, r2
    523a:	24 eb       	ldi	r18, 0xB4	; 180
    523c:	30 e0       	ldi	r19, 0x00	; 0
    523e:	45 ee       	ldi	r20, 0xE5	; 229
    5240:	50 e0       	ldi	r21, 0x00	; 0
    5242:	66 e9       	ldi	r22, 0x96	; 150
    5244:	70 e0       	ldi	r23, 0x00	; 0
    5246:	8a e0       	ldi	r24, 0x0A	; 10
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
				SetColor(ALIZARIN);
    524e:	e7 e6       	ldi	r30, 0x67	; 103
    5250:	f2 ee       	ldi	r31, 0xE2	; 226
    5252:	f0 93 79 00 	sts	0x0079, r31
    5256:	e0 93 78 00 	sts	0x0078, r30
				FillRectangle(0, GetMaxY() - 50, GetMaxX(), GetMaxY());
    525a:	07 e6       	ldi	r16, 0x67	; 103
    525c:	12 ee       	ldi	r17, 0xE2	; 226
    525e:	2f e3       	ldi	r18, 0x3F	; 63
    5260:	31 e0       	ldi	r19, 0x01	; 1
    5262:	4f ee       	ldi	r20, 0xEF	; 239
    5264:	50 e0       	ldi	r21, 0x00	; 0
    5266:	6d e0       	ldi	r22, 0x0D	; 13
    5268:	71 e0       	ldi	r23, 0x01	; 1
    526a:	80 e0       	ldi	r24, 0x00	; 0
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
				SetFgColor(CLOUDS);
    5272:	8e e9       	ldi	r24, 0x9E	; 158
    5274:	9f ee       	ldi	r25, 0xEF	; 239
    5276:	90 93 64 00 	sts	0x0064, r25
    527a:	80 93 63 00 	sts	0x0063, r24
				DrawText(0, GetMaxY() - 50, GetMaxX(), GetMaxY(), "RESET", ALINE_CENTER);
    527e:	ee 24       	eor	r14, r14
    5280:	e3 94       	inc	r14
    5282:	03 ef       	ldi	r16, 0xF3	; 243
    5284:	10 e0       	ldi	r17, 0x00	; 0
    5286:	2f e3       	ldi	r18, 0x3F	; 63
    5288:	31 e0       	ldi	r19, 0x01	; 1
    528a:	4f ee       	ldi	r20, 0xEF	; 239
    528c:	50 e0       	ldi	r21, 0x00	; 0
    528e:	6d e0       	ldi	r22, 0x0D	; 13
    5290:	71 e0       	ldi	r23, 0x01	; 1
    5292:	80 e0       	ldi	r24, 0x00	; 0
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
				focusedField++;
    529a:	80 91 19 02 	lds	r24, 0x0219
    529e:	90 91 1a 02 	lds	r25, 0x021A
    52a2:	01 96       	adiw	r24, 0x01	; 1
    52a4:	90 93 1a 02 	sts	0x021A, r25
    52a8:	80 93 19 02 	sts	0x0219, r24
    52ac:	0f 90       	pop	r0
    52ae:	0f 90       	pop	r0
    52b0:	0f 90       	pop	r0
    52b2:	0f 90       	pop	r0
    52b4:	0f 90       	pop	r0
    52b6:	0f 90       	pop	r0
    52b8:	6f c0       	rjmp	.+222    	; 0x5398 <showCalc+0x76c>
			} else {
				readGPS();
    52ba:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <readGPS>
				if (currentReading.latitude != previousReading.latitude || currentReading.longitude != previousReading.longitude) {
    52be:	ae e8       	ldi	r26, 0x8E	; 142
    52c0:	b2 e0       	ldi	r27, 0x02	; 2
    52c2:	4d 91       	ld	r20, X+
    52c4:	5d 91       	ld	r21, X+
    52c6:	6d 91       	ld	r22, X+
    52c8:	7c 91       	ld	r23, X
    52ca:	e2 ec       	ldi	r30, 0xC2	; 194
    52cc:	f2 e0       	ldi	r31, 0x02	; 2
    52ce:	80 81       	ld	r24, Z
    52d0:	91 81       	ldd	r25, Z+1	; 0x01
    52d2:	a2 81       	ldd	r26, Z+2	; 0x02
    52d4:	b3 81       	ldd	r27, Z+3	; 0x03
    52d6:	48 17       	cp	r20, r24
    52d8:	59 07       	cpc	r21, r25
    52da:	6a 07       	cpc	r22, r26
    52dc:	7b 07       	cpc	r23, r27
    52de:	91 f4       	brne	.+36     	; 0x5304 <showCalc+0x6d8>
    52e0:	a0 ea       	ldi	r26, 0xA0	; 160
    52e2:	b2 e0       	ldi	r27, 0x02	; 2
    52e4:	4d 91       	ld	r20, X+
    52e6:	5d 91       	ld	r21, X+
    52e8:	6d 91       	ld	r22, X+
    52ea:	7c 91       	ld	r23, X
    52ec:	e6 ec       	ldi	r30, 0xC6	; 198
    52ee:	f2 e0       	ldi	r31, 0x02	; 2
    52f0:	80 81       	ld	r24, Z
    52f2:	91 81       	ldd	r25, Z+1	; 0x01
    52f4:	a2 81       	ldd	r26, Z+2	; 0x02
    52f6:	b3 81       	ldd	r27, Z+3	; 0x03
    52f8:	48 17       	cp	r20, r24
    52fa:	59 07       	cpc	r21, r25
    52fc:	6a 07       	cpc	r22, r26
    52fe:	7b 07       	cpc	r23, r27
    5300:	09 f4       	brne	.+2      	; 0x5304 <showCalc+0x6d8>
    5302:	4a c0       	rjmp	.+148    	; 0x5398 <showCalc+0x76c>
					sprintf(str, "Distance: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, latDouble, lonDouble, 'K')));
    5304:	a8 ea       	ldi	r26, 0xA8	; 168
    5306:	b2 e0       	ldi	r27, 0x02	; 2
    5308:	2d 91       	ld	r18, X+
    530a:	3d 91       	ld	r19, X+
    530c:	4d 91       	ld	r20, X+
    530e:	5c 91       	ld	r21, X
    5310:	e6 e9       	ldi	r30, 0x96	; 150
    5312:	f2 e0       	ldi	r31, 0x02	; 2
    5314:	60 81       	ld	r22, Z
    5316:	71 81       	ldd	r23, Z+1	; 0x01
    5318:	82 81       	ldd	r24, Z+2	; 0x02
    531a:	93 81       	ldd	r25, Z+3	; 0x03
    531c:	0f 2e       	mov	r0, r31
    531e:	fb e4       	ldi	r31, 0x4B	; 75
    5320:	8f 2e       	mov	r8, r31
    5322:	f0 2d       	mov	r31, r0
    5324:	63 01       	movw	r12, r6
    5326:	52 01       	movw	r10, r4
    5328:	ed 88       	ldd	r14, Y+21	; 0x15
    532a:	fe 88       	ldd	r15, Y+22	; 0x16
    532c:	0f 89       	ldd	r16, Y+23	; 0x17
    532e:	18 8d       	ldd	r17, Y+24	; 0x18
    5330:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    5334:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    5338:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    533c:	7f 93       	push	r23
    533e:	6f 93       	push	r22
    5340:	a3 ee       	ldi	r26, 0xE3	; 227
    5342:	b0 e0       	ldi	r27, 0x00	; 0
    5344:	bf 93       	push	r27
    5346:	af 93       	push	r26
    5348:	3f 92       	push	r3
    534a:	2f 92       	push	r2
    534c:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
					SetColor(CLOUDS);
    5350:	8e e9       	ldi	r24, 0x9E	; 158
    5352:	9f ee       	ldi	r25, 0xEF	; 239
    5354:	90 93 79 00 	sts	0x0079, r25
    5358:	80 93 78 00 	sts	0x0078, r24
					FillRectangle(90, 152, GetMaxX() - 5, 180);
    535c:	0e e9       	ldi	r16, 0x9E	; 158
    535e:	1f ee       	ldi	r17, 0xEF	; 239
    5360:	24 eb       	ldi	r18, 0xB4	; 180
    5362:	30 e0       	ldi	r19, 0x00	; 0
    5364:	4a ee       	ldi	r20, 0xEA	; 234
    5366:	50 e0       	ldi	r21, 0x00	; 0
    5368:	68 e9       	ldi	r22, 0x98	; 152
    536a:	70 e0       	ldi	r23, 0x00	; 0
    536c:	8a e5       	ldi	r24, 0x5A	; 90
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
					DrawText(10, 150, GetMaxX() - 5, 180, str, ALINE_LEFT);
    5374:	e1 2c       	mov	r14, r1
    5376:	81 01       	movw	r16, r2
    5378:	24 eb       	ldi	r18, 0xB4	; 180
    537a:	30 e0       	ldi	r19, 0x00	; 0
    537c:	4a ee       	ldi	r20, 0xEA	; 234
    537e:	50 e0       	ldi	r21, 0x00	; 0
    5380:	66 e9       	ldi	r22, 0x96	; 150
    5382:	70 e0       	ldi	r23, 0x00	; 0
    5384:	8a e0       	ldi	r24, 0x0A	; 10
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
    538c:	0f 90       	pop	r0
    538e:	0f 90       	pop	r0
    5390:	0f 90       	pop	r0
    5392:	0f 90       	pop	r0
    5394:	0f 90       	pop	r0
    5396:	0f 90       	pop	r0
				}
			}


			memset(str, 0, 20);
    5398:	0f 2e       	mov	r0, r31
    539a:	f4 e1       	ldi	r31, 0x14	; 20
    539c:	df 2e       	mov	r13, r31
    539e:	f0 2d       	mov	r31, r0
    53a0:	d1 01       	movw	r26, r2
    53a2:	ed 2d       	mov	r30, r13
    53a4:	1d 92       	st	X+, r1
    53a6:	ea 95       	dec	r30
    53a8:	e9 f7       	brne	.-6      	; 0x53a4 <showCalc+0x778>
			SetColor(RED);
    53aa:	80 e0       	ldi	r24, 0x00	; 0
    53ac:	98 ef       	ldi	r25, 0xF8	; 248
    53ae:	90 93 79 00 	sts	0x0079, r25
    53b2:	80 93 78 00 	sts	0x0078, r24
			SetFgColor(BLACK);
    53b6:	10 92 64 00 	sts	0x0064, r1
    53ba:	10 92 63 00 	sts	0x0063, r1
			sprintf(str, "%s", latitudeInput);
    53be:	6d e6       	ldi	r22, 0x6D	; 109
    53c0:	72 e0       	ldi	r23, 0x02	; 2
    53c2:	c1 01       	movw	r24, r2
    53c4:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <strcpy>
			DrawText(10, 85, GetMaxX() - 5, 115, str, ALINE_LEFT);
    53c8:	e1 2c       	mov	r14, r1
    53ca:	81 01       	movw	r16, r2
    53cc:	23 e7       	ldi	r18, 0x73	; 115
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	4a ee       	ldi	r20, 0xEA	; 234
    53d2:	50 e0       	ldi	r21, 0x00	; 0
    53d4:	65 e5       	ldi	r22, 0x55	; 85
    53d6:	70 e0       	ldi	r23, 0x00	; 0
    53d8:	8a e0       	ldi	r24, 0x0A	; 10
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
			
			memset(str, 0, 20);
    53e0:	d1 01       	movw	r26, r2
    53e2:	1d 92       	st	X+, r1
    53e4:	da 94       	dec	r13
    53e6:	e9 f7       	brne	.-6      	; 0x53e2 <showCalc+0x7b6>
			sprintf(str, "%s", longitudeInput);
    53e8:	68 e7       	ldi	r22, 0x78	; 120
    53ea:	72 e0       	ldi	r23, 0x02	; 2
    53ec:	c1 01       	movw	r24, r2
    53ee:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <strcpy>
			DrawText(10, 120, GetMaxX() - 5, 150, str, ALINE_LEFT);
    53f2:	26 e9       	ldi	r18, 0x96	; 150
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	4a ee       	ldi	r20, 0xEA	; 234
    53f8:	50 e0       	ldi	r21, 0x00	; 0
    53fa:	68 e7       	ldi	r22, 0x78	; 120
    53fc:	70 e0       	ldi	r23, 0x00	; 0
    53fe:	8a e0       	ldi	r24, 0x0A	; 10
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		
		firstShow = 1;
		
	}
    5406:	54 ce       	rjmp	.-856    	; 0x50b0 <showCalc+0x484>

00005408 <showMenu>:

		last_pen_check = 0;
	}
}

void showMenu() {
    5408:	ef 92       	push	r14
    540a:	0f 93       	push	r16
    540c:	1f 93       	push	r17
    540e:	cf 93       	push	r28
    5410:	df 93       	push	r29
	
	//int dotFlag = 0;

	currentScreen = 0;
    5412:	10 92 84 02 	sts	0x0284, r1
    5416:	10 92 83 02 	sts	0x0283, r1
	SetColor(CLOUDS);
    541a:	ce e9       	ldi	r28, 0x9E	; 158
    541c:	df ee       	ldi	r29, 0xEF	; 239
    541e:	d0 93 79 00 	sts	0x0079, r29
    5422:	c0 93 78 00 	sts	0x0078, r28
	BevelFill(0, 40, GetMaxX(), GetMaxY(), 0);
    5426:	ee 24       	eor	r14, r14
    5428:	e3 94       	inc	r14
    542a:	00 e0       	ldi	r16, 0x00	; 0
    542c:	10 e0       	ldi	r17, 0x00	; 0
    542e:	2f e3       	ldi	r18, 0x3F	; 63
    5430:	31 e0       	ldi	r19, 0x01	; 1
    5432:	4f ee       	ldi	r20, 0xEF	; 239
    5434:	50 e0       	ldi	r21, 0x00	; 0
    5436:	68 e2       	ldi	r22, 0x28	; 40
    5438:	70 e0       	ldi	r23, 0x00	; 0
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
	SetColor(TURQUOISE);
    5442:	83 ef       	ldi	r24, 0xF3	; 243
    5444:	9d e1       	ldi	r25, 0x1D	; 29
    5446:	90 93 79 00 	sts	0x0079, r25
    544a:	80 93 78 00 	sts	0x0078, r24
	FillRectangle(5, 62, GetMaxX() - 5, 117);
    544e:	03 ef       	ldi	r16, 0xF3	; 243
    5450:	1d e1       	ldi	r17, 0x1D	; 29
    5452:	25 e7       	ldi	r18, 0x75	; 117
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	4a ee       	ldi	r20, 0xEA	; 234
    5458:	50 e0       	ldi	r21, 0x00	; 0
    545a:	6e e3       	ldi	r22, 0x3E	; 62
    545c:	70 e0       	ldi	r23, 0x00	; 0
    545e:	85 e0       	ldi	r24, 0x05	; 5
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	FillRectangle(5, 122, GetMaxX() - 5, 177);
    5466:	00 91 78 00 	lds	r16, 0x0078
    546a:	10 91 79 00 	lds	r17, 0x0079
    546e:	21 eb       	ldi	r18, 0xB1	; 177
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	4a ee       	ldi	r20, 0xEA	; 234
    5474:	50 e0       	ldi	r21, 0x00	; 0
    5476:	6a e7       	ldi	r22, 0x7A	; 122
    5478:	70 e0       	ldi	r23, 0x00	; 0
    547a:	85 e0       	ldi	r24, 0x05	; 5
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	FillRectangle(5, 182, GetMaxX() -5, 237);
    5482:	00 91 78 00 	lds	r16, 0x0078
    5486:	10 91 79 00 	lds	r17, 0x0079
    548a:	2d ee       	ldi	r18, 0xED	; 237
    548c:	30 e0       	ldi	r19, 0x00	; 0
    548e:	4a ee       	ldi	r20, 0xEA	; 234
    5490:	50 e0       	ldi	r21, 0x00	; 0
    5492:	66 eb       	ldi	r22, 0xB6	; 182
    5494:	70 e0       	ldi	r23, 0x00	; 0
    5496:	85 e0       	ldi	r24, 0x05	; 5
    5498:	90 e0       	ldi	r25, 0x00	; 0
    549a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	FillRectangle(5, 242, GetMaxX() -5, 297);
    549e:	00 91 78 00 	lds	r16, 0x0078
    54a2:	10 91 79 00 	lds	r17, 0x0079
    54a6:	29 e2       	ldi	r18, 0x29	; 41
    54a8:	31 e0       	ldi	r19, 0x01	; 1
    54aa:	4a ee       	ldi	r20, 0xEA	; 234
    54ac:	50 e0       	ldi	r21, 0x00	; 0
    54ae:	62 ef       	ldi	r22, 0xF2	; 242
    54b0:	70 e0       	ldi	r23, 0x00	; 0
    54b2:	85 e0       	ldi	r24, 0x05	; 5
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	
	SetColor(GREEN_SEA);
    54ba:	80 e1       	ldi	r24, 0x10	; 16
    54bc:	95 e1       	ldi	r25, 0x15	; 21
    54be:	90 93 79 00 	sts	0x0079, r25
    54c2:	80 93 78 00 	sts	0x0078, r24
	FillRectangle(GetMaxX() - 60, 62, GetMaxX() - 5, 117);
    54c6:	00 e1       	ldi	r16, 0x10	; 16
    54c8:	15 e1       	ldi	r17, 0x15	; 21
    54ca:	25 e7       	ldi	r18, 0x75	; 117
    54cc:	30 e0       	ldi	r19, 0x00	; 0
    54ce:	4a ee       	ldi	r20, 0xEA	; 234
    54d0:	50 e0       	ldi	r21, 0x00	; 0
    54d2:	6e e3       	ldi	r22, 0x3E	; 62
    54d4:	70 e0       	ldi	r23, 0x00	; 0
    54d6:	83 eb       	ldi	r24, 0xB3	; 179
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	FillRectangle(GetMaxX() - 60, 122, GetMaxX() - 5, 177);
    54de:	00 91 78 00 	lds	r16, 0x0078
    54e2:	10 91 79 00 	lds	r17, 0x0079
    54e6:	21 eb       	ldi	r18, 0xB1	; 177
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	4a ee       	ldi	r20, 0xEA	; 234
    54ec:	50 e0       	ldi	r21, 0x00	; 0
    54ee:	6a e7       	ldi	r22, 0x7A	; 122
    54f0:	70 e0       	ldi	r23, 0x00	; 0
    54f2:	83 eb       	ldi	r24, 0xB3	; 179
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	FillRectangle(GetMaxX() - 60, 182, GetMaxX() -5, 237);
    54fa:	00 91 78 00 	lds	r16, 0x0078
    54fe:	10 91 79 00 	lds	r17, 0x0079
    5502:	2d ee       	ldi	r18, 0xED	; 237
    5504:	30 e0       	ldi	r19, 0x00	; 0
    5506:	4a ee       	ldi	r20, 0xEA	; 234
    5508:	50 e0       	ldi	r21, 0x00	; 0
    550a:	66 eb       	ldi	r22, 0xB6	; 182
    550c:	70 e0       	ldi	r23, 0x00	; 0
    550e:	83 eb       	ldi	r24, 0xB3	; 179
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	FillRectangle(GetMaxX() - 60, 242, GetMaxX() -5, 297);
    5516:	00 91 78 00 	lds	r16, 0x0078
    551a:	10 91 79 00 	lds	r17, 0x0079
    551e:	29 e2       	ldi	r18, 0x29	; 41
    5520:	31 e0       	ldi	r19, 0x01	; 1
    5522:	4a ee       	ldi	r20, 0xEA	; 234
    5524:	50 e0       	ldi	r21, 0x00	; 0
    5526:	62 ef       	ldi	r22, 0xF2	; 242
    5528:	70 e0       	ldi	r23, 0x00	; 0
    552a:	83 eb       	ldi	r24, 0xB3	; 179
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	
	SetFgColor(CLOUDS);
    5532:	d0 93 64 00 	sts	0x0064, r29
    5536:	c0 93 63 00 	sts	0x0063, r28
	DrawText(25, 62, GetMaxX() - 5, 114, "Live GPS", ALINE_LEFT);
    553a:	e1 2c       	mov	r14, r1
    553c:	09 ef       	ldi	r16, 0xF9	; 249
    553e:	10 e0       	ldi	r17, 0x00	; 0
    5540:	22 e7       	ldi	r18, 0x72	; 114
    5542:	30 e0       	ldi	r19, 0x00	; 0
    5544:	4a ee       	ldi	r20, 0xEA	; 234
    5546:	50 e0       	ldi	r21, 0x00	; 0
    5548:	6e e3       	ldi	r22, 0x3E	; 62
    554a:	70 e0       	ldi	r23, 0x00	; 0
    554c:	89 e1       	ldi	r24, 0x19	; 25
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(25, 122, GetMaxX() - 5, 174, "Distances", ALINE_LEFT);
    5554:	02 e0       	ldi	r16, 0x02	; 2
    5556:	11 e0       	ldi	r17, 0x01	; 1
    5558:	2e ea       	ldi	r18, 0xAE	; 174
    555a:	30 e0       	ldi	r19, 0x00	; 0
    555c:	4a ee       	ldi	r20, 0xEA	; 234
    555e:	50 e0       	ldi	r21, 0x00	; 0
    5560:	6a e7       	ldi	r22, 0x7A	; 122
    5562:	70 e0       	ldi	r23, 0x00	; 0
    5564:	89 e1       	ldi	r24, 0x19	; 25
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(25, 182, GetMaxX() -5, 234, "Altitude", ALINE_LEFT);
    556c:	0b e9       	ldi	r16, 0x9B	; 155
    556e:	10 e0       	ldi	r17, 0x00	; 0
    5570:	2a ee       	ldi	r18, 0xEA	; 234
    5572:	30 e0       	ldi	r19, 0x00	; 0
    5574:	4a ee       	ldi	r20, 0xEA	; 234
    5576:	50 e0       	ldi	r21, 0x00	; 0
    5578:	66 eb       	ldi	r22, 0xB6	; 182
    557a:	70 e0       	ldi	r23, 0x00	; 0
    557c:	89 e1       	ldi	r24, 0x19	; 25
    557e:	90 e0       	ldi	r25, 0x00	; 0
    5580:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(25, 242, GetMaxX() -5, 294, "Distance Calc.", ALINE_LEFT);
    5584:	05 eb       	ldi	r16, 0xB5	; 181
    5586:	10 e0       	ldi	r17, 0x00	; 0
    5588:	26 e2       	ldi	r18, 0x26	; 38
    558a:	31 e0       	ldi	r19, 0x01	; 1
    558c:	4a ee       	ldi	r20, 0xEA	; 234
    558e:	50 e0       	ldi	r21, 0x00	; 0
    5590:	62 ef       	ldi	r22, 0xF2	; 242
    5592:	70 e0       	ldi	r23, 0x00	; 0
    5594:	89 e1       	ldi	r24, 0x19	; 25
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	
	
	DrawText(GetMaxX() - 60, 62, GetMaxX() - 5, 114, ">", ALINE_CENTER);
    559c:	ee 24       	eor	r14, r14
    559e:	e3 94       	inc	r14
    55a0:	01 ee       	ldi	r16, 0xE1	; 225
    55a2:	10 e0       	ldi	r17, 0x00	; 0
    55a4:	22 e7       	ldi	r18, 0x72	; 114
    55a6:	30 e0       	ldi	r19, 0x00	; 0
    55a8:	4a ee       	ldi	r20, 0xEA	; 234
    55aa:	50 e0       	ldi	r21, 0x00	; 0
    55ac:	6e e3       	ldi	r22, 0x3E	; 62
    55ae:	70 e0       	ldi	r23, 0x00	; 0
    55b0:	83 eb       	ldi	r24, 0xB3	; 179
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(GetMaxX() - 60, 122, GetMaxX() - 5, 174, ">", ALINE_CENTER);
    55b8:	2e ea       	ldi	r18, 0xAE	; 174
    55ba:	30 e0       	ldi	r19, 0x00	; 0
    55bc:	4a ee       	ldi	r20, 0xEA	; 234
    55be:	50 e0       	ldi	r21, 0x00	; 0
    55c0:	6a e7       	ldi	r22, 0x7A	; 122
    55c2:	70 e0       	ldi	r23, 0x00	; 0
    55c4:	83 eb       	ldi	r24, 0xB3	; 179
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(GetMaxX() - 60, 182, GetMaxX() -5, 234, ">", ALINE_CENTER);
    55cc:	2a ee       	ldi	r18, 0xEA	; 234
    55ce:	30 e0       	ldi	r19, 0x00	; 0
    55d0:	4a ee       	ldi	r20, 0xEA	; 234
    55d2:	50 e0       	ldi	r21, 0x00	; 0
    55d4:	66 eb       	ldi	r22, 0xB6	; 182
    55d6:	70 e0       	ldi	r23, 0x00	; 0
    55d8:	83 eb       	ldi	r24, 0xB3	; 179
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(GetMaxX() - 60, 242, GetMaxX() -5, 294, ">", ALINE_CENTER);
    55e0:	26 e2       	ldi	r18, 0x26	; 38
    55e2:	31 e0       	ldi	r19, 0x01	; 1
    55e4:	4a ee       	ldi	r20, 0xEA	; 234
    55e6:	50 e0       	ldi	r21, 0x00	; 0
    55e8:	62 ef       	ldi	r22, 0xF2	; 242
    55ea:	70 e0       	ldi	r23, 0x00	; 0
    55ec:	83 eb       	ldi	r24, 0xB3	; 179
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	
	
	
	while(currentScreen == 0) {
    55f4:	80 91 83 02 	lds	r24, 0x0283
    55f8:	90 91 84 02 	lds	r25, 0x0284
    55fc:	89 2b       	or	r24, r25
    55fe:	51 f4       	brne	.+20     	; 0x5614 <showMenu+0x20c>
		ScanPen();		
    5600:	0e 94 03 21 	call	0x4206	; 0x4206 <ScanPen>
		readGPS();
    5604:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <readGPS>
	DrawText(GetMaxX() - 60, 182, GetMaxX() -5, 234, ">", ALINE_CENTER);
	DrawText(GetMaxX() - 60, 242, GetMaxX() -5, 294, ">", ALINE_CENTER);
	
	
	
	while(currentScreen == 0) {
    5608:	80 91 83 02 	lds	r24, 0x0283
    560c:	90 91 84 02 	lds	r25, 0x0284
    5610:	89 2b       	or	r24, r25
    5612:	b1 f3       	breq	.-20     	; 0x5600 <showMenu+0x1f8>
					showMenu();
				}
				*/
}

}
    5614:	df 91       	pop	r29
    5616:	cf 91       	pop	r28
    5618:	1f 91       	pop	r17
    561a:	0f 91       	pop	r16
    561c:	ef 90       	pop	r14
    561e:	08 95       	ret

00005620 <main>:
 * @brief A function that initializes touch screen, UART and interrupts
 *
 * This function is called only once on the start of the app.
 */
int main(void)
{
    5620:	ef 92       	push	r14
    5622:	0f 93       	push	r16
    5624:	1f 93       	push	r17
    5626:	cf 93       	push	r28
    5628:	df 93       	push	r29
	TCInit();
    562a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <TCInit>

	 // Disable JTAG Interface
	 MCUCSR |= _BV(JTD);
    562e:	84 b7       	in	r24, 0x34	; 52
    5630:	80 68       	ori	r24, 0x80	; 128
    5632:	84 bf       	out	0x34, r24	; 52
	 MCUCSR |= _BV(JTD);
    5634:	84 b7       	in	r24, 0x34	; 52
    5636:	80 68       	ori	r24, 0x80	; 128
    5638:	84 bf       	out	0x34, r24	; 52

	// Initialize and clear LCD
	LCD_Reset();
    563a:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <LCD_Reset>
	LCD_Clear(CLOUDS);	
    563e:	8e e9       	ldi	r24, 0x9E	; 158
    5640:	9f ee       	ldi	r25, 0xEF	; 239
    5642:	0e 94 67 19 	call	0x32ce	; 0x32ce <LCD_Clear>
	LcdFont(ft18x34);
    5646:	8a e9       	ldi	r24, 0x9A	; 154
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LcdFont>

	SetColor(WET_ASPHALT);
    564e:	8b e4       	ldi	r24, 0x4B	; 75
    5650:	92 e3       	ldi	r25, 0x32	; 50
    5652:	90 93 79 00 	sts	0x0079, r25
    5656:	80 93 78 00 	sts	0x0078, r24
	FillRectangle(0, 0, GetMaxX(), 40);
    565a:	0b e4       	ldi	r16, 0x4B	; 75
    565c:	12 e3       	ldi	r17, 0x32	; 50
    565e:	28 e2       	ldi	r18, 0x28	; 40
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	4f ee       	ldi	r20, 0xEF	; 239
    5664:	50 e0       	ldi	r21, 0x00	; 0
    5666:	60 e0       	ldi	r22, 0x00	; 0
    5668:	70 e0       	ldi	r23, 0x00	; 0
    566a:	80 e0       	ldi	r24, 0x00	; 0
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
	SetFgColor(CLOUDS);
    5672:	8e e9       	ldi	r24, 0x9E	; 158
    5674:	9f ee       	ldi	r25, 0xEF	; 239
    5676:	90 93 64 00 	sts	0x0064, r25
    567a:	80 93 63 00 	sts	0x0063, r24
	DrawText(0, 0, GetMaxX(), 40, "GPSmart", ALINE_CENTER);
    567e:	ee 24       	eor	r14, r14
    5680:	e3 94       	inc	r14
    5682:	0c e0       	ldi	r16, 0x0C	; 12
    5684:	11 e0       	ldi	r17, 0x01	; 1
    5686:	28 e2       	ldi	r18, 0x28	; 40
    5688:	30 e0       	ldi	r19, 0x00	; 0
    568a:	4f ee       	ldi	r20, 0xEF	; 239
    568c:	50 e0       	ldi	r21, 0x00	; 0
    568e:	60 e0       	ldi	r22, 0x00	; 0
    5690:	70 e0       	ldi	r23, 0x00	; 0
    5692:	80 e0       	ldi	r24, 0x00	; 0
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>

	 // Initialize UART modules
	 for (int i = 0; i < serialAvailable(); i++) {
    569a:	c0 e0       	ldi	r28, 0x00	; 0
    569c:	d0 e0       	ldi	r29, 0x00	; 0
    569e:	0f c0       	rjmp	.+30     	; 0x56be <main+0x9e>
		 serialInit(i, BAUD(9600, F_CPU));
    56a0:	63 e3       	ldi	r22, 0x33	; 51
    56a2:	70 e0       	ldi	r23, 0x00	; 0
    56a4:	8c 2f       	mov	r24, r28
    56a6:	0e 94 c4 14 	call	0x2988	; 0x2988 <serialInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    56aa:	2f ef       	ldi	r18, 0xFF	; 255
    56ac:	80 e7       	ldi	r24, 0x70	; 112
    56ae:	92 e0       	ldi	r25, 0x02	; 2
    56b0:	21 50       	subi	r18, 0x01	; 1
    56b2:	80 40       	sbci	r24, 0x00	; 0
    56b4:	90 40       	sbci	r25, 0x00	; 0
    56b6:	e1 f7       	brne	.-8      	; 0x56b0 <main+0x90>
    56b8:	00 c0       	rjmp	.+0      	; 0x56ba <main+0x9a>
    56ba:	00 00       	nop
	FillRectangle(0, 0, GetMaxX(), 40);
	SetFgColor(CLOUDS);
	DrawText(0, 0, GetMaxX(), 40, "GPSmart", ALINE_CENTER);

	 // Initialize UART modules
	 for (int i = 0; i < serialAvailable(); i++) {
    56bc:	21 96       	adiw	r28, 0x01	; 1
    56be:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialAvailable>
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	c8 17       	cp	r28, r24
    56c6:	d9 07       	cpc	r29, r25
    56c8:	5c f3       	brlt	.-42     	; 0x56a0 <main+0x80>
		 serialInit(i, BAUD(9600, F_CPU));
		 _delay_ms(100);
	 }

	 // Enable Interrupts
	 sei();
    56ca:	78 94       	sei

	 showMenu();
    56cc:	0e 94 04 2a 	call	0x5408	; 0x5408 <showMenu>
	
	 return 0;
}
    56d0:	80 e0       	ldi	r24, 0x00	; 0
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	df 91       	pop	r29
    56d6:	cf 91       	pop	r28
    56d8:	1f 91       	pop	r17
    56da:	0f 91       	pop	r16
    56dc:	ef 90       	pop	r14
    56de:	08 95       	ret

000056e0 <showLiveGPS>:
		}
		

}

void showLiveGPS() {
    56e0:	2f 92       	push	r2
    56e2:	3f 92       	push	r3
    56e4:	4f 92       	push	r4
    56e6:	5f 92       	push	r5
    56e8:	6f 92       	push	r6
    56ea:	7f 92       	push	r7
    56ec:	8f 92       	push	r8
    56ee:	9f 92       	push	r9
    56f0:	af 92       	push	r10
    56f2:	bf 92       	push	r11
    56f4:	cf 92       	push	r12
    56f6:	df 92       	push	r13
    56f8:	ef 92       	push	r14
    56fa:	0f 93       	push	r16
    56fc:	1f 93       	push	r17
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	cd b7       	in	r28, 0x3d	; 61
    5704:	de b7       	in	r29, 0x3e	; 62
    5706:	64 97       	sbiw	r28, 0x14	; 20
    5708:	0f b6       	in	r0, 0x3f	; 63
    570a:	f8 94       	cli
    570c:	de bf       	out	0x3e, r29	; 62
    570e:	0f be       	out	0x3f, r0	; 63
    5710:	cd bf       	out	0x3d, r28	; 61
	
	currentReading.lat[1] = '\0';
    5712:	10 92 9f 02 	sts	0x029F, r1
	int firstShow = 1; /**< A flag showing if this is the first time showing the screen */
	char str[20]; /**< A helper string used to store text that is to be shown on the screen */
	
	SetColor(CLOUDS);
    5716:	0f 2e       	mov	r0, r31
    5718:	fe e9       	ldi	r31, 0x9E	; 158
    571a:	cf 2e       	mov	r12, r31
    571c:	ff ee       	ldi	r31, 0xEF	; 239
    571e:	df 2e       	mov	r13, r31
    5720:	f0 2d       	mov	r31, r0
    5722:	d0 92 79 00 	sts	0x0079, r13
    5726:	c0 92 78 00 	sts	0x0078, r12
	BevelFill(0, 41, GetMaxX(), GetMaxY(), 0);
    572a:	ee 24       	eor	r14, r14
    572c:	e3 94       	inc	r14
    572e:	00 e0       	ldi	r16, 0x00	; 0
    5730:	10 e0       	ldi	r17, 0x00	; 0
    5732:	2f e3       	ldi	r18, 0x3F	; 63
    5734:	31 e0       	ldi	r19, 0x01	; 1
    5736:	4f ee       	ldi	r20, 0xEF	; 239
    5738:	50 e0       	ldi	r21, 0x00	; 0
    573a:	69 e2       	ldi	r22, 0x29	; 41
    573c:	70 e0       	ldi	r23, 0x00	; 0
    573e:	80 e0       	ldi	r24, 0x00	; 0
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
	SetColor(TURQUOISE);
    5746:	83 ef       	ldi	r24, 0xF3	; 243
    5748:	9d e1       	ldi	r25, 0x1D	; 29
    574a:	90 93 79 00 	sts	0x0079, r25
    574e:	80 93 78 00 	sts	0x0078, r24
	BevelFill(0, 40, GetMaxX(), 80, 0);
    5752:	20 e5       	ldi	r18, 0x50	; 80
    5754:	30 e0       	ldi	r19, 0x00	; 0
    5756:	4f ee       	ldi	r20, 0xEF	; 239
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	68 e2       	ldi	r22, 0x28	; 40
    575c:	70 e0       	ldi	r23, 0x00	; 0
    575e:	80 e0       	ldi	r24, 0x00	; 0
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
	SetColor(GREEN_SEA);
    5766:	80 e1       	ldi	r24, 0x10	; 16
    5768:	95 e1       	ldi	r25, 0x15	; 21
    576a:	90 93 79 00 	sts	0x0079, r25
    576e:	80 93 78 00 	sts	0x0078, r24
	BevelFill(0, 40, 40, 80, 0);
    5772:	20 e5       	ldi	r18, 0x50	; 80
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	48 e2       	ldi	r20, 0x28	; 40
    5778:	50 e0       	ldi	r21, 0x00	; 0
    577a:	68 e2       	ldi	r22, 0x28	; 40
    577c:	70 e0       	ldi	r23, 0x00	; 0
    577e:	80 e0       	ldi	r24, 0x00	; 0
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
	SetFgColor(CLOUDS);
    5786:	d0 92 64 00 	sts	0x0064, r13
    578a:	c0 92 63 00 	sts	0x0063, r12
	DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
    578e:	09 e9       	ldi	r16, 0x99	; 153
    5790:	10 e0       	ldi	r17, 0x00	; 0
    5792:	20 e5       	ldi	r18, 0x50	; 80
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	48 e2       	ldi	r20, 0x28	; 40
    5798:	50 e0       	ldi	r21, 0x00	; 0
    579a:	68 e2       	ldi	r22, 0x28	; 40
    579c:	70 e0       	ldi	r23, 0x00	; 0
    579e:	80 e0       	ldi	r24, 0x00	; 0
    57a0:	90 e0       	ldi	r25, 0x00	; 0
    57a2:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	DrawText(0, 40, GetMaxX(), 80, "Live GPS", ALINE_CENTER);
    57a6:	09 ef       	ldi	r16, 0xF9	; 249
    57a8:	10 e0       	ldi	r17, 0x00	; 0
    57aa:	20 e5       	ldi	r18, 0x50	; 80
    57ac:	30 e0       	ldi	r19, 0x00	; 0
    57ae:	4f ee       	ldi	r20, 0xEF	; 239
    57b0:	50 e0       	ldi	r21, 0x00	; 0
    57b2:	68 e2       	ldi	r22, 0x28	; 40
    57b4:	70 e0       	ldi	r23, 0x00	; 0
    57b6:	80 e0       	ldi	r24, 0x00	; 0
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
	SetColor(CLOUDS);
    57be:	d0 92 79 00 	sts	0x0079, r13
    57c2:	c0 92 78 00 	sts	0x0078, r12
}

void showLiveGPS() {
	
	currentReading.lat[1] = '\0';
	int firstShow = 1; /**< A flag showing if this is the first time showing the screen */
    57c6:	aa 24       	eor	r10, r10
    57c8:	a3 94       	inc	r10
    57ca:	b1 2c       	mov	r11, r1
	while(currentScreen == 1) {
		
		ScanPen();
		readGPS();

				memset(str, 0, 20);
    57cc:	9e 01       	movw	r18, r28
    57ce:	2f 5f       	subi	r18, 0xFF	; 255
    57d0:	3f 4f       	sbci	r19, 0xFF	; 255
    57d2:	69 01       	movw	r12, r18
				
				SetFgColor(WET_ASPHALT);
    57d4:	0f 2e       	mov	r0, r31
    57d6:	fb e4       	ldi	r31, 0x4B	; 75
    57d8:	4f 2e       	mov	r4, r31
    57da:	f2 e3       	ldi	r31, 0x32	; 50
    57dc:	5f 2e       	mov	r5, r31
    57de:	f0 2d       	mov	r31, r0
				
				sprintf(str, "Time: %02d:%02d:%02d", currentReading.hours, currentReading.minutes, currentReading.seconds);
    57e0:	0f 2e       	mov	r0, r31
    57e2:	fc e8       	ldi	r31, 0x8C	; 140
    57e4:	2f 2e       	mov	r2, r31
    57e6:	f2 e0       	ldi	r31, 0x02	; 2
    57e8:	3f 2e       	mov	r3, r31
    57ea:	f0 2d       	mov	r31, r0
    57ec:	0f 2e       	mov	r0, r31
    57ee:	fa e8       	ldi	r31, 0x8A	; 138
    57f0:	6f 2e       	mov	r6, r31
    57f2:	f2 e0       	ldi	r31, 0x02	; 2
    57f4:	7f 2e       	mov	r7, r31
    57f6:	f0 2d       	mov	r31, r0
    57f8:	0f 2e       	mov	r0, r31
    57fa:	f8 e8       	ldi	r31, 0x88	; 136
    57fc:	8f 2e       	mov	r8, r31
    57fe:	f2 e0       	ldi	r31, 0x02	; 2
    5800:	9f 2e       	mov	r9, r31
    5802:	f0 2d       	mov	r31, r0
	DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
	DrawText(0, 40, GetMaxX(), 80, "Live GPS", ALINE_CENTER);
	SetColor(CLOUDS);
	
	
	while(currentScreen == 1) {
    5804:	90 c1       	rjmp	.+800    	; 0x5b26 <showLiveGPS+0x446>
		
		ScanPen();
    5806:	0e 94 03 21 	call	0x4206	; 0x4206 <ScanPen>
		readGPS();
    580a:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <readGPS>

				memset(str, 0, 20);
    580e:	84 e1       	ldi	r24, 0x14	; 20
    5810:	d6 01       	movw	r26, r12
    5812:	1d 92       	st	X+, r1
    5814:	8a 95       	dec	r24
    5816:	e9 f7       	brne	.-6      	; 0x5812 <showLiveGPS+0x132>
				
				SetFgColor(WET_ASPHALT);
    5818:	50 92 64 00 	sts	0x0064, r5
    581c:	40 92 63 00 	sts	0x0063, r4
				
				sprintf(str, "Time: %02d:%02d:%02d", currentReading.hours, currentReading.minutes, currentReading.seconds);
    5820:	f1 01       	movw	r30, r2
    5822:	81 81       	ldd	r24, Z+1	; 0x01
    5824:	8f 93       	push	r24
    5826:	80 81       	ld	r24, Z
    5828:	8f 93       	push	r24
    582a:	d3 01       	movw	r26, r6
    582c:	11 96       	adiw	r26, 0x01	; 1
    582e:	8c 91       	ld	r24, X
    5830:	11 97       	sbiw	r26, 0x01	; 1
    5832:	8f 93       	push	r24
    5834:	8c 91       	ld	r24, X
    5836:	8f 93       	push	r24
    5838:	f4 01       	movw	r30, r8
    583a:	81 81       	ldd	r24, Z+1	; 0x01
    583c:	8f 93       	push	r24
    583e:	80 81       	ld	r24, Z
    5840:	8f 93       	push	r24
    5842:	a4 e1       	ldi	r26, 0x14	; 20
    5844:	b1 e0       	ldi	r27, 0x01	; 1
    5846:	bf 93       	push	r27
    5848:	af 93       	push	r26
    584a:	df 92       	push	r13
    584c:	cf 92       	push	r12
    584e:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
				if (currentReading.hours != previousReading.hours || firstShow) {
    5852:	0f b6       	in	r0, 0x3f	; 63
    5854:	f8 94       	cli
    5856:	de bf       	out	0x3e, r29	; 62
    5858:	0f be       	out	0x3f, r0	; 63
    585a:	cd bf       	out	0x3d, r28	; 61
    585c:	d4 01       	movw	r26, r8
    585e:	2d 91       	ld	r18, X+
    5860:	3c 91       	ld	r19, X
    5862:	ea eb       	ldi	r30, 0xBA	; 186
    5864:	f2 e0       	ldi	r31, 0x02	; 2
    5866:	80 81       	ld	r24, Z
    5868:	91 81       	ldd	r25, Z+1	; 0x01
    586a:	28 17       	cp	r18, r24
    586c:	39 07       	cpc	r19, r25
    586e:	29 f4       	brne	.+10     	; 0x587a <showLiveGPS+0x19a>
    5870:	a1 14       	cp	r10, r1
    5872:	b1 04       	cpc	r11, r1
    5874:	09 f0       	breq	.+2      	; 0x5878 <showLiveGPS+0x198>
    5876:	c9 c1       	rjmp	.+914    	; 0x5c0a <showLiveGPS+0x52a>
    5878:	5e c1       	rjmp	.+700    	; 0x5b36 <showLiveGPS+0x456>
					BevelFill(70, 83, 95, 110, 0);
    587a:	ee 24       	eor	r14, r14
    587c:	e3 94       	inc	r14
    587e:	00 e0       	ldi	r16, 0x00	; 0
    5880:	10 e0       	ldi	r17, 0x00	; 0
    5882:	2e e6       	ldi	r18, 0x6E	; 110
    5884:	30 e0       	ldi	r19, 0x00	; 0
    5886:	4f e5       	ldi	r20, 0x5F	; 95
    5888:	50 e0       	ldi	r21, 0x00	; 0
    588a:	63 e5       	ldi	r22, 0x53	; 83
    588c:	70 e0       	ldi	r23, 0x00	; 0
    588e:	86 e4       	ldi	r24, 0x46	; 70
    5890:	90 e0       	ldi	r25, 0x00	; 0
    5892:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
				}
				if (currentReading.minutes != previousReading.minutes || firstShow) {
    5896:	d3 01       	movw	r26, r6
    5898:	2d 91       	ld	r18, X+
    589a:	3c 91       	ld	r19, X
    589c:	80 91 bc 02 	lds	r24, 0x02BC
    58a0:	90 91 bd 02 	lds	r25, 0x02BD
    58a4:	28 17       	cp	r18, r24
    58a6:	39 07       	cpc	r19, r25
    58a8:	21 f4       	brne	.+8      	; 0x58b2 <showLiveGPS+0x1d2>
    58aa:	a1 14       	cp	r10, r1
    58ac:	b1 04       	cpc	r11, r1
    58ae:	09 f4       	brne	.+2      	; 0x58b2 <showLiveGPS+0x1d2>
    58b0:	4e c1       	rjmp	.+668    	; 0x5b4e <showLiveGPS+0x46e>
					BevelFill(101, 83, 121, 110, 0);
    58b2:	ee 24       	eor	r14, r14
    58b4:	e3 94       	inc	r14
    58b6:	00 e0       	ldi	r16, 0x00	; 0
    58b8:	10 e0       	ldi	r17, 0x00	; 0
    58ba:	2e e6       	ldi	r18, 0x6E	; 110
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	49 e7       	ldi	r20, 0x79	; 121
    58c0:	50 e0       	ldi	r21, 0x00	; 0
    58c2:	63 e5       	ldi	r22, 0x53	; 83
    58c4:	70 e0       	ldi	r23, 0x00	; 0
    58c6:	85 e6       	ldi	r24, 0x65	; 101
    58c8:	90 e0       	ldi	r25, 0x00	; 0
    58ca:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
				}
				
				BevelFill(127, 83, GetMaxX(), 110, 0);
    58ce:	2e e6       	ldi	r18, 0x6E	; 110
    58d0:	30 e0       	ldi	r19, 0x00	; 0
    58d2:	4f ee       	ldi	r20, 0xEF	; 239
    58d4:	50 e0       	ldi	r21, 0x00	; 0
    58d6:	63 e5       	ldi	r22, 0x53	; 83
    58d8:	70 e0       	ldi	r23, 0x00	; 0
    58da:	8f e7       	ldi	r24, 0x7F	; 127
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
				DrawText(20, 100, GetMaxX() - 20, 100, str, ALINE_LEFT);
    58e2:	e1 2c       	mov	r14, r1
    58e4:	86 01       	movw	r16, r12
    58e6:	24 e6       	ldi	r18, 0x64	; 100
    58e8:	30 e0       	ldi	r19, 0x00	; 0
    58ea:	4b ed       	ldi	r20, 0xDB	; 219
    58ec:	50 e0       	ldi	r21, 0x00	; 0
    58ee:	64 e6       	ldi	r22, 0x64	; 100
    58f0:	70 e0       	ldi	r23, 0x00	; 0
    58f2:	84 e1       	ldi	r24, 0x14	; 20
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
				
				if (currentReading.latitude != previousReading.latitude || firstShow) {
    58fa:	40 91 8e 02 	lds	r20, 0x028E
    58fe:	50 91 8f 02 	lds	r21, 0x028F
    5902:	60 91 90 02 	lds	r22, 0x0290
    5906:	70 91 91 02 	lds	r23, 0x0291
    590a:	80 91 c2 02 	lds	r24, 0x02C2
    590e:	90 91 c3 02 	lds	r25, 0x02C3
    5912:	a0 91 c4 02 	lds	r26, 0x02C4
    5916:	b0 91 c5 02 	lds	r27, 0x02C5
    591a:	48 17       	cp	r20, r24
    591c:	59 07       	cpc	r21, r25
    591e:	6a 07       	cpc	r22, r26
    5920:	7b 07       	cpc	r23, r27
    5922:	21 f4       	brne	.+8      	; 0x592c <showLiveGPS+0x24c>
    5924:	a1 14       	cp	r10, r1
    5926:	b1 04       	cpc	r11, r1
    5928:	09 f4       	brne	.+2      	; 0x592c <showLiveGPS+0x24c>
    592a:	42 c1       	rjmp	.+644    	; 0x5bb0 <showLiveGPS+0x4d0>
					sprintf(str, "Latitude: %lu.%lu", currentReading.latitudeDegrees, currentReading.minutesLat);
    592c:	ea e9       	ldi	r30, 0x9A	; 154
    592e:	f2 e0       	ldi	r31, 0x02	; 2
    5930:	83 81       	ldd	r24, Z+3	; 0x03
    5932:	8f 93       	push	r24
    5934:	82 81       	ldd	r24, Z+2	; 0x02
    5936:	8f 93       	push	r24
    5938:	81 81       	ldd	r24, Z+1	; 0x01
    593a:	8f 93       	push	r24
    593c:	80 81       	ld	r24, Z
    593e:	8f 93       	push	r24
    5940:	e2 e9       	ldi	r30, 0x92	; 146
    5942:	f2 e0       	ldi	r31, 0x02	; 2
    5944:	83 81       	ldd	r24, Z+3	; 0x03
    5946:	8f 93       	push	r24
    5948:	82 81       	ldd	r24, Z+2	; 0x02
    594a:	8f 93       	push	r24
    594c:	81 81       	ldd	r24, Z+1	; 0x01
    594e:	8f 93       	push	r24
    5950:	80 81       	ld	r24, Z
    5952:	8f 93       	push	r24
    5954:	89 e2       	ldi	r24, 0x29	; 41
    5956:	91 e0       	ldi	r25, 0x01	; 1
    5958:	9f 93       	push	r25
    595a:	8f 93       	push	r24
    595c:	df 92       	push	r13
    595e:	cf 92       	push	r12
    5960:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
					BevelFill(97, 130, GetMaxX(), 150, 0);
    5964:	ee 24       	eor	r14, r14
    5966:	e3 94       	inc	r14
    5968:	00 e0       	ldi	r16, 0x00	; 0
    596a:	10 e0       	ldi	r17, 0x00	; 0
    596c:	26 e9       	ldi	r18, 0x96	; 150
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	4f ee       	ldi	r20, 0xEF	; 239
    5972:	50 e0       	ldi	r21, 0x00	; 0
    5974:	62 e8       	ldi	r22, 0x82	; 130
    5976:	70 e0       	ldi	r23, 0x00	; 0
    5978:	81 e6       	ldi	r24, 0x61	; 97
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
					DrawText(20, 140, GetMaxX() - 20, 140, str, ALINE_LEFT);
    5980:	e1 2c       	mov	r14, r1
    5982:	86 01       	movw	r16, r12
    5984:	2c e8       	ldi	r18, 0x8C	; 140
    5986:	30 e0       	ldi	r19, 0x00	; 0
    5988:	4b ed       	ldi	r20, 0xDB	; 219
    598a:	50 e0       	ldi	r21, 0x00	; 0
    598c:	6c e8       	ldi	r22, 0x8C	; 140
    598e:	70 e0       	ldi	r23, 0x00	; 0
    5990:	84 e1       	ldi	r24, 0x14	; 20
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
				}
				
				if (currentReading.longitude != previousReading.longitude || firstShow) {
    5998:	0f b6       	in	r0, 0x3f	; 63
    599a:	f8 94       	cli
    599c:	de bf       	out	0x3e, r29	; 62
    599e:	0f be       	out	0x3f, r0	; 63
    59a0:	cd bf       	out	0x3d, r28	; 61
    59a2:	a0 ea       	ldi	r26, 0xA0	; 160
    59a4:	b2 e0       	ldi	r27, 0x02	; 2
    59a6:	4d 91       	ld	r20, X+
    59a8:	5d 91       	ld	r21, X+
    59aa:	6d 91       	ld	r22, X+
    59ac:	7c 91       	ld	r23, X
    59ae:	e6 ec       	ldi	r30, 0xC6	; 198
    59b0:	f2 e0       	ldi	r31, 0x02	; 2
    59b2:	80 81       	ld	r24, Z
    59b4:	91 81       	ldd	r25, Z+1	; 0x01
    59b6:	a2 81       	ldd	r26, Z+2	; 0x02
    59b8:	b3 81       	ldd	r27, Z+3	; 0x03
    59ba:	48 17       	cp	r20, r24
    59bc:	59 07       	cpc	r21, r25
    59be:	6a 07       	cpc	r22, r26
    59c0:	7b 07       	cpc	r23, r27
    59c2:	21 f4       	brne	.+8      	; 0x59cc <showLiveGPS+0x2ec>
    59c4:	a1 14       	cp	r10, r1
    59c6:	b1 04       	cpc	r11, r1
    59c8:	09 f4       	brne	.+2      	; 0x59cc <showLiveGPS+0x2ec>
    59ca:	05 c1       	rjmp	.+522    	; 0x5bd6 <showLiveGPS+0x4f6>
					sprintf(str, "Longitude: %lu.%lu", currentReading.longitudeDegrees, currentReading.minutesLon);
    59cc:	ec ea       	ldi	r30, 0xAC	; 172
    59ce:	f2 e0       	ldi	r31, 0x02	; 2
    59d0:	83 81       	ldd	r24, Z+3	; 0x03
    59d2:	8f 93       	push	r24
    59d4:	82 81       	ldd	r24, Z+2	; 0x02
    59d6:	8f 93       	push	r24
    59d8:	81 81       	ldd	r24, Z+1	; 0x01
    59da:	8f 93       	push	r24
    59dc:	80 81       	ld	r24, Z
    59de:	8f 93       	push	r24
    59e0:	e4 ea       	ldi	r30, 0xA4	; 164
    59e2:	f2 e0       	ldi	r31, 0x02	; 2
    59e4:	83 81       	ldd	r24, Z+3	; 0x03
    59e6:	8f 93       	push	r24
    59e8:	82 81       	ldd	r24, Z+2	; 0x02
    59ea:	8f 93       	push	r24
    59ec:	81 81       	ldd	r24, Z+1	; 0x01
    59ee:	8f 93       	push	r24
    59f0:	80 81       	ld	r24, Z
    59f2:	8f 93       	push	r24
    59f4:	8b e3       	ldi	r24, 0x3B	; 59
    59f6:	91 e0       	ldi	r25, 0x01	; 1
    59f8:	9f 93       	push	r25
    59fa:	8f 93       	push	r24
    59fc:	df 92       	push	r13
    59fe:	cf 92       	push	r12
    5a00:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
					BevelFill(110, 160, GetMaxX(), 180, 0);
    5a04:	ee 24       	eor	r14, r14
    5a06:	e3 94       	inc	r14
    5a08:	00 e0       	ldi	r16, 0x00	; 0
    5a0a:	10 e0       	ldi	r17, 0x00	; 0
    5a0c:	24 eb       	ldi	r18, 0xB4	; 180
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
    5a10:	4f ee       	ldi	r20, 0xEF	; 239
    5a12:	50 e0       	ldi	r21, 0x00	; 0
    5a14:	60 ea       	ldi	r22, 0xA0	; 160
    5a16:	70 e0       	ldi	r23, 0x00	; 0
    5a18:	8e e6       	ldi	r24, 0x6E	; 110
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
					DrawText(20, 170, GetMaxX() - 20, 170, str, ALINE_LEFT);
    5a20:	e1 2c       	mov	r14, r1
    5a22:	86 01       	movw	r16, r12
    5a24:	2a ea       	ldi	r18, 0xAA	; 170
    5a26:	30 e0       	ldi	r19, 0x00	; 0
    5a28:	4b ed       	ldi	r20, 0xDB	; 219
    5a2a:	50 e0       	ldi	r21, 0x00	; 0
    5a2c:	6a ea       	ldi	r22, 0xAA	; 170
    5a2e:	70 e0       	ldi	r23, 0x00	; 0
    5a30:	84 e1       	ldi	r24, 0x14	; 20
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
				}
				
				if (currentReading.altitude != previousReading.altitude || firstShow) {
    5a38:	a4 eb       	ldi	r26, 0xB4	; 180
    5a3a:	b2 e0       	ldi	r27, 0x02	; 2
    5a3c:	8d 91       	ld	r24, X+
    5a3e:	9c 91       	ld	r25, X
    5a40:	0f b6       	in	r0, 0x3f	; 63
    5a42:	f8 94       	cli
    5a44:	de bf       	out	0x3e, r29	; 62
    5a46:	0f be       	out	0x3f, r0	; 63
    5a48:	cd bf       	out	0x3d, r28	; 61
    5a4a:	a0 ec       	ldi	r26, 0xC0	; 192
    5a4c:	b2 e0       	ldi	r27, 0x02	; 2
    5a4e:	2d 91       	ld	r18, X+
    5a50:	3c 91       	ld	r19, X
    5a52:	82 17       	cp	r24, r18
    5a54:	93 07       	cpc	r25, r19
    5a56:	21 f4       	brne	.+8      	; 0x5a60 <showLiveGPS+0x380>
    5a58:	a1 14       	cp	r10, r1
    5a5a:	b1 04       	cpc	r11, r1
    5a5c:	09 f4       	brne	.+2      	; 0x5a60 <showLiveGPS+0x380>
    5a5e:	c8 c0       	rjmp	.+400    	; 0x5bf0 <showLiveGPS+0x510>
					sprintf(str, "Altitude: %d m", currentReading.altitude);
    5a60:	9f 93       	push	r25
    5a62:	8f 93       	push	r24
    5a64:	8e e4       	ldi	r24, 0x4E	; 78
    5a66:	91 e0       	ldi	r25, 0x01	; 1
    5a68:	9f 93       	push	r25
    5a6a:	8f 93       	push	r24
    5a6c:	df 92       	push	r13
    5a6e:	cf 92       	push	r12
    5a70:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
					BevelFill(90, 190, GetMaxX(), 210, 0);
    5a74:	ee 24       	eor	r14, r14
    5a76:	e3 94       	inc	r14
    5a78:	00 e0       	ldi	r16, 0x00	; 0
    5a7a:	10 e0       	ldi	r17, 0x00	; 0
    5a7c:	22 ed       	ldi	r18, 0xD2	; 210
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
    5a80:	4f ee       	ldi	r20, 0xEF	; 239
    5a82:	50 e0       	ldi	r21, 0x00	; 0
    5a84:	6e eb       	ldi	r22, 0xBE	; 190
    5a86:	70 e0       	ldi	r23, 0x00	; 0
    5a88:	8a e5       	ldi	r24, 0x5A	; 90
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
					DrawText(20, 200, GetMaxX() - 20, 200, str, ALINE_LEFT);
    5a90:	e1 2c       	mov	r14, r1
    5a92:	86 01       	movw	r16, r12
    5a94:	28 ec       	ldi	r18, 0xC8	; 200
    5a96:	30 e0       	ldi	r19, 0x00	; 0
    5a98:	4b ed       	ldi	r20, 0xDB	; 219
    5a9a:	50 e0       	ldi	r21, 0x00	; 0
    5a9c:	68 ec       	ldi	r22, 0xC8	; 200
    5a9e:	70 e0       	ldi	r23, 0x00	; 0
    5aa0:	84 e1       	ldi	r24, 0x14	; 20
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
				}
				
				
				if (currentReading.satellites != previousReading.satellites || firstShow) {
    5aa8:	e2 eb       	ldi	r30, 0xB2	; 178
    5aaa:	f2 e0       	ldi	r31, 0x02	; 2
    5aac:	80 81       	ld	r24, Z
    5aae:	91 81       	ldd	r25, Z+1	; 0x01
    5ab0:	0f 90       	pop	r0
    5ab2:	0f 90       	pop	r0
    5ab4:	0f 90       	pop	r0
    5ab6:	0f 90       	pop	r0
    5ab8:	0f 90       	pop	r0
    5aba:	0f 90       	pop	r0
    5abc:	ae eb       	ldi	r26, 0xBE	; 190
    5abe:	b2 e0       	ldi	r27, 0x02	; 2
    5ac0:	2d 91       	ld	r18, X+
    5ac2:	3c 91       	ld	r19, X
    5ac4:	82 17       	cp	r24, r18
    5ac6:	93 07       	cpc	r25, r19
    5ac8:	11 f4       	brne	.+4      	; 0x5ace <showLiveGPS+0x3ee>
    5aca:	ab 28       	or	r10, r11
    5acc:	51 f1       	breq	.+84     	; 0x5b22 <showLiveGPS+0x442>
					sprintf(str, "Satellite Count: %d", currentReading.satellites);
    5ace:	9f 93       	push	r25
    5ad0:	8f 93       	push	r24
    5ad2:	8d e5       	ldi	r24, 0x5D	; 93
    5ad4:	91 e0       	ldi	r25, 0x01	; 1
    5ad6:	9f 93       	push	r25
    5ad8:	8f 93       	push	r24
    5ada:	df 92       	push	r13
    5adc:	cf 92       	push	r12
    5ade:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
					BevelFill(155, 220, GetMaxX(), 240, 0);
    5ae2:	ee 24       	eor	r14, r14
    5ae4:	e3 94       	inc	r14
    5ae6:	00 e0       	ldi	r16, 0x00	; 0
    5ae8:	10 e0       	ldi	r17, 0x00	; 0
    5aea:	20 ef       	ldi	r18, 0xF0	; 240
    5aec:	30 e0       	ldi	r19, 0x00	; 0
    5aee:	4f ee       	ldi	r20, 0xEF	; 239
    5af0:	50 e0       	ldi	r21, 0x00	; 0
    5af2:	6c ed       	ldi	r22, 0xDC	; 220
    5af4:	70 e0       	ldi	r23, 0x00	; 0
    5af6:	8b e9       	ldi	r24, 0x9B	; 155
    5af8:	90 e0       	ldi	r25, 0x00	; 0
    5afa:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
					DrawText(20, 230, GetMaxX() - 20, 230, str, ALINE_LEFT);
    5afe:	e1 2c       	mov	r14, r1
    5b00:	86 01       	movw	r16, r12
    5b02:	26 ee       	ldi	r18, 0xE6	; 230
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	4b ed       	ldi	r20, 0xDB	; 219
    5b08:	50 e0       	ldi	r21, 0x00	; 0
    5b0a:	66 ee       	ldi	r22, 0xE6	; 230
    5b0c:	70 e0       	ldi	r23, 0x00	; 0
    5b0e:	84 e1       	ldi	r24, 0x14	; 20
    5b10:	90 e0       	ldi	r25, 0x00	; 0
    5b12:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
    5b16:	0f 90       	pop	r0
    5b18:	0f 90       	pop	r0
    5b1a:	0f 90       	pop	r0
    5b1c:	0f 90       	pop	r0
    5b1e:	0f 90       	pop	r0
    5b20:	0f 90       	pop	r0
    5b22:	a1 2c       	mov	r10, r1
    5b24:	b1 2c       	mov	r11, r1
	DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
	DrawText(0, 40, GetMaxX(), 80, "Live GPS", ALINE_CENTER);
	SetColor(CLOUDS);
	
	
	while(currentScreen == 1) {
    5b26:	80 91 83 02 	lds	r24, 0x0283
    5b2a:	90 91 84 02 	lds	r25, 0x0284
    5b2e:	01 97       	sbiw	r24, 0x01	; 1
    5b30:	09 f4       	brne	.+2      	; 0x5b34 <showLiveGPS+0x454>
    5b32:	69 ce       	rjmp	.-814    	; 0x5806 <showLiveGPS+0x126>
    5b34:	d7 c0       	rjmp	.+430    	; 0x5ce4 <showLiveGPS+0x604>
				
				sprintf(str, "Time: %02d:%02d:%02d", currentReading.hours, currentReading.minutes, currentReading.seconds);
				if (currentReading.hours != previousReading.hours || firstShow) {
					BevelFill(70, 83, 95, 110, 0);
				}
				if (currentReading.minutes != previousReading.minutes || firstShow) {
    5b36:	f3 01       	movw	r30, r6
    5b38:	20 81       	ld	r18, Z
    5b3a:	31 81       	ldd	r19, Z+1	; 0x01
    5b3c:	80 91 bc 02 	lds	r24, 0x02BC
    5b40:	90 91 bd 02 	lds	r25, 0x02BD
    5b44:	28 17       	cp	r18, r24
    5b46:	39 07       	cpc	r19, r25
    5b48:	09 f0       	breq	.+2      	; 0x5b4c <showLiveGPS+0x46c>
    5b4a:	b3 ce       	rjmp	.-666    	; 0x58b2 <showLiveGPS+0x1d2>
    5b4c:	6d c0       	rjmp	.+218    	; 0x5c28 <showLiveGPS+0x548>
					BevelFill(101, 83, 121, 110, 0);
				}
				
				BevelFill(127, 83, GetMaxX(), 110, 0);
    5b4e:	ee 24       	eor	r14, r14
    5b50:	e3 94       	inc	r14
    5b52:	00 e0       	ldi	r16, 0x00	; 0
    5b54:	10 e0       	ldi	r17, 0x00	; 0
    5b56:	2e e6       	ldi	r18, 0x6E	; 110
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	4f ee       	ldi	r20, 0xEF	; 239
    5b5c:	50 e0       	ldi	r21, 0x00	; 0
    5b5e:	63 e5       	ldi	r22, 0x53	; 83
    5b60:	70 e0       	ldi	r23, 0x00	; 0
    5b62:	8f e7       	ldi	r24, 0x7F	; 127
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
				DrawText(20, 100, GetMaxX() - 20, 100, str, ALINE_LEFT);
    5b6a:	e1 2c       	mov	r14, r1
    5b6c:	86 01       	movw	r16, r12
    5b6e:	24 e6       	ldi	r18, 0x64	; 100
    5b70:	30 e0       	ldi	r19, 0x00	; 0
    5b72:	4b ed       	ldi	r20, 0xDB	; 219
    5b74:	50 e0       	ldi	r21, 0x00	; 0
    5b76:	64 e6       	ldi	r22, 0x64	; 100
    5b78:	70 e0       	ldi	r23, 0x00	; 0
    5b7a:	84 e1       	ldi	r24, 0x14	; 20
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
				
				if (currentReading.latitude != previousReading.latitude || firstShow) {
    5b82:	40 91 8e 02 	lds	r20, 0x028E
    5b86:	50 91 8f 02 	lds	r21, 0x028F
    5b8a:	60 91 90 02 	lds	r22, 0x0290
    5b8e:	70 91 91 02 	lds	r23, 0x0291
    5b92:	80 91 c2 02 	lds	r24, 0x02C2
    5b96:	90 91 c3 02 	lds	r25, 0x02C3
    5b9a:	a0 91 c4 02 	lds	r26, 0x02C4
    5b9e:	b0 91 c5 02 	lds	r27, 0x02C5
    5ba2:	48 17       	cp	r20, r24
    5ba4:	59 07       	cpc	r21, r25
    5ba6:	6a 07       	cpc	r22, r26
    5ba8:	7b 07       	cpc	r23, r27
    5baa:	09 f0       	breq	.+2      	; 0x5bae <showLiveGPS+0x4ce>
    5bac:	bf ce       	rjmp	.-642    	; 0x592c <showLiveGPS+0x24c>
    5bae:	6d c0       	rjmp	.+218    	; 0x5c8a <showLiveGPS+0x5aa>
					sprintf(str, "Latitude: %lu.%lu", currentReading.latitudeDegrees, currentReading.minutesLat);
					BevelFill(97, 130, GetMaxX(), 150, 0);
					DrawText(20, 140, GetMaxX() - 20, 140, str, ALINE_LEFT);
				}
				
				if (currentReading.longitude != previousReading.longitude || firstShow) {
    5bb0:	a0 ea       	ldi	r26, 0xA0	; 160
    5bb2:	b2 e0       	ldi	r27, 0x02	; 2
    5bb4:	4d 91       	ld	r20, X+
    5bb6:	5d 91       	ld	r21, X+
    5bb8:	6d 91       	ld	r22, X+
    5bba:	7c 91       	ld	r23, X
    5bbc:	e6 ec       	ldi	r30, 0xC6	; 198
    5bbe:	f2 e0       	ldi	r31, 0x02	; 2
    5bc0:	80 81       	ld	r24, Z
    5bc2:	91 81       	ldd	r25, Z+1	; 0x01
    5bc4:	a2 81       	ldd	r26, Z+2	; 0x02
    5bc6:	b3 81       	ldd	r27, Z+3	; 0x03
    5bc8:	48 17       	cp	r20, r24
    5bca:	59 07       	cpc	r21, r25
    5bcc:	6a 07       	cpc	r22, r26
    5bce:	7b 07       	cpc	r23, r27
    5bd0:	09 f0       	breq	.+2      	; 0x5bd4 <showLiveGPS+0x4f4>
    5bd2:	fc ce       	rjmp	.-520    	; 0x59cc <showLiveGPS+0x2ec>
    5bd4:	6d c0       	rjmp	.+218    	; 0x5cb0 <showLiveGPS+0x5d0>
					sprintf(str, "Longitude: %lu.%lu", currentReading.longitudeDegrees, currentReading.minutesLon);
					BevelFill(110, 160, GetMaxX(), 180, 0);
					DrawText(20, 170, GetMaxX() - 20, 170, str, ALINE_LEFT);
				}
				
				if (currentReading.altitude != previousReading.altitude || firstShow) {
    5bd6:	a4 eb       	ldi	r26, 0xB4	; 180
    5bd8:	b2 e0       	ldi	r27, 0x02	; 2
    5bda:	8d 91       	ld	r24, X+
    5bdc:	9c 91       	ld	r25, X
    5bde:	e0 ec       	ldi	r30, 0xC0	; 192
    5be0:	f2 e0       	ldi	r31, 0x02	; 2
    5be2:	20 81       	ld	r18, Z
    5be4:	31 81       	ldd	r19, Z+1	; 0x01
    5be6:	82 17       	cp	r24, r18
    5be8:	93 07       	cpc	r25, r19
    5bea:	09 f0       	breq	.+2      	; 0x5bee <showLiveGPS+0x50e>
    5bec:	39 cf       	rjmp	.-398    	; 0x5a60 <showLiveGPS+0x380>
    5bee:	6d c0       	rjmp	.+218    	; 0x5cca <showLiveGPS+0x5ea>
					BevelFill(90, 190, GetMaxX(), 210, 0);
					DrawText(20, 200, GetMaxX() - 20, 200, str, ALINE_LEFT);
				}
				
				
				if (currentReading.satellites != previousReading.satellites || firstShow) {
    5bf0:	a2 eb       	ldi	r26, 0xB2	; 178
    5bf2:	b2 e0       	ldi	r27, 0x02	; 2
    5bf4:	8d 91       	ld	r24, X+
    5bf6:	9c 91       	ld	r25, X
    5bf8:	ee eb       	ldi	r30, 0xBE	; 190
    5bfa:	f2 e0       	ldi	r31, 0x02	; 2
    5bfc:	20 81       	ld	r18, Z
    5bfe:	31 81       	ldd	r19, Z+1	; 0x01
    5c00:	82 17       	cp	r24, r18
    5c02:	93 07       	cpc	r25, r19
    5c04:	09 f0       	breq	.+2      	; 0x5c08 <showLiveGPS+0x528>
    5c06:	63 cf       	rjmp	.-314    	; 0x5ace <showLiveGPS+0x3ee>
    5c08:	8c cf       	rjmp	.-232    	; 0x5b22 <showLiveGPS+0x442>
				
				SetFgColor(WET_ASPHALT);
				
				sprintf(str, "Time: %02d:%02d:%02d", currentReading.hours, currentReading.minutes, currentReading.seconds);
				if (currentReading.hours != previousReading.hours || firstShow) {
					BevelFill(70, 83, 95, 110, 0);
    5c0a:	ee 24       	eor	r14, r14
    5c0c:	e3 94       	inc	r14
    5c0e:	00 e0       	ldi	r16, 0x00	; 0
    5c10:	10 e0       	ldi	r17, 0x00	; 0
    5c12:	2e e6       	ldi	r18, 0x6E	; 110
    5c14:	30 e0       	ldi	r19, 0x00	; 0
    5c16:	4f e5       	ldi	r20, 0x5F	; 95
    5c18:	50 e0       	ldi	r21, 0x00	; 0
    5c1a:	63 e5       	ldi	r22, 0x53	; 83
    5c1c:	70 e0       	ldi	r23, 0x00	; 0
    5c1e:	86 e4       	ldi	r24, 0x46	; 70
    5c20:	90 e0       	ldi	r25, 0x00	; 0
    5c22:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
    5c26:	45 ce       	rjmp	.-886    	; 0x58b2 <showLiveGPS+0x1d2>
				}
				if (currentReading.minutes != previousReading.minutes || firstShow) {
					BevelFill(101, 83, 121, 110, 0);
				}
				
				BevelFill(127, 83, GetMaxX(), 110, 0);
    5c28:	ee 24       	eor	r14, r14
    5c2a:	e3 94       	inc	r14
    5c2c:	00 e0       	ldi	r16, 0x00	; 0
    5c2e:	10 e0       	ldi	r17, 0x00	; 0
    5c30:	2e e6       	ldi	r18, 0x6E	; 110
    5c32:	30 e0       	ldi	r19, 0x00	; 0
    5c34:	4f ee       	ldi	r20, 0xEF	; 239
    5c36:	50 e0       	ldi	r21, 0x00	; 0
    5c38:	63 e5       	ldi	r22, 0x53	; 83
    5c3a:	70 e0       	ldi	r23, 0x00	; 0
    5c3c:	8f e7       	ldi	r24, 0x7F	; 127
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
				DrawText(20, 100, GetMaxX() - 20, 100, str, ALINE_LEFT);
    5c44:	e1 2c       	mov	r14, r1
    5c46:	86 01       	movw	r16, r12
    5c48:	24 e6       	ldi	r18, 0x64	; 100
    5c4a:	30 e0       	ldi	r19, 0x00	; 0
    5c4c:	4b ed       	ldi	r20, 0xDB	; 219
    5c4e:	50 e0       	ldi	r21, 0x00	; 0
    5c50:	64 e6       	ldi	r22, 0x64	; 100
    5c52:	70 e0       	ldi	r23, 0x00	; 0
    5c54:	84 e1       	ldi	r24, 0x14	; 20
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
				
				if (currentReading.latitude != previousReading.latitude || firstShow) {
    5c5c:	40 91 8e 02 	lds	r20, 0x028E
    5c60:	50 91 8f 02 	lds	r21, 0x028F
    5c64:	60 91 90 02 	lds	r22, 0x0290
    5c68:	70 91 91 02 	lds	r23, 0x0291
    5c6c:	80 91 c2 02 	lds	r24, 0x02C2
    5c70:	90 91 c3 02 	lds	r25, 0x02C3
    5c74:	a0 91 c4 02 	lds	r26, 0x02C4
    5c78:	b0 91 c5 02 	lds	r27, 0x02C5
    5c7c:	48 17       	cp	r20, r24
    5c7e:	59 07       	cpc	r21, r25
    5c80:	6a 07       	cpc	r22, r26
    5c82:	7b 07       	cpc	r23, r27
    5c84:	09 f0       	breq	.+2      	; 0x5c88 <showLiveGPS+0x5a8>
    5c86:	52 ce       	rjmp	.-860    	; 0x592c <showLiveGPS+0x24c>
    5c88:	93 cf       	rjmp	.-218    	; 0x5bb0 <showLiveGPS+0x4d0>
					sprintf(str, "Latitude: %lu.%lu", currentReading.latitudeDegrees, currentReading.minutesLat);
					BevelFill(97, 130, GetMaxX(), 150, 0);
					DrawText(20, 140, GetMaxX() - 20, 140, str, ALINE_LEFT);
				}
				
				if (currentReading.longitude != previousReading.longitude || firstShow) {
    5c8a:	a0 ea       	ldi	r26, 0xA0	; 160
    5c8c:	b2 e0       	ldi	r27, 0x02	; 2
    5c8e:	4d 91       	ld	r20, X+
    5c90:	5d 91       	ld	r21, X+
    5c92:	6d 91       	ld	r22, X+
    5c94:	7c 91       	ld	r23, X
    5c96:	e6 ec       	ldi	r30, 0xC6	; 198
    5c98:	f2 e0       	ldi	r31, 0x02	; 2
    5c9a:	80 81       	ld	r24, Z
    5c9c:	91 81       	ldd	r25, Z+1	; 0x01
    5c9e:	a2 81       	ldd	r26, Z+2	; 0x02
    5ca0:	b3 81       	ldd	r27, Z+3	; 0x03
    5ca2:	48 17       	cp	r20, r24
    5ca4:	59 07       	cpc	r21, r25
    5ca6:	6a 07       	cpc	r22, r26
    5ca8:	7b 07       	cpc	r23, r27
    5caa:	09 f0       	breq	.+2      	; 0x5cae <showLiveGPS+0x5ce>
    5cac:	8f ce       	rjmp	.-738    	; 0x59cc <showLiveGPS+0x2ec>
    5cae:	93 cf       	rjmp	.-218    	; 0x5bd6 <showLiveGPS+0x4f6>
					sprintf(str, "Longitude: %lu.%lu", currentReading.longitudeDegrees, currentReading.minutesLon);
					BevelFill(110, 160, GetMaxX(), 180, 0);
					DrawText(20, 170, GetMaxX() - 20, 170, str, ALINE_LEFT);
				}
				
				if (currentReading.altitude != previousReading.altitude || firstShow) {
    5cb0:	a4 eb       	ldi	r26, 0xB4	; 180
    5cb2:	b2 e0       	ldi	r27, 0x02	; 2
    5cb4:	8d 91       	ld	r24, X+
    5cb6:	9c 91       	ld	r25, X
    5cb8:	e0 ec       	ldi	r30, 0xC0	; 192
    5cba:	f2 e0       	ldi	r31, 0x02	; 2
    5cbc:	20 81       	ld	r18, Z
    5cbe:	31 81       	ldd	r19, Z+1	; 0x01
    5cc0:	82 17       	cp	r24, r18
    5cc2:	93 07       	cpc	r25, r19
    5cc4:	09 f0       	breq	.+2      	; 0x5cc8 <showLiveGPS+0x5e8>
    5cc6:	cc ce       	rjmp	.-616    	; 0x5a60 <showLiveGPS+0x380>
    5cc8:	93 cf       	rjmp	.-218    	; 0x5bf0 <showLiveGPS+0x510>
					BevelFill(90, 190, GetMaxX(), 210, 0);
					DrawText(20, 200, GetMaxX() - 20, 200, str, ALINE_LEFT);
				}
				
				
				if (currentReading.satellites != previousReading.satellites || firstShow) {
    5cca:	a2 eb       	ldi	r26, 0xB2	; 178
    5ccc:	b2 e0       	ldi	r27, 0x02	; 2
    5cce:	8d 91       	ld	r24, X+
    5cd0:	9c 91       	ld	r25, X
    5cd2:	ee eb       	ldi	r30, 0xBE	; 190
    5cd4:	f2 e0       	ldi	r31, 0x02	; 2
    5cd6:	20 81       	ld	r18, Z
    5cd8:	31 81       	ldd	r19, Z+1	; 0x01
    5cda:	82 17       	cp	r24, r18
    5cdc:	93 07       	cpc	r25, r19
    5cde:	09 f0       	breq	.+2      	; 0x5ce2 <showLiveGPS+0x602>
    5ce0:	f6 ce       	rjmp	.-532    	; 0x5ace <showLiveGPS+0x3ee>
    5ce2:	1f cf       	rjmp	.-450    	; 0x5b22 <showLiveGPS+0x442>
				firstShow = 0;

			}
			
			
}
    5ce4:	64 96       	adiw	r28, 0x14	; 20
    5ce6:	0f b6       	in	r0, 0x3f	; 63
    5ce8:	f8 94       	cli
    5cea:	de bf       	out	0x3e, r29	; 62
    5cec:	0f be       	out	0x3f, r0	; 63
    5cee:	cd bf       	out	0x3d, r28	; 61
    5cf0:	df 91       	pop	r29
    5cf2:	cf 91       	pop	r28
    5cf4:	1f 91       	pop	r17
    5cf6:	0f 91       	pop	r16
    5cf8:	ef 90       	pop	r14
    5cfa:	df 90       	pop	r13
    5cfc:	cf 90       	pop	r12
    5cfe:	bf 90       	pop	r11
    5d00:	af 90       	pop	r10
    5d02:	9f 90       	pop	r9
    5d04:	8f 90       	pop	r8
    5d06:	7f 90       	pop	r7
    5d08:	6f 90       	pop	r6
    5d0a:	5f 90       	pop	r5
    5d0c:	4f 90       	pop	r4
    5d0e:	3f 90       	pop	r3
    5d10:	2f 90       	pop	r2
    5d12:	08 95       	ret

00005d14 <showDistances>:

void showDistances() {
    5d14:	2f 92       	push	r2
    5d16:	3f 92       	push	r3
    5d18:	4f 92       	push	r4
    5d1a:	5f 92       	push	r5
    5d1c:	6f 92       	push	r6
    5d1e:	7f 92       	push	r7
    5d20:	8f 92       	push	r8
    5d22:	af 92       	push	r10
    5d24:	bf 92       	push	r11
    5d26:	cf 92       	push	r12
    5d28:	df 92       	push	r13
    5d2a:	ef 92       	push	r14
    5d2c:	ff 92       	push	r15
    5d2e:	0f 93       	push	r16
    5d30:	1f 93       	push	r17
    5d32:	cf 93       	push	r28
    5d34:	df 93       	push	r29
    5d36:	cd b7       	in	r28, 0x3d	; 61
    5d38:	de b7       	in	r29, 0x3e	; 62
    5d3a:	64 97       	sbiw	r28, 0x14	; 20
    5d3c:	0f b6       	in	r0, 0x3f	; 63
    5d3e:	f8 94       	cli
    5d40:	de bf       	out	0x3e, r29	; 62
    5d42:	0f be       	out	0x3f, r0	; 63
    5d44:	cd bf       	out	0x3d, r28	; 61
	
	currentReading.lat[1] = '\0';
    5d46:	10 92 9f 02 	sts	0x029F, r1
	int firstShow = 1; /**< A flag showing if this is the first time showing the screen */
	char str[20]; /**< A helper string used to store text that is to be shown on the screen */
	
	if (currentScreen == 2) {
    5d4a:	80 91 83 02 	lds	r24, 0x0283
    5d4e:	90 91 84 02 	lds	r25, 0x0284
    5d52:	82 30       	cpi	r24, 0x02	; 2
    5d54:	91 05       	cpc	r25, r1
    5d56:	09 f0       	breq	.+2      	; 0x5d5a <showDistances+0x46>
    5d58:	62 c0       	rjmp	.+196    	; 0x5e1e <showDistances+0x10a>
		SetColor(WHITE);
    5d5a:	44 24       	eor	r4, r4
    5d5c:	4a 94       	dec	r4
    5d5e:	54 2c       	mov	r5, r4
    5d60:	50 92 79 00 	sts	0x0079, r5
    5d64:	40 92 78 00 	sts	0x0078, r4
		FillRectangle(GetMaxX() / 2 + 1, GetMaxY() - 49, GetMaxX() - 21, GetMaxY() - 21);
    5d68:	0f ef       	ldi	r16, 0xFF	; 255
    5d6a:	1f ef       	ldi	r17, 0xFF	; 255
    5d6c:	2a e2       	ldi	r18, 0x2A	; 42
    5d6e:	31 e0       	ldi	r19, 0x01	; 1
    5d70:	4a ed       	ldi	r20, 0xDA	; 218
    5d72:	50 e0       	ldi	r21, 0x00	; 0
    5d74:	6e e0       	ldi	r22, 0x0E	; 14
    5d76:	71 e0       	ldi	r23, 0x01	; 1
    5d78:	88 e7       	ldi	r24, 0x78	; 120
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		SetColor(SILVER);
    5d80:	0f 2e       	mov	r0, r31
    5d82:	f8 e1       	ldi	r31, 0x18	; 24
    5d84:	6f 2e       	mov	r6, r31
    5d86:	fe eb       	ldi	r31, 0xBE	; 190
    5d88:	7f 2e       	mov	r7, r31
    5d8a:	f0 2d       	mov	r31, r0
    5d8c:	70 92 79 00 	sts	0x0079, r7
    5d90:	60 92 78 00 	sts	0x0078, r6
		Rectangle(20, GetMaxY() - 50, GetMaxX() / 2, GetMaxY() - 20);
    5d94:	2b e2       	ldi	r18, 0x2B	; 43
    5d96:	31 e0       	ldi	r19, 0x01	; 1
    5d98:	47 e7       	ldi	r20, 0x77	; 119
    5d9a:	50 e0       	ldi	r21, 0x00	; 0
    5d9c:	6d e0       	ldi	r22, 0x0D	; 13
    5d9e:	71 e0       	ldi	r23, 0x01	; 1
    5da0:	84 e1       	ldi	r24, 0x14	; 20
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
		FillRectangle(21, GetMaxY() - 49, GetMaxX() / 2 -1, GetMaxY() - 21);
    5da8:	00 91 78 00 	lds	r16, 0x0078
    5dac:	10 91 79 00 	lds	r17, 0x0079
    5db0:	2a e2       	ldi	r18, 0x2A	; 42
    5db2:	31 e0       	ldi	r19, 0x01	; 1
    5db4:	46 e7       	ldi	r20, 0x76	; 118
    5db6:	50 e0       	ldi	r21, 0x00	; 0
    5db8:	6e e0       	ldi	r22, 0x0E	; 14
    5dba:	71 e0       	ldi	r23, 0x01	; 1
    5dbc:	85 e1       	ldi	r24, 0x15	; 21
    5dbe:	90 e0       	ldi	r25, 0x00	; 0
    5dc0:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		SetFgColor(WHITE);
    5dc4:	50 92 64 00 	sts	0x0064, r5
    5dc8:	40 92 63 00 	sts	0x0063, r4
		DrawText(20, GetMaxY() - 50, GetMaxX() / 2, GetMaxY() - 20, "Croatia", ALINE_CENTER);
    5dcc:	ee 24       	eor	r14, r14
    5dce:	e3 94       	inc	r14
    5dd0:	01 e7       	ldi	r16, 0x71	; 113
    5dd2:	11 e0       	ldi	r17, 0x01	; 1
    5dd4:	2b e2       	ldi	r18, 0x2B	; 43
    5dd6:	31 e0       	ldi	r19, 0x01	; 1
    5dd8:	47 e7       	ldi	r20, 0x77	; 119
    5dda:	50 e0       	ldi	r21, 0x00	; 0
    5ddc:	6d e0       	ldi	r22, 0x0D	; 13
    5dde:	71 e0       	ldi	r23, 0x01	; 1
    5de0:	84 e1       	ldi	r24, 0x14	; 20
    5de2:	90 e0       	ldi	r25, 0x00	; 0
    5de4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		SetFgColor(SILVER);
    5de8:	70 92 64 00 	sts	0x0064, r7
    5dec:	60 92 63 00 	sts	0x0063, r6
		Rectangle(GetMaxX() / 2, GetMaxY() - 50, GetMaxX() - 20, GetMaxY() - 20);
    5df0:	2b e2       	ldi	r18, 0x2B	; 43
    5df2:	31 e0       	ldi	r19, 0x01	; 1
    5df4:	4b ed       	ldi	r20, 0xDB	; 219
    5df6:	50 e0       	ldi	r21, 0x00	; 0
    5df8:	6d e0       	ldi	r22, 0x0D	; 13
    5dfa:	71 e0       	ldi	r23, 0x01	; 1
    5dfc:	87 e7       	ldi	r24, 0x77	; 119
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
		DrawText(GetMaxX() / 2, GetMaxY() - 50, GetMaxX() - 20, GetMaxY() - 20, "World", ALINE_CENTER);
    5e04:	09 e7       	ldi	r16, 0x79	; 121
    5e06:	11 e0       	ldi	r17, 0x01	; 1
    5e08:	2b e2       	ldi	r18, 0x2B	; 43
    5e0a:	31 e0       	ldi	r19, 0x01	; 1
    5e0c:	4b ed       	ldi	r20, 0xDB	; 219
    5e0e:	50 e0       	ldi	r21, 0x00	; 0
    5e10:	6d e0       	ldi	r22, 0x0D	; 13
    5e12:	71 e0       	ldi	r23, 0x01	; 1
    5e14:	87 e7       	ldi	r24, 0x77	; 119
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
    5e1c:	60 c0       	rjmp	.+192    	; 0x5ede <showDistances+0x1ca>
		SetColor(CLOUDS);
	} else if (currentScreen == 3) {
    5e1e:	03 97       	sbiw	r24, 0x03	; 3
    5e20:	09 f0       	breq	.+2      	; 0x5e24 <showDistances+0x110>
    5e22:	5d c0       	rjmp	.+186    	; 0x5ede <showDistances+0x1ca>
		SetColor(WHITE);
    5e24:	66 24       	eor	r6, r6
    5e26:	6a 94       	dec	r6
    5e28:	76 2c       	mov	r7, r6
    5e2a:	70 92 79 00 	sts	0x0079, r7
    5e2e:	60 92 78 00 	sts	0x0078, r6
		FillRectangle(21, GetMaxY() - 49, GetMaxX() / 2 -1, GetMaxY() - 21);
    5e32:	0f ef       	ldi	r16, 0xFF	; 255
    5e34:	1f ef       	ldi	r17, 0xFF	; 255
    5e36:	2a e2       	ldi	r18, 0x2A	; 42
    5e38:	31 e0       	ldi	r19, 0x01	; 1
    5e3a:	46 e7       	ldi	r20, 0x76	; 118
    5e3c:	50 e0       	ldi	r21, 0x00	; 0
    5e3e:	6e e0       	ldi	r22, 0x0E	; 14
    5e40:	71 e0       	ldi	r23, 0x01	; 1
    5e42:	85 e1       	ldi	r24, 0x15	; 21
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		SetColor(SILVER);
    5e4a:	08 e1       	ldi	r16, 0x18	; 24
    5e4c:	1e eb       	ldi	r17, 0xBE	; 190
    5e4e:	10 93 79 00 	sts	0x0079, r17
    5e52:	00 93 78 00 	sts	0x0078, r16
		Rectangle(20, GetMaxY() - 50, GetMaxX() / 2, GetMaxY() - 20);
    5e56:	2b e2       	ldi	r18, 0x2B	; 43
    5e58:	31 e0       	ldi	r19, 0x01	; 1
    5e5a:	47 e7       	ldi	r20, 0x77	; 119
    5e5c:	50 e0       	ldi	r21, 0x00	; 0
    5e5e:	6d e0       	ldi	r22, 0x0D	; 13
    5e60:	71 e0       	ldi	r23, 0x01	; 1
    5e62:	84 e1       	ldi	r24, 0x14	; 20
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
		SetFgColor(SILVER);
    5e6a:	10 93 64 00 	sts	0x0064, r17
    5e6e:	00 93 63 00 	sts	0x0063, r16
		DrawText(20, GetMaxY() - 50, GetMaxX() / 2, GetMaxY() - 20, "Croatia", ALINE_CENTER);
    5e72:	ee 24       	eor	r14, r14
    5e74:	e3 94       	inc	r14
    5e76:	01 e7       	ldi	r16, 0x71	; 113
    5e78:	11 e0       	ldi	r17, 0x01	; 1
    5e7a:	2b e2       	ldi	r18, 0x2B	; 43
    5e7c:	31 e0       	ldi	r19, 0x01	; 1
    5e7e:	47 e7       	ldi	r20, 0x77	; 119
    5e80:	50 e0       	ldi	r21, 0x00	; 0
    5e82:	6d e0       	ldi	r22, 0x0D	; 13
    5e84:	71 e0       	ldi	r23, 0x01	; 1
    5e86:	84 e1       	ldi	r24, 0x14	; 20
    5e88:	90 e0       	ldi	r25, 0x00	; 0
    5e8a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		Rectangle(GetMaxX() / 2, GetMaxY() - 50, GetMaxX() - 20, GetMaxY() - 20);
    5e8e:	2b e2       	ldi	r18, 0x2B	; 43
    5e90:	31 e0       	ldi	r19, 0x01	; 1
    5e92:	4b ed       	ldi	r20, 0xDB	; 219
    5e94:	50 e0       	ldi	r21, 0x00	; 0
    5e96:	6d e0       	ldi	r22, 0x0D	; 13
    5e98:	71 e0       	ldi	r23, 0x01	; 1
    5e9a:	87 e7       	ldi	r24, 0x77	; 119
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	0e 94 c4 11 	call	0x2388	; 0x2388 <Rectangle>
		FillRectangle(GetMaxX() / 2 + 1, GetMaxY() - 49, GetMaxX() - 21, GetMaxY() - 21);
    5ea2:	00 91 78 00 	lds	r16, 0x0078
    5ea6:	10 91 79 00 	lds	r17, 0x0079
    5eaa:	2a e2       	ldi	r18, 0x2A	; 42
    5eac:	31 e0       	ldi	r19, 0x01	; 1
    5eae:	4a ed       	ldi	r20, 0xDA	; 218
    5eb0:	50 e0       	ldi	r21, 0x00	; 0
    5eb2:	6e e0       	ldi	r22, 0x0E	; 14
    5eb4:	71 e0       	ldi	r23, 0x01	; 1
    5eb6:	88 e7       	ldi	r24, 0x78	; 120
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		SetFgColor(WHITE);
    5ebe:	70 92 64 00 	sts	0x0064, r7
    5ec2:	60 92 63 00 	sts	0x0063, r6
		DrawText(GetMaxX() / 2, GetMaxY() - 50, GetMaxX() - 20, GetMaxY() - 20, "World", ALINE_CENTER);
    5ec6:	09 e7       	ldi	r16, 0x79	; 121
    5ec8:	11 e0       	ldi	r17, 0x01	; 1
    5eca:	2b e2       	ldi	r18, 0x2B	; 43
    5ecc:	31 e0       	ldi	r19, 0x01	; 1
    5ece:	4b ed       	ldi	r20, 0xDB	; 219
    5ed0:	50 e0       	ldi	r21, 0x00	; 0
    5ed2:	6d e0       	ldi	r22, 0x0D	; 13
    5ed4:	71 e0       	ldi	r23, 0x01	; 1
    5ed6:	87 e7       	ldi	r24, 0x77	; 119
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		SetColor(CLOUDS);
	}
	
		SetColor(TURQUOISE);
    5ede:	83 ef       	ldi	r24, 0xF3	; 243
    5ee0:	9d e1       	ldi	r25, 0x1D	; 29
    5ee2:	90 93 79 00 	sts	0x0079, r25
    5ee6:	80 93 78 00 	sts	0x0078, r24
		FillRectangle(0, 40, GetMaxX(), 80);
    5eea:	03 ef       	ldi	r16, 0xF3	; 243
    5eec:	1d e1       	ldi	r17, 0x1D	; 29
    5eee:	20 e5       	ldi	r18, 0x50	; 80
    5ef0:	30 e0       	ldi	r19, 0x00	; 0
    5ef2:	4f ee       	ldi	r20, 0xEF	; 239
    5ef4:	50 e0       	ldi	r21, 0x00	; 0
    5ef6:	68 e2       	ldi	r22, 0x28	; 40
    5ef8:	70 e0       	ldi	r23, 0x00	; 0
    5efa:	80 e0       	ldi	r24, 0x00	; 0
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		SetColor(GREEN_SEA);
    5f02:	80 e1       	ldi	r24, 0x10	; 16
    5f04:	95 e1       	ldi	r25, 0x15	; 21
    5f06:	90 93 79 00 	sts	0x0079, r25
    5f0a:	80 93 78 00 	sts	0x0078, r24
		FillRectangle(0, 40, 40, 80);
    5f0e:	00 e1       	ldi	r16, 0x10	; 16
    5f10:	15 e1       	ldi	r17, 0x15	; 21
    5f12:	20 e5       	ldi	r18, 0x50	; 80
    5f14:	30 e0       	ldi	r19, 0x00	; 0
    5f16:	48 e2       	ldi	r20, 0x28	; 40
    5f18:	50 e0       	ldi	r21, 0x00	; 0
    5f1a:	68 e2       	ldi	r22, 0x28	; 40
    5f1c:	70 e0       	ldi	r23, 0x00	; 0
    5f1e:	80 e0       	ldi	r24, 0x00	; 0
    5f20:	90 e0       	ldi	r25, 0x00	; 0
    5f22:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_Bar>
		SetFgColor(CLOUDS);
    5f26:	0f 2e       	mov	r0, r31
    5f28:	fe e9       	ldi	r31, 0x9E	; 158
    5f2a:	6f 2e       	mov	r6, r31
    5f2c:	ff ee       	ldi	r31, 0xEF	; 239
    5f2e:	7f 2e       	mov	r7, r31
    5f30:	f0 2d       	mov	r31, r0
    5f32:	70 92 64 00 	sts	0x0064, r7
    5f36:	60 92 63 00 	sts	0x0063, r6
		DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
    5f3a:	ee 24       	eor	r14, r14
    5f3c:	e3 94       	inc	r14
    5f3e:	09 e9       	ldi	r16, 0x99	; 153
    5f40:	10 e0       	ldi	r17, 0x00	; 0
    5f42:	20 e5       	ldi	r18, 0x50	; 80
    5f44:	30 e0       	ldi	r19, 0x00	; 0
    5f46:	48 e2       	ldi	r20, 0x28	; 40
    5f48:	50 e0       	ldi	r21, 0x00	; 0
    5f4a:	68 e2       	ldi	r22, 0x28	; 40
    5f4c:	70 e0       	ldi	r23, 0x00	; 0
    5f4e:	80 e0       	ldi	r24, 0x00	; 0
    5f50:	90 e0       	ldi	r25, 0x00	; 0
    5f52:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		DrawText(0, 40, GetMaxX(), 80, "Distances", ALINE_CENTER);
    5f56:	02 e0       	ldi	r16, 0x02	; 2
    5f58:	11 e0       	ldi	r17, 0x01	; 1
    5f5a:	20 e5       	ldi	r18, 0x50	; 80
    5f5c:	30 e0       	ldi	r19, 0x00	; 0
    5f5e:	4f ee       	ldi	r20, 0xEF	; 239
    5f60:	50 e0       	ldi	r21, 0x00	; 0
    5f62:	68 e2       	ldi	r22, 0x28	; 40
    5f64:	70 e0       	ldi	r23, 0x00	; 0
    5f66:	80 e0       	ldi	r24, 0x00	; 0
    5f68:	90 e0       	ldi	r25, 0x00	; 0
    5f6a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
		SetColor(CLOUDS);
    5f6e:	70 92 79 00 	sts	0x0079, r7
    5f72:	60 92 78 00 	sts	0x0078, r6
		BevelFill(0, 81, GetMaxX(), GetMaxY()-51, 0);
    5f76:	00 e0       	ldi	r16, 0x00	; 0
    5f78:	10 e0       	ldi	r17, 0x00	; 0
    5f7a:	2c e0       	ldi	r18, 0x0C	; 12
    5f7c:	31 e0       	ldi	r19, 0x01	; 1
    5f7e:	4f ee       	ldi	r20, 0xEF	; 239
    5f80:	50 e0       	ldi	r21, 0x00	; 0
    5f82:	61 e5       	ldi	r22, 0x51	; 81
    5f84:	70 e0       	ldi	r23, 0x00	; 0
    5f86:	80 e0       	ldi	r24, 0x00	; 0
    5f88:	90 e0       	ldi	r25, 0x00	; 0
    5f8a:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
}

void showDistances() {
	
	currentReading.lat[1] = '\0';
	int firstShow = 1; /**< A flag showing if this is the first time showing the screen */
    5f8e:	01 e0       	ldi	r16, 0x01	; 1
    5f90:	10 e0       	ldi	r17, 0x00	; 0
	while(currentScreen == 2 || currentScreen == 3) {
		
		ScanPen();
		readGPS();
		
		memset(str, 0, 20);
    5f92:	ce 01       	movw	r24, r28
    5f94:	01 96       	adiw	r24, 0x01	; 1
    5f96:	3c 01       	movw	r6, r24
						sprintf(str, "Dubrovnik: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 42.6480700, 18.0921600, 'K')));
						DrawText(20, 230, GetMaxX() - 20, 230, str, ALINE_LEFT);
					}
				} else if (currentScreen == 3) {
					if (currentReading.latitude != previousReading.latitude || currentReading.longitude != previousReading.longitude || firstShow) {
						sprintf(str, "Tokyo: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 35.6895000, 139.6917100, 'K')));
    5f98:	0f 2e       	mov	r0, r31
    5f9a:	f8 ea       	ldi	r31, 0xA8	; 168
    5f9c:	4f 2e       	mov	r4, r31
    5f9e:	f2 e0       	ldi	r31, 0x02	; 2
    5fa0:	5f 2e       	mov	r5, r31
    5fa2:	f0 2d       	mov	r31, r0
    5fa4:	0f 2e       	mov	r0, r31
    5fa6:	f6 e9       	ldi	r31, 0x96	; 150
    5fa8:	2f 2e       	mov	r2, r31
    5faa:	f2 e0       	ldi	r31, 0x02	; 2
    5fac:	3f 2e       	mov	r3, r31
    5fae:	f0 2d       	mov	r31, r0
		DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
		DrawText(0, 40, GetMaxX(), 80, "Distances", ALINE_CENTER);
		SetColor(CLOUDS);
		BevelFill(0, 81, GetMaxX(), GetMaxY()-51, 0);
	
	while(currentScreen == 2 || currentScreen == 3) {
    5fb0:	ff c2       	rjmp	.+1534   	; 0x65b0 <showDistances+0x89c>
		
		ScanPen();
    5fb2:	0e 94 03 21 	call	0x4206	; 0x4206 <ScanPen>
		readGPS();
    5fb6:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <readGPS>
		
		memset(str, 0, 20);
    5fba:	84 e1       	ldi	r24, 0x14	; 20
    5fbc:	d3 01       	movw	r26, r6
    5fbe:	1d 92       	st	X+, r1
    5fc0:	8a 95       	dec	r24
    5fc2:	e9 f7       	brne	.-6      	; 0x5fbe <showDistances+0x2aa>

				SetFgColor(WET_ASPHALT);
    5fc4:	eb e4       	ldi	r30, 0x4B	; 75
    5fc6:	f2 e3       	ldi	r31, 0x32	; 50
    5fc8:	f0 93 64 00 	sts	0x0064, r31
    5fcc:	e0 93 63 00 	sts	0x0063, r30
				
				
				if (currentScreen == 2) {
    5fd0:	80 91 83 02 	lds	r24, 0x0283
    5fd4:	90 91 84 02 	lds	r25, 0x0284
    5fd8:	82 30       	cpi	r24, 0x02	; 2
    5fda:	91 05       	cpc	r25, r1
    5fdc:	09 f0       	breq	.+2      	; 0x5fe0 <showDistances+0x2cc>
    5fde:	72 c1       	rjmp	.+740    	; 0x62c4 <showDistances+0x5b0>
					if (currentReading.latitude != previousReading.latitude || currentReading.longitude != previousReading.longitude || firstShow) {
    5fe0:	ae e8       	ldi	r26, 0x8E	; 142
    5fe2:	b2 e0       	ldi	r27, 0x02	; 2
    5fe4:	4d 91       	ld	r20, X+
    5fe6:	5d 91       	ld	r21, X+
    5fe8:	6d 91       	ld	r22, X+
    5fea:	7c 91       	ld	r23, X
    5fec:	e2 ec       	ldi	r30, 0xC2	; 194
    5fee:	f2 e0       	ldi	r31, 0x02	; 2
    5ff0:	80 81       	ld	r24, Z
    5ff2:	91 81       	ldd	r25, Z+1	; 0x01
    5ff4:	a2 81       	ldd	r26, Z+2	; 0x02
    5ff6:	b3 81       	ldd	r27, Z+3	; 0x03
    5ff8:	48 17       	cp	r20, r24
    5ffa:	59 07       	cpc	r21, r25
    5ffc:	6a 07       	cpc	r22, r26
    5ffe:	7b 07       	cpc	r23, r27
    6000:	a1 f4       	brne	.+40     	; 0x602a <showDistances+0x316>
    6002:	a0 ea       	ldi	r26, 0xA0	; 160
    6004:	b2 e0       	ldi	r27, 0x02	; 2
    6006:	4d 91       	ld	r20, X+
    6008:	5d 91       	ld	r21, X+
    600a:	6d 91       	ld	r22, X+
    600c:	7c 91       	ld	r23, X
    600e:	e6 ec       	ldi	r30, 0xC6	; 198
    6010:	f2 e0       	ldi	r31, 0x02	; 2
    6012:	80 81       	ld	r24, Z
    6014:	91 81       	ldd	r25, Z+1	; 0x01
    6016:	a2 81       	ldd	r26, Z+2	; 0x02
    6018:	b3 81       	ldd	r27, Z+3	; 0x03
    601a:	48 17       	cp	r20, r24
    601c:	59 07       	cpc	r21, r25
    601e:	6a 07       	cpc	r22, r26
    6020:	7b 07       	cpc	r23, r27
    6022:	19 f4       	brne	.+6      	; 0x602a <showDistances+0x316>
    6024:	01 2b       	or	r16, r17
    6026:	09 f4       	brne	.+2      	; 0x602a <showDistances+0x316>
    6028:	c1 c2       	rjmp	.+1410   	; 0x65ac <showDistances+0x898>
						sprintf(str, "Zagreb: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 45.8144400, 15.9779800, 'K')));
    602a:	d2 01       	movw	r26, r4
    602c:	2d 91       	ld	r18, X+
    602e:	3d 91       	ld	r19, X+
    6030:	4d 91       	ld	r20, X+
    6032:	5c 91       	ld	r21, X
    6034:	f1 01       	movw	r30, r2
    6036:	60 81       	ld	r22, Z
    6038:	71 81       	ldd	r23, Z+1	; 0x01
    603a:	82 81       	ldd	r24, Z+2	; 0x02
    603c:	93 81       	ldd	r25, Z+3	; 0x03
    603e:	0f 2e       	mov	r0, r31
    6040:	fb e4       	ldi	r31, 0x4B	; 75
    6042:	8f 2e       	mov	r8, r31
    6044:	f0 2d       	mov	r31, r0
    6046:	0f 2e       	mov	r0, r31
    6048:	fe ec       	ldi	r31, 0xCE	; 206
    604a:	af 2e       	mov	r10, r31
    604c:	f5 ea       	ldi	r31, 0xA5	; 165
    604e:	bf 2e       	mov	r11, r31
    6050:	ff e7       	ldi	r31, 0x7F	; 127
    6052:	cf 2e       	mov	r12, r31
    6054:	f1 e4       	ldi	r31, 0x41	; 65
    6056:	df 2e       	mov	r13, r31
    6058:	f0 2d       	mov	r31, r0
    605a:	1d ef       	ldi	r17, 0xFD	; 253
    605c:	e1 2e       	mov	r14, r17
    605e:	11 e4       	ldi	r17, 0x41	; 65
    6060:	f1 2e       	mov	r15, r17
    6062:	07 e3       	ldi	r16, 0x37	; 55
    6064:	12 e4       	ldi	r17, 0x42	; 66
    6066:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    606a:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    606e:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    6072:	7f 93       	push	r23
    6074:	6f 93       	push	r22
    6076:	8f e7       	ldi	r24, 0x7F	; 127
    6078:	91 e0       	ldi	r25, 0x01	; 1
    607a:	9f 93       	push	r25
    607c:	8f 93       	push	r24
    607e:	7f 92       	push	r7
    6080:	6f 92       	push	r6
    6082:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						BevelFill(90, 100, GetMaxX(), 120, 0);
    6086:	ee 24       	eor	r14, r14
    6088:	e3 94       	inc	r14
    608a:	00 e0       	ldi	r16, 0x00	; 0
    608c:	10 e0       	ldi	r17, 0x00	; 0
    608e:	28 e7       	ldi	r18, 0x78	; 120
    6090:	30 e0       	ldi	r19, 0x00	; 0
    6092:	4f ee       	ldi	r20, 0xEF	; 239
    6094:	50 e0       	ldi	r21, 0x00	; 0
    6096:	64 e6       	ldi	r22, 0x64	; 100
    6098:	70 e0       	ldi	r23, 0x00	; 0
    609a:	8a e5       	ldi	r24, 0x5A	; 90
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						BevelFill(75, 130, GetMaxX(), 150, 0);
    60a2:	26 e9       	ldi	r18, 0x96	; 150
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	4f ee       	ldi	r20, 0xEF	; 239
    60a8:	50 e0       	ldi	r21, 0x00	; 0
    60aa:	62 e8       	ldi	r22, 0x82	; 130
    60ac:	70 e0       	ldi	r23, 0x00	; 0
    60ae:	8b e4       	ldi	r24, 0x4B	; 75
    60b0:	90 e0       	ldi	r25, 0x00	; 0
    60b2:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						BevelFill(65, 160, GetMaxX(), 180, 0);
    60b6:	24 eb       	ldi	r18, 0xB4	; 180
    60b8:	30 e0       	ldi	r19, 0x00	; 0
    60ba:	4f ee       	ldi	r20, 0xEF	; 239
    60bc:	50 e0       	ldi	r21, 0x00	; 0
    60be:	60 ea       	ldi	r22, 0xA0	; 160
    60c0:	70 e0       	ldi	r23, 0x00	; 0
    60c2:	81 e4       	ldi	r24, 0x41	; 65
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						BevelFill(80, 190, GetMaxX(), 210, 0);
    60ca:	22 ed       	ldi	r18, 0xD2	; 210
    60cc:	30 e0       	ldi	r19, 0x00	; 0
    60ce:	4f ee       	ldi	r20, 0xEF	; 239
    60d0:	50 e0       	ldi	r21, 0x00	; 0
    60d2:	6e eb       	ldi	r22, 0xBE	; 190
    60d4:	70 e0       	ldi	r23, 0x00	; 0
    60d6:	80 e5       	ldi	r24, 0x50	; 80
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						BevelFill(110, 220, GetMaxX(), 240, 0);
    60de:	20 ef       	ldi	r18, 0xF0	; 240
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	4f ee       	ldi	r20, 0xEF	; 239
    60e4:	50 e0       	ldi	r21, 0x00	; 0
    60e6:	6c ed       	ldi	r22, 0xDC	; 220
    60e8:	70 e0       	ldi	r23, 0x00	; 0
    60ea:	8e e6       	ldi	r24, 0x6E	; 110
    60ec:	90 e0       	ldi	r25, 0x00	; 0
    60ee:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						DrawText(20, 110, GetMaxX() - 20, 110, str, ALINE_LEFT);
    60f2:	e1 2c       	mov	r14, r1
    60f4:	83 01       	movw	r16, r6
    60f6:	2e e6       	ldi	r18, 0x6E	; 110
    60f8:	30 e0       	ldi	r19, 0x00	; 0
    60fa:	4b ed       	ldi	r20, 0xDB	; 219
    60fc:	50 e0       	ldi	r21, 0x00	; 0
    60fe:	6e e6       	ldi	r22, 0x6E	; 110
    6100:	70 e0       	ldi	r23, 0x00	; 0
    6102:	84 e1       	ldi	r24, 0x14	; 20
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
						sprintf(str, "Rijeka: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 45.328979, 14.457664, 'K')));
    610a:	d2 01       	movw	r26, r4
    610c:	2d 91       	ld	r18, X+
    610e:	3d 91       	ld	r19, X+
    6110:	4d 91       	ld	r20, X+
    6112:	5c 91       	ld	r21, X
    6114:	f1 01       	movw	r30, r2
    6116:	60 81       	ld	r22, Z
    6118:	71 81       	ldd	r23, Z+1	; 0x01
    611a:	82 81       	ldd	r24, Z+2	; 0x02
    611c:	93 81       	ldd	r25, Z+3	; 0x03
    611e:	0f 2e       	mov	r0, r31
    6120:	f7 e9       	ldi	r31, 0x97	; 151
    6122:	af 2e       	mov	r10, r31
    6124:	f2 e5       	ldi	r31, 0x52	; 82
    6126:	bf 2e       	mov	r11, r31
    6128:	f7 e6       	ldi	r31, 0x67	; 103
    612a:	cf 2e       	mov	r12, r31
    612c:	f1 e4       	ldi	r31, 0x41	; 65
    612e:	df 2e       	mov	r13, r31
    6130:	f0 2d       	mov	r31, r0
    6132:	10 ee       	ldi	r17, 0xE0	; 224
    6134:	e1 2e       	mov	r14, r17
    6136:	10 e5       	ldi	r17, 0x50	; 80
    6138:	f1 2e       	mov	r15, r17
    613a:	05 e3       	ldi	r16, 0x35	; 53
    613c:	12 e4       	ldi	r17, 0x42	; 66
    613e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    6142:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    6146:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    614a:	7f 93       	push	r23
    614c:	6f 93       	push	r22
    614e:	8d e8       	ldi	r24, 0x8D	; 141
    6150:	91 e0       	ldi	r25, 0x01	; 1
    6152:	9f 93       	push	r25
    6154:	8f 93       	push	r24
    6156:	7f 92       	push	r7
    6158:	6f 92       	push	r6
    615a:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						DrawText(20, 140, GetMaxX() - 20, 140, str, ALINE_LEFT);
    615e:	e1 2c       	mov	r14, r1
    6160:	83 01       	movw	r16, r6
    6162:	2c e8       	ldi	r18, 0x8C	; 140
    6164:	30 e0       	ldi	r19, 0x00	; 0
    6166:	4b ed       	ldi	r20, 0xDB	; 219
    6168:	50 e0       	ldi	r21, 0x00	; 0
    616a:	6c e8       	ldi	r22, 0x8C	; 140
    616c:	70 e0       	ldi	r23, 0x00	; 0
    616e:	84 e1       	ldi	r24, 0x14	; 20
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
						sprintf(str, "Split: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 43.5089100, 16.4391500, 'K')));
    6176:	d2 01       	movw	r26, r4
    6178:	2d 91       	ld	r18, X+
    617a:	3d 91       	ld	r19, X+
    617c:	4d 91       	ld	r20, X+
    617e:	5c 91       	ld	r21, X
    6180:	f1 01       	movw	r30, r2
    6182:	60 81       	ld	r22, Z
    6184:	71 81       	ldd	r23, Z+1	; 0x01
    6186:	82 81       	ldd	r24, Z+2	; 0x02
    6188:	93 81       	ldd	r25, Z+3	; 0x03
    618a:	0f 2e       	mov	r0, r31
    618c:	f1 e6       	ldi	r31, 0x61	; 97
    618e:	af 2e       	mov	r10, r31
    6190:	f3 e8       	ldi	r31, 0x83	; 131
    6192:	bf 2e       	mov	r11, r31
    6194:	cb 2c       	mov	r12, r11
    6196:	f1 e4       	ldi	r31, 0x41	; 65
    6198:	df 2e       	mov	r13, r31
    619a:	f0 2d       	mov	r31, r0
    619c:	10 e2       	ldi	r17, 0x20	; 32
    619e:	e1 2e       	mov	r14, r17
    61a0:	19 e0       	ldi	r17, 0x09	; 9
    61a2:	f1 2e       	mov	r15, r17
    61a4:	0e e2       	ldi	r16, 0x2E	; 46
    61a6:	12 e4       	ldi	r17, 0x42	; 66
    61a8:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    61ac:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    61b0:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    61b4:	7f 93       	push	r23
    61b6:	6f 93       	push	r22
    61b8:	8b e9       	ldi	r24, 0x9B	; 155
    61ba:	91 e0       	ldi	r25, 0x01	; 1
    61bc:	9f 93       	push	r25
    61be:	8f 93       	push	r24
    61c0:	7f 92       	push	r7
    61c2:	6f 92       	push	r6
    61c4:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						DrawText(20, 170, GetMaxX() - 20, 170, str, ALINE_LEFT);
    61c8:	e1 2c       	mov	r14, r1
    61ca:	83 01       	movw	r16, r6
    61cc:	2a ea       	ldi	r18, 0xAA	; 170
    61ce:	30 e0       	ldi	r19, 0x00	; 0
    61d0:	4b ed       	ldi	r20, 0xDB	; 219
    61d2:	50 e0       	ldi	r21, 0x00	; 0
    61d4:	6a ea       	ldi	r22, 0xAA	; 170
    61d6:	70 e0       	ldi	r23, 0x00	; 0
    61d8:	84 e1       	ldi	r24, 0x14	; 20
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
						sprintf(str, "Osijek: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 45.5511100, 18.6938900, 'K')));
    61e0:	d2 01       	movw	r26, r4
    61e2:	2d 91       	ld	r18, X+
    61e4:	3d 91       	ld	r19, X+
    61e6:	4d 91       	ld	r20, X+
    61e8:	5c 91       	ld	r21, X
    61ea:	f1 01       	movw	r30, r2
    61ec:	60 81       	ld	r22, Z
    61ee:	71 81       	ldd	r23, Z+1	; 0x01
    61f0:	82 81       	ldd	r24, Z+2	; 0x02
    61f2:	93 81       	ldd	r25, Z+3	; 0x03
    61f4:	0f 2e       	mov	r0, r31
    61f6:	f6 e1       	ldi	r31, 0x16	; 22
    61f8:	af 2e       	mov	r10, r31
    61fa:	fd e8       	ldi	r31, 0x8D	; 141
    61fc:	bf 2e       	mov	r11, r31
    61fe:	f5 e9       	ldi	r31, 0x95	; 149
    6200:	cf 2e       	mov	r12, r31
    6202:	f1 e4       	ldi	r31, 0x41	; 65
    6204:	df 2e       	mov	r13, r31
    6206:	f0 2d       	mov	r31, r0
    6208:	16 e5       	ldi	r17, 0x56	; 86
    620a:	e1 2e       	mov	r14, r17
    620c:	14 e3       	ldi	r17, 0x34	; 52
    620e:	f1 2e       	mov	r15, r17
    6210:	06 e3       	ldi	r16, 0x36	; 54
    6212:	12 e4       	ldi	r17, 0x42	; 66
    6214:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    6218:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    621c:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    6220:	7f 93       	push	r23
    6222:	6f 93       	push	r22
    6224:	88 ea       	ldi	r24, 0xA8	; 168
    6226:	91 e0       	ldi	r25, 0x01	; 1
    6228:	9f 93       	push	r25
    622a:	8f 93       	push	r24
    622c:	7f 92       	push	r7
    622e:	6f 92       	push	r6
    6230:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						DrawText(20, 200, GetMaxX() - 20, 200, str, ALINE_LEFT);
    6234:	e1 2c       	mov	r14, r1
    6236:	83 01       	movw	r16, r6
    6238:	28 ec       	ldi	r18, 0xC8	; 200
    623a:	30 e0       	ldi	r19, 0x00	; 0
    623c:	4b ed       	ldi	r20, 0xDB	; 219
    623e:	50 e0       	ldi	r21, 0x00	; 0
    6240:	68 ec       	ldi	r22, 0xC8	; 200
    6242:	70 e0       	ldi	r23, 0x00	; 0
    6244:	84 e1       	ldi	r24, 0x14	; 20
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
						sprintf(str, "Dubrovnik: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 42.6480700, 18.0921600, 'K')));
    624c:	d2 01       	movw	r26, r4
    624e:	2d 91       	ld	r18, X+
    6250:	3d 91       	ld	r19, X+
    6252:	4d 91       	ld	r20, X+
    6254:	5c 91       	ld	r21, X
    6256:	f1 01       	movw	r30, r2
    6258:	60 81       	ld	r22, Z
    625a:	71 81       	ldd	r23, Z+1	; 0x01
    625c:	82 81       	ldd	r24, Z+2	; 0x02
    625e:	93 81       	ldd	r25, Z+3	; 0x03
    6260:	0f 2e       	mov	r0, r31
    6262:	fe eb       	ldi	r31, 0xBE	; 190
    6264:	af 2e       	mov	r10, r31
    6266:	fc eb       	ldi	r31, 0xBC	; 188
    6268:	bf 2e       	mov	r11, r31
    626a:	f0 e9       	ldi	r31, 0x90	; 144
    626c:	cf 2e       	mov	r12, r31
    626e:	f1 e4       	ldi	r31, 0x41	; 65
    6270:	df 2e       	mov	r13, r31
    6272:	f0 2d       	mov	r31, r0
    6274:	10 ea       	ldi	r17, 0xA0	; 160
    6276:	e1 2e       	mov	r14, r17
    6278:	17 e9       	ldi	r17, 0x97	; 151
    627a:	f1 2e       	mov	r15, r17
    627c:	0a e2       	ldi	r16, 0x2A	; 42
    627e:	12 e4       	ldi	r17, 0x42	; 66
    6280:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    6284:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    6288:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    628c:	7f 93       	push	r23
    628e:	6f 93       	push	r22
    6290:	86 eb       	ldi	r24, 0xB6	; 182
    6292:	91 e0       	ldi	r25, 0x01	; 1
    6294:	9f 93       	push	r25
    6296:	8f 93       	push	r24
    6298:	7f 92       	push	r7
    629a:	6f 92       	push	r6
    629c:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						DrawText(20, 230, GetMaxX() - 20, 230, str, ALINE_LEFT);
    62a0:	e1 2c       	mov	r14, r1
    62a2:	83 01       	movw	r16, r6
    62a4:	26 ee       	ldi	r18, 0xE6	; 230
    62a6:	30 e0       	ldi	r19, 0x00	; 0
    62a8:	4b ed       	ldi	r20, 0xDB	; 219
    62aa:	50 e0       	ldi	r21, 0x00	; 0
    62ac:	66 ee       	ldi	r22, 0xE6	; 230
    62ae:	70 e0       	ldi	r23, 0x00	; 0
    62b0:	84 e1       	ldi	r24, 0x14	; 20
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
    62b8:	0f b6       	in	r0, 0x3f	; 63
    62ba:	f8 94       	cli
    62bc:	de bf       	out	0x3e, r29	; 62
    62be:	0f be       	out	0x3f, r0	; 63
    62c0:	cd bf       	out	0x3d, r28	; 61
    62c2:	74 c1       	rjmp	.+744    	; 0x65ac <showDistances+0x898>
					}
				} else if (currentScreen == 3) {
    62c4:	03 97       	sbiw	r24, 0x03	; 3
    62c6:	09 f0       	breq	.+2      	; 0x62ca <showDistances+0x5b6>
    62c8:	71 c1       	rjmp	.+738    	; 0x65ac <showDistances+0x898>
					if (currentReading.latitude != previousReading.latitude || currentReading.longitude != previousReading.longitude || firstShow) {
    62ca:	ae e8       	ldi	r26, 0x8E	; 142
    62cc:	b2 e0       	ldi	r27, 0x02	; 2
    62ce:	4d 91       	ld	r20, X+
    62d0:	5d 91       	ld	r21, X+
    62d2:	6d 91       	ld	r22, X+
    62d4:	7c 91       	ld	r23, X
    62d6:	e2 ec       	ldi	r30, 0xC2	; 194
    62d8:	f2 e0       	ldi	r31, 0x02	; 2
    62da:	80 81       	ld	r24, Z
    62dc:	91 81       	ldd	r25, Z+1	; 0x01
    62de:	a2 81       	ldd	r26, Z+2	; 0x02
    62e0:	b3 81       	ldd	r27, Z+3	; 0x03
    62e2:	48 17       	cp	r20, r24
    62e4:	59 07       	cpc	r21, r25
    62e6:	6a 07       	cpc	r22, r26
    62e8:	7b 07       	cpc	r23, r27
    62ea:	a1 f4       	brne	.+40     	; 0x6314 <showDistances+0x600>
    62ec:	a0 ea       	ldi	r26, 0xA0	; 160
    62ee:	b2 e0       	ldi	r27, 0x02	; 2
    62f0:	4d 91       	ld	r20, X+
    62f2:	5d 91       	ld	r21, X+
    62f4:	6d 91       	ld	r22, X+
    62f6:	7c 91       	ld	r23, X
    62f8:	e6 ec       	ldi	r30, 0xC6	; 198
    62fa:	f2 e0       	ldi	r31, 0x02	; 2
    62fc:	80 81       	ld	r24, Z
    62fe:	91 81       	ldd	r25, Z+1	; 0x01
    6300:	a2 81       	ldd	r26, Z+2	; 0x02
    6302:	b3 81       	ldd	r27, Z+3	; 0x03
    6304:	48 17       	cp	r20, r24
    6306:	59 07       	cpc	r21, r25
    6308:	6a 07       	cpc	r22, r26
    630a:	7b 07       	cpc	r23, r27
    630c:	19 f4       	brne	.+6      	; 0x6314 <showDistances+0x600>
    630e:	01 2b       	or	r16, r17
    6310:	09 f4       	brne	.+2      	; 0x6314 <showDistances+0x600>
    6312:	4c c1       	rjmp	.+664    	; 0x65ac <showDistances+0x898>
						sprintf(str, "Tokyo: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 35.6895000, 139.6917100, 'K')));
    6314:	d2 01       	movw	r26, r4
    6316:	2d 91       	ld	r18, X+
    6318:	3d 91       	ld	r19, X+
    631a:	4d 91       	ld	r20, X+
    631c:	5c 91       	ld	r21, X
    631e:	f1 01       	movw	r30, r2
    6320:	60 81       	ld	r22, Z
    6322:	71 81       	ldd	r23, Z+1	; 0x01
    6324:	82 81       	ldd	r24, Z+2	; 0x02
    6326:	93 81       	ldd	r25, Z+3	; 0x03
    6328:	0f 2e       	mov	r0, r31
    632a:	fb e4       	ldi	r31, 0x4B	; 75
    632c:	8f 2e       	mov	r8, r31
    632e:	f0 2d       	mov	r31, r0
    6330:	0f 2e       	mov	r0, r31
    6332:	f4 e1       	ldi	r31, 0x14	; 20
    6334:	af 2e       	mov	r10, r31
    6336:	f1 eb       	ldi	r31, 0xB1	; 177
    6338:	bf 2e       	mov	r11, r31
    633a:	fb e0       	ldi	r31, 0x0B	; 11
    633c:	cf 2e       	mov	r12, r31
    633e:	f3 e4       	ldi	r31, 0x43	; 67
    6340:	df 2e       	mov	r13, r31
    6342:	f0 2d       	mov	r31, r0
    6344:	1c e0       	ldi	r17, 0x0C	; 12
    6346:	e1 2e       	mov	r14, r17
    6348:	12 ec       	ldi	r17, 0xC2	; 194
    634a:	f1 2e       	mov	r15, r17
    634c:	0e e0       	ldi	r16, 0x0E	; 14
    634e:	12 e4       	ldi	r17, 0x42	; 66
    6350:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    6354:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    6358:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    635c:	7f 93       	push	r23
    635e:	6f 93       	push	r22
    6360:	a7 ec       	ldi	r26, 0xC7	; 199
    6362:	b1 e0       	ldi	r27, 0x01	; 1
    6364:	bf 93       	push	r27
    6366:	af 93       	push	r26
    6368:	7f 92       	push	r7
    636a:	6f 92       	push	r6
    636c:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						BevelFill(83, 100, GetMaxX(), 120, 0);
    6370:	ee 24       	eor	r14, r14
    6372:	e3 94       	inc	r14
    6374:	00 e0       	ldi	r16, 0x00	; 0
    6376:	10 e0       	ldi	r17, 0x00	; 0
    6378:	28 e7       	ldi	r18, 0x78	; 120
    637a:	30 e0       	ldi	r19, 0x00	; 0
    637c:	4f ee       	ldi	r20, 0xEF	; 239
    637e:	50 e0       	ldi	r21, 0x00	; 0
    6380:	64 e6       	ldi	r22, 0x64	; 100
    6382:	70 e0       	ldi	r23, 0x00	; 0
    6384:	83 e5       	ldi	r24, 0x53	; 83
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						BevelFill(115, 130, GetMaxX(), 150, 0);
    638c:	26 e9       	ldi	r18, 0x96	; 150
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	4f ee       	ldi	r20, 0xEF	; 239
    6392:	50 e0       	ldi	r21, 0x00	; 0
    6394:	62 e8       	ldi	r22, 0x82	; 130
    6396:	70 e0       	ldi	r23, 0x00	; 0
    6398:	83 e7       	ldi	r24, 0x73	; 115
    639a:	90 e0       	ldi	r25, 0x00	; 0
    639c:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						BevelFill(95, 160, GetMaxX(), 180, 0);
    63a0:	24 eb       	ldi	r18, 0xB4	; 180
    63a2:	30 e0       	ldi	r19, 0x00	; 0
    63a4:	4f ee       	ldi	r20, 0xEF	; 239
    63a6:	50 e0       	ldi	r21, 0x00	; 0
    63a8:	60 ea       	ldi	r22, 0xA0	; 160
    63aa:	70 e0       	ldi	r23, 0x00	; 0
    63ac:	8f e5       	ldi	r24, 0x5F	; 95
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						BevelFill(85, 190, GetMaxX(), 210, 0);
    63b4:	22 ed       	ldi	r18, 0xD2	; 210
    63b6:	30 e0       	ldi	r19, 0x00	; 0
    63b8:	4f ee       	ldi	r20, 0xEF	; 239
    63ba:	50 e0       	ldi	r21, 0x00	; 0
    63bc:	6e eb       	ldi	r22, 0xBE	; 190
    63be:	70 e0       	ldi	r23, 0x00	; 0
    63c0:	85 e5       	ldi	r24, 0x55	; 85
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						BevelFill(93, 220, GetMaxX(), 240, 0);
    63c8:	20 ef       	ldi	r18, 0xF0	; 240
    63ca:	30 e0       	ldi	r19, 0x00	; 0
    63cc:	4f ee       	ldi	r20, 0xEF	; 239
    63ce:	50 e0       	ldi	r21, 0x00	; 0
    63d0:	6c ed       	ldi	r22, 0xDC	; 220
    63d2:	70 e0       	ldi	r23, 0x00	; 0
    63d4:	8d e5       	ldi	r24, 0x5D	; 93
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 02 12 	call	0x2404	; 0x2404 <RoundRectangle>
						DrawText(20, 110, GetMaxX() - 20, 110, str, ALINE_LEFT);
    63dc:	e1 2c       	mov	r14, r1
    63de:	83 01       	movw	r16, r6
    63e0:	2e e6       	ldi	r18, 0x6E	; 110
    63e2:	30 e0       	ldi	r19, 0x00	; 0
    63e4:	4b ed       	ldi	r20, 0xDB	; 219
    63e6:	50 e0       	ldi	r21, 0x00	; 0
    63e8:	6e e6       	ldi	r22, 0x6E	; 110
    63ea:	70 e0       	ldi	r23, 0x00	; 0
    63ec:	84 e1       	ldi	r24, 0x14	; 20
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
						sprintf(str, "New York: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 40.7142700, -74.0059700, 'K')));
    63f4:	d2 01       	movw	r26, r4
    63f6:	2d 91       	ld	r18, X+
    63f8:	3d 91       	ld	r19, X+
    63fa:	4d 91       	ld	r20, X+
    63fc:	5c 91       	ld	r21, X
    63fe:	f1 01       	movw	r30, r2
    6400:	60 81       	ld	r22, Z
    6402:	71 81       	ldd	r23, Z+1	; 0x01
    6404:	82 81       	ldd	r24, Z+2	; 0x02
    6406:	93 81       	ldd	r25, Z+3	; 0x03
    6408:	0f 2e       	mov	r0, r31
    640a:	fe e0       	ldi	r31, 0x0E	; 14
    640c:	af 2e       	mov	r10, r31
    640e:	f3 e0       	ldi	r31, 0x03	; 3
    6410:	bf 2e       	mov	r11, r31
    6412:	f4 e9       	ldi	r31, 0x94	; 148
    6414:	cf 2e       	mov	r12, r31
    6416:	f2 ec       	ldi	r31, 0xC2	; 194
    6418:	df 2e       	mov	r13, r31
    641a:	f0 2d       	mov	r31, r0
    641c:	1a e6       	ldi	r17, 0x6A	; 106
    641e:	e1 2e       	mov	r14, r17
    6420:	1b ed       	ldi	r17, 0xDB	; 219
    6422:	f1 2e       	mov	r15, r17
    6424:	02 e2       	ldi	r16, 0x22	; 34
    6426:	12 e4       	ldi	r17, 0x42	; 66
    6428:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    642c:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    6430:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    6434:	7f 93       	push	r23
    6436:	6f 93       	push	r22
    6438:	a4 ed       	ldi	r26, 0xD4	; 212
    643a:	b1 e0       	ldi	r27, 0x01	; 1
    643c:	bf 93       	push	r27
    643e:	af 93       	push	r26
    6440:	7f 92       	push	r7
    6442:	6f 92       	push	r6
    6444:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						DrawText(20, 140, GetMaxX() - 20, 140, str, ALINE_LEFT);
    6448:	e1 2c       	mov	r14, r1
    644a:	83 01       	movw	r16, r6
    644c:	2c e8       	ldi	r18, 0x8C	; 140
    644e:	30 e0       	ldi	r19, 0x00	; 0
    6450:	4b ed       	ldi	r20, 0xDB	; 219
    6452:	50 e0       	ldi	r21, 0x00	; 0
    6454:	6c e8       	ldi	r22, 0x8C	; 140
    6456:	70 e0       	ldi	r23, 0x00	; 0
    6458:	84 e1       	ldi	r24, 0x14	; 20
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
						sprintf(str, "Moscow: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 55.7522200, 37.6155600, 'K')));
    6460:	d2 01       	movw	r26, r4
    6462:	2d 91       	ld	r18, X+
    6464:	3d 91       	ld	r19, X+
    6466:	4d 91       	ld	r20, X+
    6468:	5c 91       	ld	r21, X
    646a:	f1 01       	movw	r30, r2
    646c:	60 81       	ld	r22, Z
    646e:	71 81       	ldd	r23, Z+1	; 0x01
    6470:	82 81       	ldd	r24, Z+2	; 0x02
    6472:	93 81       	ldd	r25, Z+3	; 0x03
    6474:	0f 2e       	mov	r0, r31
    6476:	f5 e5       	ldi	r31, 0x55	; 85
    6478:	af 2e       	mov	r10, r31
    647a:	f6 e7       	ldi	r31, 0x76	; 118
    647c:	bf 2e       	mov	r11, r31
    647e:	f6 e1       	ldi	r31, 0x16	; 22
    6480:	cf 2e       	mov	r12, r31
    6482:	f2 e4       	ldi	r31, 0x42	; 66
    6484:	df 2e       	mov	r13, r31
    6486:	f0 2d       	mov	r31, r0
    6488:	16 e4       	ldi	r17, 0x46	; 70
    648a:	e1 2e       	mov	r14, r17
    648c:	12 e0       	ldi	r17, 0x02	; 2
    648e:	f1 2e       	mov	r15, r17
    6490:	0f e5       	ldi	r16, 0x5F	; 95
    6492:	12 e4       	ldi	r17, 0x42	; 66
    6494:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    6498:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    649c:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    64a0:	7f 93       	push	r23
    64a2:	6f 93       	push	r22
    64a4:	a4 ee       	ldi	r26, 0xE4	; 228
    64a6:	b1 e0       	ldi	r27, 0x01	; 1
    64a8:	bf 93       	push	r27
    64aa:	af 93       	push	r26
    64ac:	7f 92       	push	r7
    64ae:	6f 92       	push	r6
    64b0:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						DrawText(20, 170, GetMaxX() - 20, 170, str, ALINE_LEFT);
    64b4:	e1 2c       	mov	r14, r1
    64b6:	83 01       	movw	r16, r6
    64b8:	2a ea       	ldi	r18, 0xAA	; 170
    64ba:	30 e0       	ldi	r19, 0x00	; 0
    64bc:	4b ed       	ldi	r20, 0xDB	; 219
    64be:	50 e0       	ldi	r21, 0x00	; 0
    64c0:	6a ea       	ldi	r22, 0xAA	; 170
    64c2:	70 e0       	ldi	r23, 0x00	; 0
    64c4:	84 e1       	ldi	r24, 0x14	; 20
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
						sprintf(str, "London: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, 51.5085300, -0.1257400, 'K')));
    64cc:	d2 01       	movw	r26, r4
    64ce:	2d 91       	ld	r18, X+
    64d0:	3d 91       	ld	r19, X+
    64d2:	4d 91       	ld	r20, X+
    64d4:	5c 91       	ld	r21, X
    64d6:	f1 01       	movw	r30, r2
    64d8:	60 81       	ld	r22, Z
    64da:	71 81       	ldd	r23, Z+1	; 0x01
    64dc:	82 81       	ldd	r24, Z+2	; 0x02
    64de:	93 81       	ldd	r25, Z+3	; 0x03
    64e0:	0f 2e       	mov	r0, r31
    64e2:	fd ef       	ldi	r31, 0xFD	; 253
    64e4:	af 2e       	mov	r10, r31
    64e6:	f1 ec       	ldi	r31, 0xC1	; 193
    64e8:	bf 2e       	mov	r11, r31
    64ea:	c1 2c       	mov	r12, r1
    64ec:	fe eb       	ldi	r31, 0xBE	; 190
    64ee:	df 2e       	mov	r13, r31
    64f0:	f0 2d       	mov	r31, r0
    64f2:	1c eb       	ldi	r17, 0xBC	; 188
    64f4:	e1 2e       	mov	r14, r17
    64f6:	18 e0       	ldi	r17, 0x08	; 8
    64f8:	f1 2e       	mov	r15, r17
    64fa:	0e e4       	ldi	r16, 0x4E	; 78
    64fc:	12 e4       	ldi	r17, 0x42	; 66
    64fe:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    6502:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    6506:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    650a:	7f 93       	push	r23
    650c:	6f 93       	push	r22
    650e:	a2 ef       	ldi	r26, 0xF2	; 242
    6510:	b1 e0       	ldi	r27, 0x01	; 1
    6512:	bf 93       	push	r27
    6514:	af 93       	push	r26
    6516:	7f 92       	push	r7
    6518:	6f 92       	push	r6
    651a:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						DrawText(20, 200, GetMaxX() - 20, 200, str, ALINE_LEFT);
    651e:	e1 2c       	mov	r14, r1
    6520:	83 01       	movw	r16, r6
    6522:	28 ec       	ldi	r18, 0xC8	; 200
    6524:	30 e0       	ldi	r19, 0x00	; 0
    6526:	4b ed       	ldi	r20, 0xDB	; 219
    6528:	50 e0       	ldi	r21, 0x00	; 0
    652a:	68 ec       	ldi	r22, 0xC8	; 200
    652c:	70 e0       	ldi	r23, 0x00	; 0
    652e:	84 e1       	ldi	r24, 0x14	; 20
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
						sprintf(str, "Sydney: %d km", (int) round(distance(currentReading.latitude_fixed, currentReading.longitude_fixed, -33.8678500, 151.2073200, 'K')));
    6536:	d2 01       	movw	r26, r4
    6538:	2d 91       	ld	r18, X+
    653a:	3d 91       	ld	r19, X+
    653c:	4d 91       	ld	r20, X+
    653e:	5c 91       	ld	r21, X
    6540:	f1 01       	movw	r30, r2
    6542:	60 81       	ld	r22, Z
    6544:	71 81       	ldd	r23, Z+1	; 0x01
    6546:	82 81       	ldd	r24, Z+2	; 0x02
    6548:	93 81       	ldd	r25, Z+3	; 0x03
    654a:	0f 2e       	mov	r0, r31
    654c:	f3 e1       	ldi	r31, 0x13	; 19
    654e:	af 2e       	mov	r10, r31
    6550:	f5 e3       	ldi	r31, 0x35	; 53
    6552:	bf 2e       	mov	r11, r31
    6554:	f7 e1       	ldi	r31, 0x17	; 23
    6556:	cf 2e       	mov	r12, r31
    6558:	f3 e4       	ldi	r31, 0x43	; 67
    655a:	df 2e       	mov	r13, r31
    655c:	f0 2d       	mov	r31, r0
    655e:	1e ea       	ldi	r17, 0xAE	; 174
    6560:	e1 2e       	mov	r14, r17
    6562:	18 e7       	ldi	r17, 0x78	; 120
    6564:	f1 2e       	mov	r15, r17
    6566:	07 e0       	ldi	r16, 0x07	; 7
    6568:	12 ec       	ldi	r17, 0xC2	; 194
    656a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <distance>
    656e:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <round>
    6572:	0e 94 d6 33 	call	0x67ac	; 0x67ac <__fixsfsi>
    6576:	7f 93       	push	r23
    6578:	6f 93       	push	r22
    657a:	a0 e0       	ldi	r26, 0x00	; 0
    657c:	b2 e0       	ldi	r27, 0x02	; 2
    657e:	bf 93       	push	r27
    6580:	af 93       	push	r26
    6582:	7f 92       	push	r7
    6584:	6f 92       	push	r6
    6586:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <sprintf>
						DrawText(20, 230, GetMaxX() - 20, 230, str, ALINE_LEFT);
    658a:	e1 2c       	mov	r14, r1
    658c:	83 01       	movw	r16, r6
    658e:	26 ee       	ldi	r18, 0xE6	; 230
    6590:	30 e0       	ldi	r19, 0x00	; 0
    6592:	4b ed       	ldi	r20, 0xDB	; 219
    6594:	50 e0       	ldi	r21, 0x00	; 0
    6596:	66 ee       	ldi	r22, 0xE6	; 230
    6598:	70 e0       	ldi	r23, 0x00	; 0
    659a:	84 e1       	ldi	r24, 0x14	; 20
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DrawText>
    65a2:	0f b6       	in	r0, 0x3f	; 63
    65a4:	f8 94       	cli
    65a6:	de bf       	out	0x3e, r29	; 62
    65a8:	0f be       	out	0x3f, r0	; 63
    65aa:	cd bf       	out	0x3d, r28	; 61
    65ac:	00 e0       	ldi	r16, 0x00	; 0
    65ae:	10 e0       	ldi	r17, 0x00	; 0
		DrawText(0, 40, 40, 80, "<", ALINE_CENTER);
		DrawText(0, 40, GetMaxX(), 80, "Distances", ALINE_CENTER);
		SetColor(CLOUDS);
		BevelFill(0, 81, GetMaxX(), GetMaxY()-51, 0);
	
	while(currentScreen == 2 || currentScreen == 3) {
    65b0:	80 91 83 02 	lds	r24, 0x0283
    65b4:	90 91 84 02 	lds	r25, 0x0284
    65b8:	02 97       	sbiw	r24, 0x02	; 2
    65ba:	02 97       	sbiw	r24, 0x02	; 2
    65bc:	08 f4       	brcc	.+2      	; 0x65c0 <showDistances+0x8ac>
    65be:	f9 cc       	rjmp	.-1550   	; 0x5fb2 <showDistances+0x29e>

		
	}
	

}
    65c0:	64 96       	adiw	r28, 0x14	; 20
    65c2:	0f b6       	in	r0, 0x3f	; 63
    65c4:	f8 94       	cli
    65c6:	de bf       	out	0x3e, r29	; 62
    65c8:	0f be       	out	0x3f, r0	; 63
    65ca:	cd bf       	out	0x3d, r28	; 61
    65cc:	df 91       	pop	r29
    65ce:	cf 91       	pop	r28
    65d0:	1f 91       	pop	r17
    65d2:	0f 91       	pop	r16
    65d4:	ff 90       	pop	r15
    65d6:	ef 90       	pop	r14
    65d8:	df 90       	pop	r13
    65da:	cf 90       	pop	r12
    65dc:	bf 90       	pop	r11
    65de:	af 90       	pop	r10
    65e0:	8f 90       	pop	r8
    65e2:	7f 90       	pop	r7
    65e4:	6f 90       	pop	r6
    65e6:	5f 90       	pop	r5
    65e8:	4f 90       	pop	r4
    65ea:	3f 90       	pop	r3
    65ec:	2f 90       	pop	r2
    65ee:	08 95       	ret

000065f0 <acos>:
    65f0:	9f 93       	push	r25
    65f2:	9f 77       	andi	r25, 0x7F	; 127
    65f4:	49 d1       	rcall	.+658    	; 0x6888 <__fp_arccos>
    65f6:	0f 90       	pop	r0
    65f8:	00 20       	and	r0, r0
    65fa:	3a f4       	brpl	.+14     	; 0x660a <acos+0x1a>
    65fc:	90 58       	subi	r25, 0x80	; 128
    65fe:	a2 ea       	ldi	r26, 0xA2	; 162
    6600:	2a ed       	ldi	r18, 0xDA	; 218
    6602:	3f e0       	ldi	r19, 0x0F	; 15
    6604:	49 e4       	ldi	r20, 0x49	; 73
    6606:	50 e4       	ldi	r21, 0x40	; 64
    6608:	13 d0       	rcall	.+38     	; 0x6630 <__addsf3x>
    660a:	bd c1       	rjmp	.+890    	; 0x6986 <__fp_round>

0000660c <__subsf3>:
    660c:	50 58       	subi	r21, 0x80	; 128

0000660e <__addsf3>:
    660e:	bb 27       	eor	r27, r27
    6610:	aa 27       	eor	r26, r26
    6612:	0e d0       	rcall	.+28     	; 0x6630 <__addsf3x>
    6614:	b8 c1       	rjmp	.+880    	; 0x6986 <__fp_round>
    6616:	81 d1       	rcall	.+770    	; 0x691a <__fp_pscA>
    6618:	30 f0       	brcs	.+12     	; 0x6626 <__addsf3+0x18>
    661a:	86 d1       	rcall	.+780    	; 0x6928 <__fp_pscB>
    661c:	20 f0       	brcs	.+8      	; 0x6626 <__addsf3+0x18>
    661e:	31 f4       	brne	.+12     	; 0x662c <__addsf3+0x1e>
    6620:	9f 3f       	cpi	r25, 0xFF	; 255
    6622:	11 f4       	brne	.+4      	; 0x6628 <__addsf3+0x1a>
    6624:	1e f4       	brtc	.+6      	; 0x662c <__addsf3+0x1e>
    6626:	51 c1       	rjmp	.+674    	; 0x68ca <__fp_nan>
    6628:	0e f4       	brtc	.+2      	; 0x662c <__addsf3+0x1e>
    662a:	e0 95       	com	r30
    662c:	e7 fb       	bst	r30, 7
    662e:	47 c1       	rjmp	.+654    	; 0x68be <__fp_inf>

00006630 <__addsf3x>:
    6630:	e9 2f       	mov	r30, r25
    6632:	cb d1       	rcall	.+918    	; 0x69ca <__fp_split3>
    6634:	80 f3       	brcs	.-32     	; 0x6616 <__addsf3+0x8>
    6636:	ba 17       	cp	r27, r26
    6638:	62 07       	cpc	r22, r18
    663a:	73 07       	cpc	r23, r19
    663c:	84 07       	cpc	r24, r20
    663e:	95 07       	cpc	r25, r21
    6640:	18 f0       	brcs	.+6      	; 0x6648 <__addsf3x+0x18>
    6642:	71 f4       	brne	.+28     	; 0x6660 <__addsf3x+0x30>
    6644:	9e f5       	brtc	.+102    	; 0x66ac <__addsf3x+0x7c>
    6646:	e3 c1       	rjmp	.+966    	; 0x6a0e <__fp_zero>
    6648:	0e f4       	brtc	.+2      	; 0x664c <__addsf3x+0x1c>
    664a:	e0 95       	com	r30
    664c:	0b 2e       	mov	r0, r27
    664e:	ba 2f       	mov	r27, r26
    6650:	a0 2d       	mov	r26, r0
    6652:	0b 01       	movw	r0, r22
    6654:	b9 01       	movw	r22, r18
    6656:	90 01       	movw	r18, r0
    6658:	0c 01       	movw	r0, r24
    665a:	ca 01       	movw	r24, r20
    665c:	a0 01       	movw	r20, r0
    665e:	11 24       	eor	r1, r1
    6660:	ff 27       	eor	r31, r31
    6662:	59 1b       	sub	r21, r25
    6664:	99 f0       	breq	.+38     	; 0x668c <__addsf3x+0x5c>
    6666:	59 3f       	cpi	r21, 0xF9	; 249
    6668:	50 f4       	brcc	.+20     	; 0x667e <__addsf3x+0x4e>
    666a:	50 3e       	cpi	r21, 0xE0	; 224
    666c:	68 f1       	brcs	.+90     	; 0x66c8 <__addsf3x+0x98>
    666e:	1a 16       	cp	r1, r26
    6670:	f0 40       	sbci	r31, 0x00	; 0
    6672:	a2 2f       	mov	r26, r18
    6674:	23 2f       	mov	r18, r19
    6676:	34 2f       	mov	r19, r20
    6678:	44 27       	eor	r20, r20
    667a:	58 5f       	subi	r21, 0xF8	; 248
    667c:	f3 cf       	rjmp	.-26     	; 0x6664 <__addsf3x+0x34>
    667e:	46 95       	lsr	r20
    6680:	37 95       	ror	r19
    6682:	27 95       	ror	r18
    6684:	a7 95       	ror	r26
    6686:	f0 40       	sbci	r31, 0x00	; 0
    6688:	53 95       	inc	r21
    668a:	c9 f7       	brne	.-14     	; 0x667e <__addsf3x+0x4e>
    668c:	7e f4       	brtc	.+30     	; 0x66ac <__addsf3x+0x7c>
    668e:	1f 16       	cp	r1, r31
    6690:	ba 0b       	sbc	r27, r26
    6692:	62 0b       	sbc	r22, r18
    6694:	73 0b       	sbc	r23, r19
    6696:	84 0b       	sbc	r24, r20
    6698:	ba f0       	brmi	.+46     	; 0x66c8 <__addsf3x+0x98>
    669a:	91 50       	subi	r25, 0x01	; 1
    669c:	a1 f0       	breq	.+40     	; 0x66c6 <__addsf3x+0x96>
    669e:	ff 0f       	add	r31, r31
    66a0:	bb 1f       	adc	r27, r27
    66a2:	66 1f       	adc	r22, r22
    66a4:	77 1f       	adc	r23, r23
    66a6:	88 1f       	adc	r24, r24
    66a8:	c2 f7       	brpl	.-16     	; 0x669a <__addsf3x+0x6a>
    66aa:	0e c0       	rjmp	.+28     	; 0x66c8 <__addsf3x+0x98>
    66ac:	ba 0f       	add	r27, r26
    66ae:	62 1f       	adc	r22, r18
    66b0:	73 1f       	adc	r23, r19
    66b2:	84 1f       	adc	r24, r20
    66b4:	48 f4       	brcc	.+18     	; 0x66c8 <__addsf3x+0x98>
    66b6:	87 95       	ror	r24
    66b8:	77 95       	ror	r23
    66ba:	67 95       	ror	r22
    66bc:	b7 95       	ror	r27
    66be:	f7 95       	ror	r31
    66c0:	9e 3f       	cpi	r25, 0xFE	; 254
    66c2:	08 f0       	brcs	.+2      	; 0x66c6 <__addsf3x+0x96>
    66c4:	b3 cf       	rjmp	.-154    	; 0x662c <__addsf3+0x1e>
    66c6:	93 95       	inc	r25
    66c8:	88 0f       	add	r24, r24
    66ca:	08 f0       	brcs	.+2      	; 0x66ce <__addsf3x+0x9e>
    66cc:	99 27       	eor	r25, r25
    66ce:	ee 0f       	add	r30, r30
    66d0:	97 95       	ror	r25
    66d2:	87 95       	ror	r24
    66d4:	08 95       	ret

000066d6 <cos>:
    66d6:	30 d1       	rcall	.+608    	; 0x6938 <__fp_rempio2>
    66d8:	e3 95       	inc	r30
    66da:	66 c1       	rjmp	.+716    	; 0x69a8 <__fp_sinus>

000066dc <__divsf3>:
    66dc:	0c d0       	rcall	.+24     	; 0x66f6 <__divsf3x>
    66de:	53 c1       	rjmp	.+678    	; 0x6986 <__fp_round>
    66e0:	23 d1       	rcall	.+582    	; 0x6928 <__fp_pscB>
    66e2:	40 f0       	brcs	.+16     	; 0x66f4 <__divsf3+0x18>
    66e4:	1a d1       	rcall	.+564    	; 0x691a <__fp_pscA>
    66e6:	30 f0       	brcs	.+12     	; 0x66f4 <__divsf3+0x18>
    66e8:	21 f4       	brne	.+8      	; 0x66f2 <__divsf3+0x16>
    66ea:	5f 3f       	cpi	r21, 0xFF	; 255
    66ec:	19 f0       	breq	.+6      	; 0x66f4 <__divsf3+0x18>
    66ee:	e7 c0       	rjmp	.+462    	; 0x68be <__fp_inf>
    66f0:	51 11       	cpse	r21, r1
    66f2:	8e c1       	rjmp	.+796    	; 0x6a10 <__fp_szero>
    66f4:	ea c0       	rjmp	.+468    	; 0x68ca <__fp_nan>

000066f6 <__divsf3x>:
    66f6:	69 d1       	rcall	.+722    	; 0x69ca <__fp_split3>
    66f8:	98 f3       	brcs	.-26     	; 0x66e0 <__divsf3+0x4>

000066fa <__divsf3_pse>:
    66fa:	99 23       	and	r25, r25
    66fc:	c9 f3       	breq	.-14     	; 0x66f0 <__divsf3+0x14>
    66fe:	55 23       	and	r21, r21
    6700:	b1 f3       	breq	.-20     	; 0x66ee <__divsf3+0x12>
    6702:	95 1b       	sub	r25, r21
    6704:	55 0b       	sbc	r21, r21
    6706:	bb 27       	eor	r27, r27
    6708:	aa 27       	eor	r26, r26
    670a:	62 17       	cp	r22, r18
    670c:	73 07       	cpc	r23, r19
    670e:	84 07       	cpc	r24, r20
    6710:	38 f0       	brcs	.+14     	; 0x6720 <__divsf3_pse+0x26>
    6712:	9f 5f       	subi	r25, 0xFF	; 255
    6714:	5f 4f       	sbci	r21, 0xFF	; 255
    6716:	22 0f       	add	r18, r18
    6718:	33 1f       	adc	r19, r19
    671a:	44 1f       	adc	r20, r20
    671c:	aa 1f       	adc	r26, r26
    671e:	a9 f3       	breq	.-22     	; 0x670a <__divsf3_pse+0x10>
    6720:	33 d0       	rcall	.+102    	; 0x6788 <__divsf3_pse+0x8e>
    6722:	0e 2e       	mov	r0, r30
    6724:	3a f0       	brmi	.+14     	; 0x6734 <__divsf3_pse+0x3a>
    6726:	e0 e8       	ldi	r30, 0x80	; 128
    6728:	30 d0       	rcall	.+96     	; 0x678a <__divsf3_pse+0x90>
    672a:	91 50       	subi	r25, 0x01	; 1
    672c:	50 40       	sbci	r21, 0x00	; 0
    672e:	e6 95       	lsr	r30
    6730:	00 1c       	adc	r0, r0
    6732:	ca f7       	brpl	.-14     	; 0x6726 <__divsf3_pse+0x2c>
    6734:	29 d0       	rcall	.+82     	; 0x6788 <__divsf3_pse+0x8e>
    6736:	fe 2f       	mov	r31, r30
    6738:	27 d0       	rcall	.+78     	; 0x6788 <__divsf3_pse+0x8e>
    673a:	66 0f       	add	r22, r22
    673c:	77 1f       	adc	r23, r23
    673e:	88 1f       	adc	r24, r24
    6740:	bb 1f       	adc	r27, r27
    6742:	26 17       	cp	r18, r22
    6744:	37 07       	cpc	r19, r23
    6746:	48 07       	cpc	r20, r24
    6748:	ab 07       	cpc	r26, r27
    674a:	b0 e8       	ldi	r27, 0x80	; 128
    674c:	09 f0       	breq	.+2      	; 0x6750 <__divsf3_pse+0x56>
    674e:	bb 0b       	sbc	r27, r27
    6750:	80 2d       	mov	r24, r0
    6752:	bf 01       	movw	r22, r30
    6754:	ff 27       	eor	r31, r31
    6756:	93 58       	subi	r25, 0x83	; 131
    6758:	5f 4f       	sbci	r21, 0xFF	; 255
    675a:	2a f0       	brmi	.+10     	; 0x6766 <__divsf3_pse+0x6c>
    675c:	9e 3f       	cpi	r25, 0xFE	; 254
    675e:	51 05       	cpc	r21, r1
    6760:	68 f0       	brcs	.+26     	; 0x677c <__divsf3_pse+0x82>
    6762:	ad c0       	rjmp	.+346    	; 0x68be <__fp_inf>
    6764:	55 c1       	rjmp	.+682    	; 0x6a10 <__fp_szero>
    6766:	5f 3f       	cpi	r21, 0xFF	; 255
    6768:	ec f3       	brlt	.-6      	; 0x6764 <__divsf3_pse+0x6a>
    676a:	98 3e       	cpi	r25, 0xE8	; 232
    676c:	dc f3       	brlt	.-10     	; 0x6764 <__divsf3_pse+0x6a>
    676e:	86 95       	lsr	r24
    6770:	77 95       	ror	r23
    6772:	67 95       	ror	r22
    6774:	b7 95       	ror	r27
    6776:	f7 95       	ror	r31
    6778:	9f 5f       	subi	r25, 0xFF	; 255
    677a:	c9 f7       	brne	.-14     	; 0x676e <__divsf3_pse+0x74>
    677c:	88 0f       	add	r24, r24
    677e:	91 1d       	adc	r25, r1
    6780:	96 95       	lsr	r25
    6782:	87 95       	ror	r24
    6784:	97 f9       	bld	r25, 7
    6786:	08 95       	ret
    6788:	e1 e0       	ldi	r30, 0x01	; 1
    678a:	66 0f       	add	r22, r22
    678c:	77 1f       	adc	r23, r23
    678e:	88 1f       	adc	r24, r24
    6790:	bb 1f       	adc	r27, r27
    6792:	62 17       	cp	r22, r18
    6794:	73 07       	cpc	r23, r19
    6796:	84 07       	cpc	r24, r20
    6798:	ba 07       	cpc	r27, r26
    679a:	20 f0       	brcs	.+8      	; 0x67a4 <__divsf3_pse+0xaa>
    679c:	62 1b       	sub	r22, r18
    679e:	73 0b       	sbc	r23, r19
    67a0:	84 0b       	sbc	r24, r20
    67a2:	ba 0b       	sbc	r27, r26
    67a4:	ee 1f       	adc	r30, r30
    67a6:	88 f7       	brcc	.-30     	; 0x678a <__divsf3_pse+0x90>
    67a8:	e0 95       	com	r30
    67aa:	08 95       	ret

000067ac <__fixsfsi>:
    67ac:	04 d0       	rcall	.+8      	; 0x67b6 <__fixunssfsi>
    67ae:	68 94       	set
    67b0:	b1 11       	cpse	r27, r1
    67b2:	2e c1       	rjmp	.+604    	; 0x6a10 <__fp_szero>
    67b4:	08 95       	ret

000067b6 <__fixunssfsi>:
    67b6:	11 d1       	rcall	.+546    	; 0x69da <__fp_splitA>
    67b8:	88 f0       	brcs	.+34     	; 0x67dc <__fixunssfsi+0x26>
    67ba:	9f 57       	subi	r25, 0x7F	; 127
    67bc:	90 f0       	brcs	.+36     	; 0x67e2 <__fixunssfsi+0x2c>
    67be:	b9 2f       	mov	r27, r25
    67c0:	99 27       	eor	r25, r25
    67c2:	b7 51       	subi	r27, 0x17	; 23
    67c4:	a0 f0       	brcs	.+40     	; 0x67ee <__fixunssfsi+0x38>
    67c6:	d1 f0       	breq	.+52     	; 0x67fc <__fixunssfsi+0x46>
    67c8:	66 0f       	add	r22, r22
    67ca:	77 1f       	adc	r23, r23
    67cc:	88 1f       	adc	r24, r24
    67ce:	99 1f       	adc	r25, r25
    67d0:	1a f0       	brmi	.+6      	; 0x67d8 <__fixunssfsi+0x22>
    67d2:	ba 95       	dec	r27
    67d4:	c9 f7       	brne	.-14     	; 0x67c8 <__fixunssfsi+0x12>
    67d6:	12 c0       	rjmp	.+36     	; 0x67fc <__fixunssfsi+0x46>
    67d8:	b1 30       	cpi	r27, 0x01	; 1
    67da:	81 f0       	breq	.+32     	; 0x67fc <__fixunssfsi+0x46>
    67dc:	18 d1       	rcall	.+560    	; 0x6a0e <__fp_zero>
    67de:	b1 e0       	ldi	r27, 0x01	; 1
    67e0:	08 95       	ret
    67e2:	15 c1       	rjmp	.+554    	; 0x6a0e <__fp_zero>
    67e4:	67 2f       	mov	r22, r23
    67e6:	78 2f       	mov	r23, r24
    67e8:	88 27       	eor	r24, r24
    67ea:	b8 5f       	subi	r27, 0xF8	; 248
    67ec:	39 f0       	breq	.+14     	; 0x67fc <__fixunssfsi+0x46>
    67ee:	b9 3f       	cpi	r27, 0xF9	; 249
    67f0:	cc f3       	brlt	.-14     	; 0x67e4 <__fixunssfsi+0x2e>
    67f2:	86 95       	lsr	r24
    67f4:	77 95       	ror	r23
    67f6:	67 95       	ror	r22
    67f8:	b3 95       	inc	r27
    67fa:	d9 f7       	brne	.-10     	; 0x67f2 <__fixunssfsi+0x3c>
    67fc:	3e f4       	brtc	.+14     	; 0x680c <__fixunssfsi+0x56>
    67fe:	90 95       	com	r25
    6800:	80 95       	com	r24
    6802:	70 95       	com	r23
    6804:	61 95       	neg	r22
    6806:	7f 4f       	sbci	r23, 0xFF	; 255
    6808:	8f 4f       	sbci	r24, 0xFF	; 255
    680a:	9f 4f       	sbci	r25, 0xFF	; 255
    680c:	08 95       	ret

0000680e <__floatunsisf>:
    680e:	e8 94       	clt
    6810:	09 c0       	rjmp	.+18     	; 0x6824 <__floatsisf+0x12>

00006812 <__floatsisf>:
    6812:	97 fb       	bst	r25, 7
    6814:	3e f4       	brtc	.+14     	; 0x6824 <__floatsisf+0x12>
    6816:	90 95       	com	r25
    6818:	80 95       	com	r24
    681a:	70 95       	com	r23
    681c:	61 95       	neg	r22
    681e:	7f 4f       	sbci	r23, 0xFF	; 255
    6820:	8f 4f       	sbci	r24, 0xFF	; 255
    6822:	9f 4f       	sbci	r25, 0xFF	; 255
    6824:	99 23       	and	r25, r25
    6826:	a9 f0       	breq	.+42     	; 0x6852 <__floatsisf+0x40>
    6828:	f9 2f       	mov	r31, r25
    682a:	96 e9       	ldi	r25, 0x96	; 150
    682c:	bb 27       	eor	r27, r27
    682e:	93 95       	inc	r25
    6830:	f6 95       	lsr	r31
    6832:	87 95       	ror	r24
    6834:	77 95       	ror	r23
    6836:	67 95       	ror	r22
    6838:	b7 95       	ror	r27
    683a:	f1 11       	cpse	r31, r1
    683c:	f8 cf       	rjmp	.-16     	; 0x682e <__floatsisf+0x1c>
    683e:	fa f4       	brpl	.+62     	; 0x687e <__floatsisf+0x6c>
    6840:	bb 0f       	add	r27, r27
    6842:	11 f4       	brne	.+4      	; 0x6848 <__floatsisf+0x36>
    6844:	60 ff       	sbrs	r22, 0
    6846:	1b c0       	rjmp	.+54     	; 0x687e <__floatsisf+0x6c>
    6848:	6f 5f       	subi	r22, 0xFF	; 255
    684a:	7f 4f       	sbci	r23, 0xFF	; 255
    684c:	8f 4f       	sbci	r24, 0xFF	; 255
    684e:	9f 4f       	sbci	r25, 0xFF	; 255
    6850:	16 c0       	rjmp	.+44     	; 0x687e <__floatsisf+0x6c>
    6852:	88 23       	and	r24, r24
    6854:	11 f0       	breq	.+4      	; 0x685a <__floatsisf+0x48>
    6856:	96 e9       	ldi	r25, 0x96	; 150
    6858:	11 c0       	rjmp	.+34     	; 0x687c <__floatsisf+0x6a>
    685a:	77 23       	and	r23, r23
    685c:	21 f0       	breq	.+8      	; 0x6866 <__floatsisf+0x54>
    685e:	9e e8       	ldi	r25, 0x8E	; 142
    6860:	87 2f       	mov	r24, r23
    6862:	76 2f       	mov	r23, r22
    6864:	05 c0       	rjmp	.+10     	; 0x6870 <__floatsisf+0x5e>
    6866:	66 23       	and	r22, r22
    6868:	71 f0       	breq	.+28     	; 0x6886 <__floatsisf+0x74>
    686a:	96 e8       	ldi	r25, 0x86	; 134
    686c:	86 2f       	mov	r24, r22
    686e:	70 e0       	ldi	r23, 0x00	; 0
    6870:	60 e0       	ldi	r22, 0x00	; 0
    6872:	2a f0       	brmi	.+10     	; 0x687e <__floatsisf+0x6c>
    6874:	9a 95       	dec	r25
    6876:	66 0f       	add	r22, r22
    6878:	77 1f       	adc	r23, r23
    687a:	88 1f       	adc	r24, r24
    687c:	da f7       	brpl	.-10     	; 0x6874 <__floatsisf+0x62>
    687e:	88 0f       	add	r24, r24
    6880:	96 95       	lsr	r25
    6882:	87 95       	ror	r24
    6884:	97 f9       	bld	r25, 7
    6886:	08 95       	ret

00006888 <__fp_arccos>:
    6888:	df 93       	push	r29
    688a:	cf 93       	push	r28
    688c:	1f 93       	push	r17
    688e:	0f 93       	push	r16
    6890:	8b 01       	movw	r16, r22
    6892:	ec 01       	movw	r28, r24
    6894:	e4 e5       	ldi	r30, 0x54	; 84
    6896:	f0 e0       	ldi	r31, 0x00	; 0
    6898:	1b d0       	rcall	.+54     	; 0x68d0 <__fp_powser>
    689a:	75 d0       	rcall	.+234    	; 0x6986 <__fp_round>
    689c:	98 01       	movw	r18, r16
    689e:	ae 01       	movw	r20, r28
    68a0:	8b 01       	movw	r16, r22
    68a2:	ec 01       	movw	r28, r24
    68a4:	60 e0       	ldi	r22, 0x00	; 0
    68a6:	70 e0       	ldi	r23, 0x00	; 0
    68a8:	80 e8       	ldi	r24, 0x80	; 128
    68aa:	9f e3       	ldi	r25, 0x3F	; 63
    68ac:	af de       	rcall	.-674    	; 0x660c <__subsf3>
    68ae:	43 d1       	rcall	.+646    	; 0x6b36 <sqrt>
    68b0:	98 01       	movw	r18, r16
    68b2:	ae 01       	movw	r20, r28
    68b4:	0f 91       	pop	r16
    68b6:	1f 91       	pop	r17
    68b8:	cf 91       	pop	r28
    68ba:	df 91       	pop	r29
    68bc:	bb c0       	rjmp	.+374    	; 0x6a34 <__mulsf3x>

000068be <__fp_inf>:
    68be:	97 f9       	bld	r25, 7
    68c0:	9f 67       	ori	r25, 0x7F	; 127
    68c2:	80 e8       	ldi	r24, 0x80	; 128
    68c4:	70 e0       	ldi	r23, 0x00	; 0
    68c6:	60 e0       	ldi	r22, 0x00	; 0
    68c8:	08 95       	ret

000068ca <__fp_nan>:
    68ca:	9f ef       	ldi	r25, 0xFF	; 255
    68cc:	80 ec       	ldi	r24, 0xC0	; 192
    68ce:	08 95       	ret

000068d0 <__fp_powser>:
    68d0:	df 93       	push	r29
    68d2:	cf 93       	push	r28
    68d4:	1f 93       	push	r17
    68d6:	0f 93       	push	r16
    68d8:	ff 92       	push	r15
    68da:	ef 92       	push	r14
    68dc:	df 92       	push	r13
    68de:	7b 01       	movw	r14, r22
    68e0:	8c 01       	movw	r16, r24
    68e2:	68 94       	set
    68e4:	05 c0       	rjmp	.+10     	; 0x68f0 <__fp_powser+0x20>
    68e6:	da 2e       	mov	r13, r26
    68e8:	ef 01       	movw	r28, r30
    68ea:	a4 d0       	rcall	.+328    	; 0x6a34 <__mulsf3x>
    68ec:	fe 01       	movw	r30, r28
    68ee:	e8 94       	clt
    68f0:	a5 91       	lpm	r26, Z+
    68f2:	25 91       	lpm	r18, Z+
    68f4:	35 91       	lpm	r19, Z+
    68f6:	45 91       	lpm	r20, Z+
    68f8:	55 91       	lpm	r21, Z+
    68fa:	ae f3       	brts	.-22     	; 0x68e6 <__fp_powser+0x16>
    68fc:	ef 01       	movw	r28, r30
    68fe:	98 de       	rcall	.-720    	; 0x6630 <__addsf3x>
    6900:	fe 01       	movw	r30, r28
    6902:	97 01       	movw	r18, r14
    6904:	a8 01       	movw	r20, r16
    6906:	da 94       	dec	r13
    6908:	79 f7       	brne	.-34     	; 0x68e8 <__fp_powser+0x18>
    690a:	df 90       	pop	r13
    690c:	ef 90       	pop	r14
    690e:	ff 90       	pop	r15
    6910:	0f 91       	pop	r16
    6912:	1f 91       	pop	r17
    6914:	cf 91       	pop	r28
    6916:	df 91       	pop	r29
    6918:	08 95       	ret

0000691a <__fp_pscA>:
    691a:	00 24       	eor	r0, r0
    691c:	0a 94       	dec	r0
    691e:	16 16       	cp	r1, r22
    6920:	17 06       	cpc	r1, r23
    6922:	18 06       	cpc	r1, r24
    6924:	09 06       	cpc	r0, r25
    6926:	08 95       	ret

00006928 <__fp_pscB>:
    6928:	00 24       	eor	r0, r0
    692a:	0a 94       	dec	r0
    692c:	12 16       	cp	r1, r18
    692e:	13 06       	cpc	r1, r19
    6930:	14 06       	cpc	r1, r20
    6932:	05 06       	cpc	r0, r21
    6934:	08 95       	ret
    6936:	c9 cf       	rjmp	.-110    	; 0x68ca <__fp_nan>

00006938 <__fp_rempio2>:
    6938:	50 d0       	rcall	.+160    	; 0x69da <__fp_splitA>
    693a:	e8 f3       	brcs	.-6      	; 0x6936 <__fp_pscB+0xe>
    693c:	e8 94       	clt
    693e:	e0 e0       	ldi	r30, 0x00	; 0
    6940:	bb 27       	eor	r27, r27
    6942:	9f 57       	subi	r25, 0x7F	; 127
    6944:	f0 f0       	brcs	.+60     	; 0x6982 <__fp_rempio2+0x4a>
    6946:	2a ed       	ldi	r18, 0xDA	; 218
    6948:	3f e0       	ldi	r19, 0x0F	; 15
    694a:	49 ec       	ldi	r20, 0xC9	; 201
    694c:	06 c0       	rjmp	.+12     	; 0x695a <__fp_rempio2+0x22>
    694e:	ee 0f       	add	r30, r30
    6950:	bb 0f       	add	r27, r27
    6952:	66 1f       	adc	r22, r22
    6954:	77 1f       	adc	r23, r23
    6956:	88 1f       	adc	r24, r24
    6958:	28 f0       	brcs	.+10     	; 0x6964 <__fp_rempio2+0x2c>
    695a:	b2 3a       	cpi	r27, 0xA2	; 162
    695c:	62 07       	cpc	r22, r18
    695e:	73 07       	cpc	r23, r19
    6960:	84 07       	cpc	r24, r20
    6962:	28 f0       	brcs	.+10     	; 0x696e <__fp_rempio2+0x36>
    6964:	b2 5a       	subi	r27, 0xA2	; 162
    6966:	62 0b       	sbc	r22, r18
    6968:	73 0b       	sbc	r23, r19
    696a:	84 0b       	sbc	r24, r20
    696c:	e3 95       	inc	r30
    696e:	9a 95       	dec	r25
    6970:	72 f7       	brpl	.-36     	; 0x694e <__fp_rempio2+0x16>
    6972:	80 38       	cpi	r24, 0x80	; 128
    6974:	30 f4       	brcc	.+12     	; 0x6982 <__fp_rempio2+0x4a>
    6976:	9a 95       	dec	r25
    6978:	bb 0f       	add	r27, r27
    697a:	66 1f       	adc	r22, r22
    697c:	77 1f       	adc	r23, r23
    697e:	88 1f       	adc	r24, r24
    6980:	d2 f7       	brpl	.-12     	; 0x6976 <__fp_rempio2+0x3e>
    6982:	90 48       	sbci	r25, 0x80	; 128
    6984:	33 c1       	rjmp	.+614    	; 0x6bec <__fp_mpack_finite>

00006986 <__fp_round>:
    6986:	09 2e       	mov	r0, r25
    6988:	03 94       	inc	r0
    698a:	00 0c       	add	r0, r0
    698c:	11 f4       	brne	.+4      	; 0x6992 <__fp_round+0xc>
    698e:	88 23       	and	r24, r24
    6990:	52 f0       	brmi	.+20     	; 0x69a6 <__fp_round+0x20>
    6992:	bb 0f       	add	r27, r27
    6994:	40 f4       	brcc	.+16     	; 0x69a6 <__fp_round+0x20>
    6996:	bf 2b       	or	r27, r31
    6998:	11 f4       	brne	.+4      	; 0x699e <__fp_round+0x18>
    699a:	60 ff       	sbrs	r22, 0
    699c:	04 c0       	rjmp	.+8      	; 0x69a6 <__fp_round+0x20>
    699e:	6f 5f       	subi	r22, 0xFF	; 255
    69a0:	7f 4f       	sbci	r23, 0xFF	; 255
    69a2:	8f 4f       	sbci	r24, 0xFF	; 255
    69a4:	9f 4f       	sbci	r25, 0xFF	; 255
    69a6:	08 95       	ret

000069a8 <__fp_sinus>:
    69a8:	ef 93       	push	r30
    69aa:	e0 ff       	sbrs	r30, 0
    69ac:	06 c0       	rjmp	.+12     	; 0x69ba <__fp_sinus+0x12>
    69ae:	a2 ea       	ldi	r26, 0xA2	; 162
    69b0:	2a ed       	ldi	r18, 0xDA	; 218
    69b2:	3f e0       	ldi	r19, 0x0F	; 15
    69b4:	49 ec       	ldi	r20, 0xC9	; 201
    69b6:	5f eb       	ldi	r21, 0xBF	; 191
    69b8:	3b de       	rcall	.-906    	; 0x6630 <__addsf3x>
    69ba:	e5 df       	rcall	.-54     	; 0x6986 <__fp_round>
    69bc:	0f 90       	pop	r0
    69be:	03 94       	inc	r0
    69c0:	01 fc       	sbrc	r0, 1
    69c2:	90 58       	subi	r25, 0x80	; 128
    69c4:	ec e7       	ldi	r30, 0x7C	; 124
    69c6:	f0 e0       	ldi	r31, 0x00	; 0
    69c8:	24 c1       	rjmp	.+584    	; 0x6c12 <__fp_powsodd>

000069ca <__fp_split3>:
    69ca:	57 fd       	sbrc	r21, 7
    69cc:	90 58       	subi	r25, 0x80	; 128
    69ce:	44 0f       	add	r20, r20
    69d0:	55 1f       	adc	r21, r21
    69d2:	59 f0       	breq	.+22     	; 0x69ea <__fp_splitA+0x10>
    69d4:	5f 3f       	cpi	r21, 0xFF	; 255
    69d6:	71 f0       	breq	.+28     	; 0x69f4 <__fp_splitA+0x1a>
    69d8:	47 95       	ror	r20

000069da <__fp_splitA>:
    69da:	88 0f       	add	r24, r24
    69dc:	97 fb       	bst	r25, 7
    69de:	99 1f       	adc	r25, r25
    69e0:	61 f0       	breq	.+24     	; 0x69fa <__fp_splitA+0x20>
    69e2:	9f 3f       	cpi	r25, 0xFF	; 255
    69e4:	79 f0       	breq	.+30     	; 0x6a04 <__fp_splitA+0x2a>
    69e6:	87 95       	ror	r24
    69e8:	08 95       	ret
    69ea:	12 16       	cp	r1, r18
    69ec:	13 06       	cpc	r1, r19
    69ee:	14 06       	cpc	r1, r20
    69f0:	55 1f       	adc	r21, r21
    69f2:	f2 cf       	rjmp	.-28     	; 0x69d8 <__fp_split3+0xe>
    69f4:	46 95       	lsr	r20
    69f6:	f1 df       	rcall	.-30     	; 0x69da <__fp_splitA>
    69f8:	08 c0       	rjmp	.+16     	; 0x6a0a <__fp_splitA+0x30>
    69fa:	16 16       	cp	r1, r22
    69fc:	17 06       	cpc	r1, r23
    69fe:	18 06       	cpc	r1, r24
    6a00:	99 1f       	adc	r25, r25
    6a02:	f1 cf       	rjmp	.-30     	; 0x69e6 <__fp_splitA+0xc>
    6a04:	86 95       	lsr	r24
    6a06:	71 05       	cpc	r23, r1
    6a08:	61 05       	cpc	r22, r1
    6a0a:	08 94       	sec
    6a0c:	08 95       	ret

00006a0e <__fp_zero>:
    6a0e:	e8 94       	clt

00006a10 <__fp_szero>:
    6a10:	bb 27       	eor	r27, r27
    6a12:	66 27       	eor	r22, r22
    6a14:	77 27       	eor	r23, r23
    6a16:	cb 01       	movw	r24, r22
    6a18:	97 f9       	bld	r25, 7
    6a1a:	08 95       	ret

00006a1c <__mulsf3>:
    6a1c:	0b d0       	rcall	.+22     	; 0x6a34 <__mulsf3x>
    6a1e:	b3 cf       	rjmp	.-154    	; 0x6986 <__fp_round>
    6a20:	7c df       	rcall	.-264    	; 0x691a <__fp_pscA>
    6a22:	28 f0       	brcs	.+10     	; 0x6a2e <__mulsf3+0x12>
    6a24:	81 df       	rcall	.-254    	; 0x6928 <__fp_pscB>
    6a26:	18 f0       	brcs	.+6      	; 0x6a2e <__mulsf3+0x12>
    6a28:	95 23       	and	r25, r21
    6a2a:	09 f0       	breq	.+2      	; 0x6a2e <__mulsf3+0x12>
    6a2c:	48 cf       	rjmp	.-368    	; 0x68be <__fp_inf>
    6a2e:	4d cf       	rjmp	.-358    	; 0x68ca <__fp_nan>
    6a30:	11 24       	eor	r1, r1
    6a32:	ee cf       	rjmp	.-36     	; 0x6a10 <__fp_szero>

00006a34 <__mulsf3x>:
    6a34:	ca df       	rcall	.-108    	; 0x69ca <__fp_split3>
    6a36:	a0 f3       	brcs	.-24     	; 0x6a20 <__mulsf3+0x4>

00006a38 <__mulsf3_pse>:
    6a38:	95 9f       	mul	r25, r21
    6a3a:	d1 f3       	breq	.-12     	; 0x6a30 <__mulsf3+0x14>
    6a3c:	95 0f       	add	r25, r21
    6a3e:	50 e0       	ldi	r21, 0x00	; 0
    6a40:	55 1f       	adc	r21, r21
    6a42:	62 9f       	mul	r22, r18
    6a44:	f0 01       	movw	r30, r0
    6a46:	72 9f       	mul	r23, r18
    6a48:	bb 27       	eor	r27, r27
    6a4a:	f0 0d       	add	r31, r0
    6a4c:	b1 1d       	adc	r27, r1
    6a4e:	63 9f       	mul	r22, r19
    6a50:	aa 27       	eor	r26, r26
    6a52:	f0 0d       	add	r31, r0
    6a54:	b1 1d       	adc	r27, r1
    6a56:	aa 1f       	adc	r26, r26
    6a58:	64 9f       	mul	r22, r20
    6a5a:	66 27       	eor	r22, r22
    6a5c:	b0 0d       	add	r27, r0
    6a5e:	a1 1d       	adc	r26, r1
    6a60:	66 1f       	adc	r22, r22
    6a62:	82 9f       	mul	r24, r18
    6a64:	22 27       	eor	r18, r18
    6a66:	b0 0d       	add	r27, r0
    6a68:	a1 1d       	adc	r26, r1
    6a6a:	62 1f       	adc	r22, r18
    6a6c:	73 9f       	mul	r23, r19
    6a6e:	b0 0d       	add	r27, r0
    6a70:	a1 1d       	adc	r26, r1
    6a72:	62 1f       	adc	r22, r18
    6a74:	83 9f       	mul	r24, r19
    6a76:	a0 0d       	add	r26, r0
    6a78:	61 1d       	adc	r22, r1
    6a7a:	22 1f       	adc	r18, r18
    6a7c:	74 9f       	mul	r23, r20
    6a7e:	33 27       	eor	r19, r19
    6a80:	a0 0d       	add	r26, r0
    6a82:	61 1d       	adc	r22, r1
    6a84:	23 1f       	adc	r18, r19
    6a86:	84 9f       	mul	r24, r20
    6a88:	60 0d       	add	r22, r0
    6a8a:	21 1d       	adc	r18, r1
    6a8c:	82 2f       	mov	r24, r18
    6a8e:	76 2f       	mov	r23, r22
    6a90:	6a 2f       	mov	r22, r26
    6a92:	11 24       	eor	r1, r1
    6a94:	9f 57       	subi	r25, 0x7F	; 127
    6a96:	50 40       	sbci	r21, 0x00	; 0
    6a98:	8a f0       	brmi	.+34     	; 0x6abc <__mulsf3_pse+0x84>
    6a9a:	e1 f0       	breq	.+56     	; 0x6ad4 <__mulsf3_pse+0x9c>
    6a9c:	88 23       	and	r24, r24
    6a9e:	4a f0       	brmi	.+18     	; 0x6ab2 <__mulsf3_pse+0x7a>
    6aa0:	ee 0f       	add	r30, r30
    6aa2:	ff 1f       	adc	r31, r31
    6aa4:	bb 1f       	adc	r27, r27
    6aa6:	66 1f       	adc	r22, r22
    6aa8:	77 1f       	adc	r23, r23
    6aaa:	88 1f       	adc	r24, r24
    6aac:	91 50       	subi	r25, 0x01	; 1
    6aae:	50 40       	sbci	r21, 0x00	; 0
    6ab0:	a9 f7       	brne	.-22     	; 0x6a9c <__mulsf3_pse+0x64>
    6ab2:	9e 3f       	cpi	r25, 0xFE	; 254
    6ab4:	51 05       	cpc	r21, r1
    6ab6:	70 f0       	brcs	.+28     	; 0x6ad4 <__mulsf3_pse+0x9c>
    6ab8:	02 cf       	rjmp	.-508    	; 0x68be <__fp_inf>
    6aba:	aa cf       	rjmp	.-172    	; 0x6a10 <__fp_szero>
    6abc:	5f 3f       	cpi	r21, 0xFF	; 255
    6abe:	ec f3       	brlt	.-6      	; 0x6aba <__mulsf3_pse+0x82>
    6ac0:	98 3e       	cpi	r25, 0xE8	; 232
    6ac2:	dc f3       	brlt	.-10     	; 0x6aba <__mulsf3_pse+0x82>
    6ac4:	86 95       	lsr	r24
    6ac6:	77 95       	ror	r23
    6ac8:	67 95       	ror	r22
    6aca:	b7 95       	ror	r27
    6acc:	f7 95       	ror	r31
    6ace:	e7 95       	ror	r30
    6ad0:	9f 5f       	subi	r25, 0xFF	; 255
    6ad2:	c1 f7       	brne	.-16     	; 0x6ac4 <__mulsf3_pse+0x8c>
    6ad4:	fe 2b       	or	r31, r30
    6ad6:	88 0f       	add	r24, r24
    6ad8:	91 1d       	adc	r25, r1
    6ada:	96 95       	lsr	r25
    6adc:	87 95       	ror	r24
    6ade:	97 f9       	bld	r25, 7
    6ae0:	08 95       	ret

00006ae2 <round>:
    6ae2:	7b df       	rcall	.-266    	; 0x69da <__fp_splitA>
    6ae4:	e0 f0       	brcs	.+56     	; 0x6b1e <round+0x3c>
    6ae6:	9e 37       	cpi	r25, 0x7E	; 126
    6ae8:	d8 f0       	brcs	.+54     	; 0x6b20 <round+0x3e>
    6aea:	96 39       	cpi	r25, 0x96	; 150
    6aec:	b8 f4       	brcc	.+46     	; 0x6b1c <round+0x3a>
    6aee:	9e 38       	cpi	r25, 0x8E	; 142
    6af0:	48 f4       	brcc	.+18     	; 0x6b04 <round+0x22>
    6af2:	67 2f       	mov	r22, r23
    6af4:	78 2f       	mov	r23, r24
    6af6:	88 27       	eor	r24, r24
    6af8:	98 5f       	subi	r25, 0xF8	; 248
    6afa:	f9 cf       	rjmp	.-14     	; 0x6aee <round+0xc>
    6afc:	86 95       	lsr	r24
    6afe:	77 95       	ror	r23
    6b00:	67 95       	ror	r22
    6b02:	93 95       	inc	r25
    6b04:	95 39       	cpi	r25, 0x95	; 149
    6b06:	d0 f3       	brcs	.-12     	; 0x6afc <round+0x1a>
    6b08:	b6 2f       	mov	r27, r22
    6b0a:	b1 70       	andi	r27, 0x01	; 1
    6b0c:	6b 0f       	add	r22, r27
    6b0e:	71 1d       	adc	r23, r1
    6b10:	81 1d       	adc	r24, r1
    6b12:	20 f4       	brcc	.+8      	; 0x6b1c <round+0x3a>
    6b14:	87 95       	ror	r24
    6b16:	77 95       	ror	r23
    6b18:	67 95       	ror	r22
    6b1a:	93 95       	inc	r25
    6b1c:	4a c0       	rjmp	.+148    	; 0x6bb2 <__fp_mintl>
    6b1e:	64 c0       	rjmp	.+200    	; 0x6be8 <__fp_mpack>
    6b20:	77 cf       	rjmp	.-274    	; 0x6a10 <__fp_szero>

00006b22 <sin>:
    6b22:	9f 93       	push	r25
    6b24:	09 df       	rcall	.-494    	; 0x6938 <__fp_rempio2>
    6b26:	0f 90       	pop	r0
    6b28:	07 fc       	sbrc	r0, 7
    6b2a:	ee 5f       	subi	r30, 0xFE	; 254
    6b2c:	3d cf       	rjmp	.-390    	; 0x69a8 <__fp_sinus>
    6b2e:	11 f4       	brne	.+4      	; 0x6b34 <sin+0x12>
    6b30:	0e f4       	brtc	.+2      	; 0x6b34 <sin+0x12>
    6b32:	cb ce       	rjmp	.-618    	; 0x68ca <__fp_nan>
    6b34:	59 c0       	rjmp	.+178    	; 0x6be8 <__fp_mpack>

00006b36 <sqrt>:
    6b36:	51 df       	rcall	.-350    	; 0x69da <__fp_splitA>
    6b38:	d0 f3       	brcs	.-12     	; 0x6b2e <sin+0xc>
    6b3a:	99 23       	and	r25, r25
    6b3c:	d9 f3       	breq	.-10     	; 0x6b34 <sin+0x12>
    6b3e:	ce f3       	brts	.-14     	; 0x6b32 <sin+0x10>
    6b40:	9f 57       	subi	r25, 0x7F	; 127
    6b42:	55 0b       	sbc	r21, r21
    6b44:	87 ff       	sbrs	r24, 7
    6b46:	5e d0       	rcall	.+188    	; 0x6c04 <__fp_norm2>
    6b48:	00 24       	eor	r0, r0
    6b4a:	a0 e6       	ldi	r26, 0x60	; 96
    6b4c:	40 ea       	ldi	r20, 0xA0	; 160
    6b4e:	90 01       	movw	r18, r0
    6b50:	80 58       	subi	r24, 0x80	; 128
    6b52:	56 95       	lsr	r21
    6b54:	97 95       	ror	r25
    6b56:	28 f4       	brcc	.+10     	; 0x6b62 <sqrt+0x2c>
    6b58:	80 5c       	subi	r24, 0xC0	; 192
    6b5a:	66 0f       	add	r22, r22
    6b5c:	77 1f       	adc	r23, r23
    6b5e:	88 1f       	adc	r24, r24
    6b60:	20 f0       	brcs	.+8      	; 0x6b6a <sqrt+0x34>
    6b62:	26 17       	cp	r18, r22
    6b64:	37 07       	cpc	r19, r23
    6b66:	48 07       	cpc	r20, r24
    6b68:	30 f4       	brcc	.+12     	; 0x6b76 <sqrt+0x40>
    6b6a:	62 1b       	sub	r22, r18
    6b6c:	73 0b       	sbc	r23, r19
    6b6e:	84 0b       	sbc	r24, r20
    6b70:	20 29       	or	r18, r0
    6b72:	31 29       	or	r19, r1
    6b74:	4a 2b       	or	r20, r26
    6b76:	a6 95       	lsr	r26
    6b78:	17 94       	ror	r1
    6b7a:	07 94       	ror	r0
    6b7c:	20 25       	eor	r18, r0
    6b7e:	31 25       	eor	r19, r1
    6b80:	4a 27       	eor	r20, r26
    6b82:	58 f7       	brcc	.-42     	; 0x6b5a <sqrt+0x24>
    6b84:	66 0f       	add	r22, r22
    6b86:	77 1f       	adc	r23, r23
    6b88:	88 1f       	adc	r24, r24
    6b8a:	20 f0       	brcs	.+8      	; 0x6b94 <sqrt+0x5e>
    6b8c:	26 17       	cp	r18, r22
    6b8e:	37 07       	cpc	r19, r23
    6b90:	48 07       	cpc	r20, r24
    6b92:	30 f4       	brcc	.+12     	; 0x6ba0 <sqrt+0x6a>
    6b94:	62 0b       	sbc	r22, r18
    6b96:	73 0b       	sbc	r23, r19
    6b98:	84 0b       	sbc	r24, r20
    6b9a:	20 0d       	add	r18, r0
    6b9c:	31 1d       	adc	r19, r1
    6b9e:	41 1d       	adc	r20, r1
    6ba0:	a0 95       	com	r26
    6ba2:	81 f7       	brne	.-32     	; 0x6b84 <sqrt+0x4e>
    6ba4:	b9 01       	movw	r22, r18
    6ba6:	84 2f       	mov	r24, r20
    6ba8:	91 58       	subi	r25, 0x81	; 129
    6baa:	88 0f       	add	r24, r24
    6bac:	96 95       	lsr	r25
    6bae:	87 95       	ror	r24
    6bb0:	08 95       	ret

00006bb2 <__fp_mintl>:
    6bb2:	88 23       	and	r24, r24
    6bb4:	71 f4       	brne	.+28     	; 0x6bd2 <__fp_mintl+0x20>
    6bb6:	77 23       	and	r23, r23
    6bb8:	21 f0       	breq	.+8      	; 0x6bc2 <__fp_mintl+0x10>
    6bba:	98 50       	subi	r25, 0x08	; 8
    6bbc:	87 2b       	or	r24, r23
    6bbe:	76 2f       	mov	r23, r22
    6bc0:	07 c0       	rjmp	.+14     	; 0x6bd0 <__fp_mintl+0x1e>
    6bc2:	66 23       	and	r22, r22
    6bc4:	11 f4       	brne	.+4      	; 0x6bca <__fp_mintl+0x18>
    6bc6:	99 27       	eor	r25, r25
    6bc8:	0d c0       	rjmp	.+26     	; 0x6be4 <__fp_mintl+0x32>
    6bca:	90 51       	subi	r25, 0x10	; 16
    6bcc:	86 2b       	or	r24, r22
    6bce:	70 e0       	ldi	r23, 0x00	; 0
    6bd0:	60 e0       	ldi	r22, 0x00	; 0
    6bd2:	2a f0       	brmi	.+10     	; 0x6bde <__fp_mintl+0x2c>
    6bd4:	9a 95       	dec	r25
    6bd6:	66 0f       	add	r22, r22
    6bd8:	77 1f       	adc	r23, r23
    6bda:	88 1f       	adc	r24, r24
    6bdc:	da f7       	brpl	.-10     	; 0x6bd4 <__fp_mintl+0x22>
    6bde:	88 0f       	add	r24, r24
    6be0:	96 95       	lsr	r25
    6be2:	87 95       	ror	r24
    6be4:	97 f9       	bld	r25, 7
    6be6:	08 95       	ret

00006be8 <__fp_mpack>:
    6be8:	9f 3f       	cpi	r25, 0xFF	; 255
    6bea:	31 f0       	breq	.+12     	; 0x6bf8 <__fp_mpack_finite+0xc>

00006bec <__fp_mpack_finite>:
    6bec:	91 50       	subi	r25, 0x01	; 1
    6bee:	20 f4       	brcc	.+8      	; 0x6bf8 <__fp_mpack_finite+0xc>
    6bf0:	87 95       	ror	r24
    6bf2:	77 95       	ror	r23
    6bf4:	67 95       	ror	r22
    6bf6:	b7 95       	ror	r27
    6bf8:	88 0f       	add	r24, r24
    6bfa:	91 1d       	adc	r25, r1
    6bfc:	96 95       	lsr	r25
    6bfe:	87 95       	ror	r24
    6c00:	97 f9       	bld	r25, 7
    6c02:	08 95       	ret

00006c04 <__fp_norm2>:
    6c04:	91 50       	subi	r25, 0x01	; 1
    6c06:	50 40       	sbci	r21, 0x00	; 0
    6c08:	66 0f       	add	r22, r22
    6c0a:	77 1f       	adc	r23, r23
    6c0c:	88 1f       	adc	r24, r24
    6c0e:	d2 f7       	brpl	.-12     	; 0x6c04 <__fp_norm2>
    6c10:	08 95       	ret

00006c12 <__fp_powsodd>:
    6c12:	9f 93       	push	r25
    6c14:	8f 93       	push	r24
    6c16:	7f 93       	push	r23
    6c18:	6f 93       	push	r22
    6c1a:	ff 93       	push	r31
    6c1c:	ef 93       	push	r30
    6c1e:	9b 01       	movw	r18, r22
    6c20:	ac 01       	movw	r20, r24
    6c22:	fc de       	rcall	.-520    	; 0x6a1c <__mulsf3>
    6c24:	ef 91       	pop	r30
    6c26:	ff 91       	pop	r31
    6c28:	53 de       	rcall	.-858    	; 0x68d0 <__fp_powser>
    6c2a:	2f 91       	pop	r18
    6c2c:	3f 91       	pop	r19
    6c2e:	4f 91       	pop	r20
    6c30:	5f 91       	pop	r21
    6c32:	f4 ce       	rjmp	.-536    	; 0x6a1c <__mulsf3>

00006c34 <__mulsi3>:
    6c34:	db 01       	movw	r26, r22
    6c36:	8f 93       	push	r24
    6c38:	9f 93       	push	r25
    6c3a:	0e 94 49 36 	call	0x6c92	; 0x6c92 <__muluhisi3>
    6c3e:	bf 91       	pop	r27
    6c40:	af 91       	pop	r26
    6c42:	a2 9f       	mul	r26, r18
    6c44:	80 0d       	add	r24, r0
    6c46:	91 1d       	adc	r25, r1
    6c48:	a3 9f       	mul	r26, r19
    6c4a:	90 0d       	add	r25, r0
    6c4c:	b2 9f       	mul	r27, r18
    6c4e:	90 0d       	add	r25, r0
    6c50:	11 24       	eor	r1, r1
    6c52:	08 95       	ret

00006c54 <__divmodsi4>:
    6c54:	05 2e       	mov	r0, r21
    6c56:	97 fb       	bst	r25, 7
    6c58:	1e f4       	brtc	.+6      	; 0x6c60 <__divmodsi4+0xc>
    6c5a:	00 94       	com	r0
    6c5c:	0e 94 41 36 	call	0x6c82	; 0x6c82 <__negsi2>
    6c60:	57 fd       	sbrc	r21, 7
    6c62:	07 d0       	rcall	.+14     	; 0x6c72 <__divmodsi4_neg2>
    6c64:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <__udivmodsi4>
    6c68:	07 fc       	sbrc	r0, 7
    6c6a:	03 d0       	rcall	.+6      	; 0x6c72 <__divmodsi4_neg2>
    6c6c:	4e f4       	brtc	.+18     	; 0x6c80 <__divmodsi4_exit>
    6c6e:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <__negsi2>

00006c72 <__divmodsi4_neg2>:
    6c72:	50 95       	com	r21
    6c74:	40 95       	com	r20
    6c76:	30 95       	com	r19
    6c78:	21 95       	neg	r18
    6c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c7c:	4f 4f       	sbci	r20, 0xFF	; 255
    6c7e:	5f 4f       	sbci	r21, 0xFF	; 255

00006c80 <__divmodsi4_exit>:
    6c80:	08 95       	ret

00006c82 <__negsi2>:
    6c82:	90 95       	com	r25
    6c84:	80 95       	com	r24
    6c86:	70 95       	com	r23
    6c88:	61 95       	neg	r22
    6c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    6c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c90:	08 95       	ret

00006c92 <__muluhisi3>:
    6c92:	0e 94 76 36 	call	0x6cec	; 0x6cec <__umulhisi3>
    6c96:	a5 9f       	mul	r26, r21
    6c98:	90 0d       	add	r25, r0
    6c9a:	b4 9f       	mul	r27, r20
    6c9c:	90 0d       	add	r25, r0
    6c9e:	a4 9f       	mul	r26, r20
    6ca0:	80 0d       	add	r24, r0
    6ca2:	91 1d       	adc	r25, r1
    6ca4:	11 24       	eor	r1, r1
    6ca6:	08 95       	ret

00006ca8 <__udivmodsi4>:
    6ca8:	a1 e2       	ldi	r26, 0x21	; 33
    6caa:	1a 2e       	mov	r1, r26
    6cac:	aa 1b       	sub	r26, r26
    6cae:	bb 1b       	sub	r27, r27
    6cb0:	fd 01       	movw	r30, r26
    6cb2:	0d c0       	rjmp	.+26     	; 0x6cce <__udivmodsi4_ep>

00006cb4 <__udivmodsi4_loop>:
    6cb4:	aa 1f       	adc	r26, r26
    6cb6:	bb 1f       	adc	r27, r27
    6cb8:	ee 1f       	adc	r30, r30
    6cba:	ff 1f       	adc	r31, r31
    6cbc:	a2 17       	cp	r26, r18
    6cbe:	b3 07       	cpc	r27, r19
    6cc0:	e4 07       	cpc	r30, r20
    6cc2:	f5 07       	cpc	r31, r21
    6cc4:	20 f0       	brcs	.+8      	; 0x6cce <__udivmodsi4_ep>
    6cc6:	a2 1b       	sub	r26, r18
    6cc8:	b3 0b       	sbc	r27, r19
    6cca:	e4 0b       	sbc	r30, r20
    6ccc:	f5 0b       	sbc	r31, r21

00006cce <__udivmodsi4_ep>:
    6cce:	66 1f       	adc	r22, r22
    6cd0:	77 1f       	adc	r23, r23
    6cd2:	88 1f       	adc	r24, r24
    6cd4:	99 1f       	adc	r25, r25
    6cd6:	1a 94       	dec	r1
    6cd8:	69 f7       	brne	.-38     	; 0x6cb4 <__udivmodsi4_loop>
    6cda:	60 95       	com	r22
    6cdc:	70 95       	com	r23
    6cde:	80 95       	com	r24
    6ce0:	90 95       	com	r25
    6ce2:	9b 01       	movw	r18, r22
    6ce4:	ac 01       	movw	r20, r24
    6ce6:	bd 01       	movw	r22, r26
    6ce8:	cf 01       	movw	r24, r30
    6cea:	08 95       	ret

00006cec <__umulhisi3>:
    6cec:	a2 9f       	mul	r26, r18
    6cee:	b0 01       	movw	r22, r0
    6cf0:	b3 9f       	mul	r27, r19
    6cf2:	c0 01       	movw	r24, r0
    6cf4:	a3 9f       	mul	r26, r19
    6cf6:	70 0d       	add	r23, r0
    6cf8:	81 1d       	adc	r24, r1
    6cfa:	11 24       	eor	r1, r1
    6cfc:	91 1d       	adc	r25, r1
    6cfe:	b2 9f       	mul	r27, r18
    6d00:	70 0d       	add	r23, r0
    6d02:	81 1d       	adc	r24, r1
    6d04:	11 24       	eor	r1, r1
    6d06:	91 1d       	adc	r25, r1
    6d08:	08 95       	ret

00006d0a <atof>:
    6d0a:	66 27       	eor	r22, r22
    6d0c:	77 27       	eor	r23, r23
    6d0e:	0c 94 1a 39 	jmp	0x7234	; 0x7234 <strtod>

00006d12 <atoi>:
    6d12:	fc 01       	movw	r30, r24
    6d14:	88 27       	eor	r24, r24
    6d16:	99 27       	eor	r25, r25
    6d18:	e8 94       	clt
    6d1a:	21 91       	ld	r18, Z+
    6d1c:	20 32       	cpi	r18, 0x20	; 32
    6d1e:	e9 f3       	breq	.-6      	; 0x6d1a <atoi+0x8>
    6d20:	29 30       	cpi	r18, 0x09	; 9
    6d22:	10 f0       	brcs	.+4      	; 0x6d28 <atoi+0x16>
    6d24:	2e 30       	cpi	r18, 0x0E	; 14
    6d26:	c8 f3       	brcs	.-14     	; 0x6d1a <atoi+0x8>
    6d28:	2b 32       	cpi	r18, 0x2B	; 43
    6d2a:	41 f0       	breq	.+16     	; 0x6d3c <atoi+0x2a>
    6d2c:	2d 32       	cpi	r18, 0x2D	; 45
    6d2e:	39 f4       	brne	.+14     	; 0x6d3e <atoi+0x2c>
    6d30:	68 94       	set
    6d32:	04 c0       	rjmp	.+8      	; 0x6d3c <atoi+0x2a>
    6d34:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <__mulhi_const_10>
    6d38:	82 0f       	add	r24, r18
    6d3a:	91 1d       	adc	r25, r1
    6d3c:	21 91       	ld	r18, Z+
    6d3e:	20 53       	subi	r18, 0x30	; 48
    6d40:	2a 30       	cpi	r18, 0x0A	; 10
    6d42:	c0 f3       	brcs	.-16     	; 0x6d34 <atoi+0x22>
    6d44:	1e f4       	brtc	.+6      	; 0x6d4c <atoi+0x3a>
    6d46:	90 95       	com	r25
    6d48:	81 95       	neg	r24
    6d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    6d4c:	08 95       	ret

00006d4e <atol>:
    6d4e:	1f 93       	push	r17
    6d50:	fc 01       	movw	r30, r24
    6d52:	99 27       	eor	r25, r25
    6d54:	88 27       	eor	r24, r24
    6d56:	bc 01       	movw	r22, r24
    6d58:	e8 94       	clt
    6d5a:	11 91       	ld	r17, Z+
    6d5c:	10 32       	cpi	r17, 0x20	; 32
    6d5e:	e9 f3       	breq	.-6      	; 0x6d5a <atol+0xc>
    6d60:	19 30       	cpi	r17, 0x09	; 9
    6d62:	10 f0       	brcs	.+4      	; 0x6d68 <atol+0x1a>
    6d64:	1e 30       	cpi	r17, 0x0E	; 14
    6d66:	c8 f3       	brcs	.-14     	; 0x6d5a <atol+0xc>
    6d68:	1b 32       	cpi	r17, 0x2B	; 43
    6d6a:	51 f0       	breq	.+20     	; 0x6d80 <atol+0x32>
    6d6c:	1d 32       	cpi	r17, 0x2D	; 45
    6d6e:	49 f4       	brne	.+18     	; 0x6d82 <atol+0x34>
    6d70:	68 94       	set
    6d72:	06 c0       	rjmp	.+12     	; 0x6d80 <atol+0x32>
    6d74:	0e 94 09 37 	call	0x6e12	; 0x6e12 <__mulsi_const_10>
    6d78:	61 0f       	add	r22, r17
    6d7a:	71 1d       	adc	r23, r1
    6d7c:	81 1d       	adc	r24, r1
    6d7e:	91 1d       	adc	r25, r1
    6d80:	11 91       	ld	r17, Z+
    6d82:	10 53       	subi	r17, 0x30	; 48
    6d84:	1a 30       	cpi	r17, 0x0A	; 10
    6d86:	b0 f3       	brcs	.-20     	; 0x6d74 <atol+0x26>
    6d88:	3e f4       	brtc	.+14     	; 0x6d98 <atol+0x4a>
    6d8a:	90 95       	com	r25
    6d8c:	80 95       	com	r24
    6d8e:	70 95       	com	r23
    6d90:	61 95       	neg	r22
    6d92:	7f 4f       	sbci	r23, 0xFF	; 255
    6d94:	8f 4f       	sbci	r24, 0xFF	; 255
    6d96:	9f 4f       	sbci	r25, 0xFF	; 255
    6d98:	1f 91       	pop	r17
    6d9a:	08 95       	ret

00006d9c <strchr>:
    6d9c:	fc 01       	movw	r30, r24
    6d9e:	81 91       	ld	r24, Z+
    6da0:	86 17       	cp	r24, r22
    6da2:	21 f0       	breq	.+8      	; 0x6dac <strchr+0x10>
    6da4:	88 23       	and	r24, r24
    6da6:	d9 f7       	brne	.-10     	; 0x6d9e <strchr+0x2>
    6da8:	99 27       	eor	r25, r25
    6daa:	08 95       	ret
    6dac:	31 97       	sbiw	r30, 0x01	; 1
    6dae:	cf 01       	movw	r24, r30
    6db0:	08 95       	ret

00006db2 <strcpy>:
    6db2:	fb 01       	movw	r30, r22
    6db4:	dc 01       	movw	r26, r24
    6db6:	01 90       	ld	r0, Z+
    6db8:	0d 92       	st	X+, r0
    6dba:	00 20       	and	r0, r0
    6dbc:	e1 f7       	brne	.-8      	; 0x6db6 <strcpy+0x4>
    6dbe:	08 95       	ret

00006dc0 <strncpy>:
    6dc0:	fb 01       	movw	r30, r22
    6dc2:	dc 01       	movw	r26, r24
    6dc4:	41 50       	subi	r20, 0x01	; 1
    6dc6:	50 40       	sbci	r21, 0x00	; 0
    6dc8:	48 f0       	brcs	.+18     	; 0x6ddc <strncpy+0x1c>
    6dca:	01 90       	ld	r0, Z+
    6dcc:	0d 92       	st	X+, r0
    6dce:	00 20       	and	r0, r0
    6dd0:	c9 f7       	brne	.-14     	; 0x6dc4 <strncpy+0x4>
    6dd2:	01 c0       	rjmp	.+2      	; 0x6dd6 <strncpy+0x16>
    6dd4:	1d 92       	st	X+, r1
    6dd6:	41 50       	subi	r20, 0x01	; 1
    6dd8:	50 40       	sbci	r21, 0x00	; 0
    6dda:	e0 f7       	brcc	.-8      	; 0x6dd4 <strncpy+0x14>
    6ddc:	08 95       	ret

00006dde <strstr>:
    6dde:	fb 01       	movw	r30, r22
    6de0:	51 91       	ld	r21, Z+
    6de2:	55 23       	and	r21, r21
    6de4:	a9 f0       	breq	.+42     	; 0x6e10 <strstr+0x32>
    6de6:	bf 01       	movw	r22, r30
    6de8:	dc 01       	movw	r26, r24
    6dea:	4d 91       	ld	r20, X+
    6dec:	45 17       	cp	r20, r21
    6dee:	41 11       	cpse	r20, r1
    6df0:	e1 f7       	brne	.-8      	; 0x6dea <strstr+0xc>
    6df2:	59 f4       	brne	.+22     	; 0x6e0a <strstr+0x2c>
    6df4:	cd 01       	movw	r24, r26
    6df6:	01 90       	ld	r0, Z+
    6df8:	00 20       	and	r0, r0
    6dfa:	49 f0       	breq	.+18     	; 0x6e0e <strstr+0x30>
    6dfc:	4d 91       	ld	r20, X+
    6dfe:	40 15       	cp	r20, r0
    6e00:	41 11       	cpse	r20, r1
    6e02:	c9 f3       	breq	.-14     	; 0x6df6 <strstr+0x18>
    6e04:	fb 01       	movw	r30, r22
    6e06:	41 11       	cpse	r20, r1
    6e08:	ef cf       	rjmp	.-34     	; 0x6de8 <strstr+0xa>
    6e0a:	81 e0       	ldi	r24, 0x01	; 1
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	01 97       	sbiw	r24, 0x01	; 1
    6e10:	08 95       	ret

00006e12 <__mulsi_const_10>:
    6e12:	59 2f       	mov	r21, r25
    6e14:	48 2f       	mov	r20, r24
    6e16:	37 2f       	mov	r19, r23
    6e18:	26 2f       	mov	r18, r22
    6e1a:	66 0f       	add	r22, r22
    6e1c:	77 1f       	adc	r23, r23
    6e1e:	88 1f       	adc	r24, r24
    6e20:	99 1f       	adc	r25, r25
    6e22:	66 0f       	add	r22, r22
    6e24:	77 1f       	adc	r23, r23
    6e26:	88 1f       	adc	r24, r24
    6e28:	99 1f       	adc	r25, r25
    6e2a:	62 0f       	add	r22, r18
    6e2c:	73 1f       	adc	r23, r19
    6e2e:	84 1f       	adc	r24, r20
    6e30:	95 1f       	adc	r25, r21
    6e32:	66 0f       	add	r22, r22
    6e34:	77 1f       	adc	r23, r23
    6e36:	88 1f       	adc	r24, r24
    6e38:	99 1f       	adc	r25, r25
    6e3a:	08 95       	ret

00006e3c <__mulhi_const_10>:
    6e3c:	7a e0       	ldi	r23, 0x0A	; 10
    6e3e:	97 9f       	mul	r25, r23
    6e40:	90 2d       	mov	r25, r0
    6e42:	87 9f       	mul	r24, r23
    6e44:	80 2d       	mov	r24, r0
    6e46:	91 0d       	add	r25, r1
    6e48:	11 24       	eor	r1, r1
    6e4a:	08 95       	ret

00006e4c <sprintf>:
    6e4c:	ae e0       	ldi	r26, 0x0E	; 14
    6e4e:	b0 e0       	ldi	r27, 0x00	; 0
    6e50:	ec e2       	ldi	r30, 0x2C	; 44
    6e52:	f7 e3       	ldi	r31, 0x37	; 55
    6e54:	0c 94 7c 3b 	jmp	0x76f8	; 0x76f8 <__prologue_saves__+0x1c>
    6e58:	0d 89       	ldd	r16, Y+21	; 0x15
    6e5a:	1e 89       	ldd	r17, Y+22	; 0x16
    6e5c:	86 e0       	ldi	r24, 0x06	; 6
    6e5e:	8c 83       	std	Y+4, r24	; 0x04
    6e60:	1a 83       	std	Y+2, r17	; 0x02
    6e62:	09 83       	std	Y+1, r16	; 0x01
    6e64:	8f ef       	ldi	r24, 0xFF	; 255
    6e66:	9f e7       	ldi	r25, 0x7F	; 127
    6e68:	9e 83       	std	Y+6, r25	; 0x06
    6e6a:	8d 83       	std	Y+5, r24	; 0x05
    6e6c:	ae 01       	movw	r20, r28
    6e6e:	47 5e       	subi	r20, 0xE7	; 231
    6e70:	5f 4f       	sbci	r21, 0xFF	; 255
    6e72:	6f 89       	ldd	r22, Y+23	; 0x17
    6e74:	78 8d       	ldd	r23, Y+24	; 0x18
    6e76:	ce 01       	movw	r24, r28
    6e78:	01 96       	adiw	r24, 0x01	; 1
    6e7a:	0e 94 48 37 	call	0x6e90	; 0x6e90 <vfprintf>
    6e7e:	ef 81       	ldd	r30, Y+7	; 0x07
    6e80:	f8 85       	ldd	r31, Y+8	; 0x08
    6e82:	e0 0f       	add	r30, r16
    6e84:	f1 1f       	adc	r31, r17
    6e86:	10 82       	st	Z, r1
    6e88:	2e 96       	adiw	r28, 0x0e	; 14
    6e8a:	e4 e0       	ldi	r30, 0x04	; 4
    6e8c:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__epilogue_restores__+0x1c>

00006e90 <vfprintf>:
    6e90:	ac e0       	ldi	r26, 0x0C	; 12
    6e92:	b0 e0       	ldi	r27, 0x00	; 0
    6e94:	ee e4       	ldi	r30, 0x4E	; 78
    6e96:	f7 e3       	ldi	r31, 0x37	; 55
    6e98:	0c 94 6e 3b 	jmp	0x76dc	; 0x76dc <__prologue_saves__>
    6e9c:	7c 01       	movw	r14, r24
    6e9e:	6b 01       	movw	r12, r22
    6ea0:	8a 01       	movw	r16, r20
    6ea2:	fc 01       	movw	r30, r24
    6ea4:	17 82       	std	Z+7, r1	; 0x07
    6ea6:	16 82       	std	Z+6, r1	; 0x06
    6ea8:	83 81       	ldd	r24, Z+3	; 0x03
    6eaa:	81 ff       	sbrs	r24, 1
    6eac:	bd c1       	rjmp	.+890    	; 0x7228 <vfprintf+0x398>
    6eae:	ce 01       	movw	r24, r28
    6eb0:	01 96       	adiw	r24, 0x01	; 1
    6eb2:	4c 01       	movw	r8, r24
    6eb4:	f7 01       	movw	r30, r14
    6eb6:	93 81       	ldd	r25, Z+3	; 0x03
    6eb8:	f6 01       	movw	r30, r12
    6eba:	93 fd       	sbrc	r25, 3
    6ebc:	85 91       	lpm	r24, Z+
    6ebe:	93 ff       	sbrs	r25, 3
    6ec0:	81 91       	ld	r24, Z+
    6ec2:	6f 01       	movw	r12, r30
    6ec4:	88 23       	and	r24, r24
    6ec6:	09 f4       	brne	.+2      	; 0x6eca <vfprintf+0x3a>
    6ec8:	ab c1       	rjmp	.+854    	; 0x7220 <vfprintf+0x390>
    6eca:	85 32       	cpi	r24, 0x25	; 37
    6ecc:	39 f4       	brne	.+14     	; 0x6edc <vfprintf+0x4c>
    6ece:	93 fd       	sbrc	r25, 3
    6ed0:	85 91       	lpm	r24, Z+
    6ed2:	93 ff       	sbrs	r25, 3
    6ed4:	81 91       	ld	r24, Z+
    6ed6:	6f 01       	movw	r12, r30
    6ed8:	85 32       	cpi	r24, 0x25	; 37
    6eda:	29 f4       	brne	.+10     	; 0x6ee6 <vfprintf+0x56>
    6edc:	b7 01       	movw	r22, r14
    6ede:	90 e0       	ldi	r25, 0x00	; 0
    6ee0:	0e 94 b3 3a 	call	0x7566	; 0x7566 <fputc>
    6ee4:	e7 cf       	rjmp	.-50     	; 0x6eb4 <vfprintf+0x24>
    6ee6:	51 2c       	mov	r5, r1
    6ee8:	31 2c       	mov	r3, r1
    6eea:	20 e0       	ldi	r18, 0x00	; 0
    6eec:	20 32       	cpi	r18, 0x20	; 32
    6eee:	a0 f4       	brcc	.+40     	; 0x6f18 <vfprintf+0x88>
    6ef0:	8b 32       	cpi	r24, 0x2B	; 43
    6ef2:	69 f0       	breq	.+26     	; 0x6f0e <vfprintf+0x7e>
    6ef4:	30 f4       	brcc	.+12     	; 0x6f02 <vfprintf+0x72>
    6ef6:	80 32       	cpi	r24, 0x20	; 32
    6ef8:	59 f0       	breq	.+22     	; 0x6f10 <vfprintf+0x80>
    6efa:	83 32       	cpi	r24, 0x23	; 35
    6efc:	69 f4       	brne	.+26     	; 0x6f18 <vfprintf+0x88>
    6efe:	20 61       	ori	r18, 0x10	; 16
    6f00:	2c c0       	rjmp	.+88     	; 0x6f5a <vfprintf+0xca>
    6f02:	8d 32       	cpi	r24, 0x2D	; 45
    6f04:	39 f0       	breq	.+14     	; 0x6f14 <vfprintf+0x84>
    6f06:	80 33       	cpi	r24, 0x30	; 48
    6f08:	39 f4       	brne	.+14     	; 0x6f18 <vfprintf+0x88>
    6f0a:	21 60       	ori	r18, 0x01	; 1
    6f0c:	26 c0       	rjmp	.+76     	; 0x6f5a <vfprintf+0xca>
    6f0e:	22 60       	ori	r18, 0x02	; 2
    6f10:	24 60       	ori	r18, 0x04	; 4
    6f12:	23 c0       	rjmp	.+70     	; 0x6f5a <vfprintf+0xca>
    6f14:	28 60       	ori	r18, 0x08	; 8
    6f16:	21 c0       	rjmp	.+66     	; 0x6f5a <vfprintf+0xca>
    6f18:	27 fd       	sbrc	r18, 7
    6f1a:	27 c0       	rjmp	.+78     	; 0x6f6a <vfprintf+0xda>
    6f1c:	30 ed       	ldi	r19, 0xD0	; 208
    6f1e:	38 0f       	add	r19, r24
    6f20:	3a 30       	cpi	r19, 0x0A	; 10
    6f22:	78 f4       	brcc	.+30     	; 0x6f42 <vfprintf+0xb2>
    6f24:	26 ff       	sbrs	r18, 6
    6f26:	06 c0       	rjmp	.+12     	; 0x6f34 <vfprintf+0xa4>
    6f28:	fa e0       	ldi	r31, 0x0A	; 10
    6f2a:	5f 9e       	mul	r5, r31
    6f2c:	30 0d       	add	r19, r0
    6f2e:	11 24       	eor	r1, r1
    6f30:	53 2e       	mov	r5, r19
    6f32:	13 c0       	rjmp	.+38     	; 0x6f5a <vfprintf+0xca>
    6f34:	8a e0       	ldi	r24, 0x0A	; 10
    6f36:	38 9e       	mul	r3, r24
    6f38:	30 0d       	add	r19, r0
    6f3a:	11 24       	eor	r1, r1
    6f3c:	33 2e       	mov	r3, r19
    6f3e:	20 62       	ori	r18, 0x20	; 32
    6f40:	0c c0       	rjmp	.+24     	; 0x6f5a <vfprintf+0xca>
    6f42:	8e 32       	cpi	r24, 0x2E	; 46
    6f44:	21 f4       	brne	.+8      	; 0x6f4e <vfprintf+0xbe>
    6f46:	26 fd       	sbrc	r18, 6
    6f48:	6b c1       	rjmp	.+726    	; 0x7220 <vfprintf+0x390>
    6f4a:	20 64       	ori	r18, 0x40	; 64
    6f4c:	06 c0       	rjmp	.+12     	; 0x6f5a <vfprintf+0xca>
    6f4e:	8c 36       	cpi	r24, 0x6C	; 108
    6f50:	11 f4       	brne	.+4      	; 0x6f56 <vfprintf+0xc6>
    6f52:	20 68       	ori	r18, 0x80	; 128
    6f54:	02 c0       	rjmp	.+4      	; 0x6f5a <vfprintf+0xca>
    6f56:	88 36       	cpi	r24, 0x68	; 104
    6f58:	41 f4       	brne	.+16     	; 0x6f6a <vfprintf+0xda>
    6f5a:	f6 01       	movw	r30, r12
    6f5c:	93 fd       	sbrc	r25, 3
    6f5e:	85 91       	lpm	r24, Z+
    6f60:	93 ff       	sbrs	r25, 3
    6f62:	81 91       	ld	r24, Z+
    6f64:	6f 01       	movw	r12, r30
    6f66:	81 11       	cpse	r24, r1
    6f68:	c1 cf       	rjmp	.-126    	; 0x6eec <vfprintf+0x5c>
    6f6a:	98 2f       	mov	r25, r24
    6f6c:	9f 7d       	andi	r25, 0xDF	; 223
    6f6e:	95 54       	subi	r25, 0x45	; 69
    6f70:	93 30       	cpi	r25, 0x03	; 3
    6f72:	28 f4       	brcc	.+10     	; 0x6f7e <vfprintf+0xee>
    6f74:	0c 5f       	subi	r16, 0xFC	; 252
    6f76:	1f 4f       	sbci	r17, 0xFF	; 255
    6f78:	ff e3       	ldi	r31, 0x3F	; 63
    6f7a:	f9 83       	std	Y+1, r31	; 0x01
    6f7c:	0d c0       	rjmp	.+26     	; 0x6f98 <vfprintf+0x108>
    6f7e:	83 36       	cpi	r24, 0x63	; 99
    6f80:	31 f0       	breq	.+12     	; 0x6f8e <vfprintf+0xfe>
    6f82:	83 37       	cpi	r24, 0x73	; 115
    6f84:	71 f0       	breq	.+28     	; 0x6fa2 <vfprintf+0x112>
    6f86:	83 35       	cpi	r24, 0x53	; 83
    6f88:	09 f0       	breq	.+2      	; 0x6f8c <vfprintf+0xfc>
    6f8a:	5b c0       	rjmp	.+182    	; 0x7042 <vfprintf+0x1b2>
    6f8c:	22 c0       	rjmp	.+68     	; 0x6fd2 <vfprintf+0x142>
    6f8e:	f8 01       	movw	r30, r16
    6f90:	80 81       	ld	r24, Z
    6f92:	89 83       	std	Y+1, r24	; 0x01
    6f94:	0e 5f       	subi	r16, 0xFE	; 254
    6f96:	1f 4f       	sbci	r17, 0xFF	; 255
    6f98:	44 24       	eor	r4, r4
    6f9a:	43 94       	inc	r4
    6f9c:	51 2c       	mov	r5, r1
    6f9e:	54 01       	movw	r10, r8
    6fa0:	15 c0       	rjmp	.+42     	; 0x6fcc <vfprintf+0x13c>
    6fa2:	38 01       	movw	r6, r16
    6fa4:	f2 e0       	ldi	r31, 0x02	; 2
    6fa6:	6f 0e       	add	r6, r31
    6fa8:	71 1c       	adc	r7, r1
    6faa:	f8 01       	movw	r30, r16
    6fac:	a0 80       	ld	r10, Z
    6fae:	b1 80       	ldd	r11, Z+1	; 0x01
    6fb0:	26 ff       	sbrs	r18, 6
    6fb2:	03 c0       	rjmp	.+6      	; 0x6fba <vfprintf+0x12a>
    6fb4:	65 2d       	mov	r22, r5
    6fb6:	70 e0       	ldi	r23, 0x00	; 0
    6fb8:	02 c0       	rjmp	.+4      	; 0x6fbe <vfprintf+0x12e>
    6fba:	6f ef       	ldi	r22, 0xFF	; 255
    6fbc:	7f ef       	ldi	r23, 0xFF	; 255
    6fbe:	c5 01       	movw	r24, r10
    6fc0:	2c 87       	std	Y+12, r18	; 0x0c
    6fc2:	0e 94 a8 3a 	call	0x7550	; 0x7550 <strnlen>
    6fc6:	2c 01       	movw	r4, r24
    6fc8:	83 01       	movw	r16, r6
    6fca:	2c 85       	ldd	r18, Y+12	; 0x0c
    6fcc:	2f 77       	andi	r18, 0x7F	; 127
    6fce:	22 2e       	mov	r2, r18
    6fd0:	17 c0       	rjmp	.+46     	; 0x7000 <vfprintf+0x170>
    6fd2:	38 01       	movw	r6, r16
    6fd4:	f2 e0       	ldi	r31, 0x02	; 2
    6fd6:	6f 0e       	add	r6, r31
    6fd8:	71 1c       	adc	r7, r1
    6fda:	f8 01       	movw	r30, r16
    6fdc:	a0 80       	ld	r10, Z
    6fde:	b1 80       	ldd	r11, Z+1	; 0x01
    6fe0:	26 ff       	sbrs	r18, 6
    6fe2:	03 c0       	rjmp	.+6      	; 0x6fea <vfprintf+0x15a>
    6fe4:	65 2d       	mov	r22, r5
    6fe6:	70 e0       	ldi	r23, 0x00	; 0
    6fe8:	02 c0       	rjmp	.+4      	; 0x6fee <vfprintf+0x15e>
    6fea:	6f ef       	ldi	r22, 0xFF	; 255
    6fec:	7f ef       	ldi	r23, 0xFF	; 255
    6fee:	c5 01       	movw	r24, r10
    6ff0:	2c 87       	std	Y+12, r18	; 0x0c
    6ff2:	0e 94 9d 3a 	call	0x753a	; 0x753a <strnlen_P>
    6ff6:	2c 01       	movw	r4, r24
    6ff8:	2c 85       	ldd	r18, Y+12	; 0x0c
    6ffa:	20 68       	ori	r18, 0x80	; 128
    6ffc:	22 2e       	mov	r2, r18
    6ffe:	83 01       	movw	r16, r6
    7000:	23 fc       	sbrc	r2, 3
    7002:	1b c0       	rjmp	.+54     	; 0x703a <vfprintf+0x1aa>
    7004:	83 2d       	mov	r24, r3
    7006:	90 e0       	ldi	r25, 0x00	; 0
    7008:	48 16       	cp	r4, r24
    700a:	59 06       	cpc	r5, r25
    700c:	b0 f4       	brcc	.+44     	; 0x703a <vfprintf+0x1aa>
    700e:	b7 01       	movw	r22, r14
    7010:	80 e2       	ldi	r24, 0x20	; 32
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	0e 94 b3 3a 	call	0x7566	; 0x7566 <fputc>
    7018:	3a 94       	dec	r3
    701a:	f4 cf       	rjmp	.-24     	; 0x7004 <vfprintf+0x174>
    701c:	f5 01       	movw	r30, r10
    701e:	27 fc       	sbrc	r2, 7
    7020:	85 91       	lpm	r24, Z+
    7022:	27 fe       	sbrs	r2, 7
    7024:	81 91       	ld	r24, Z+
    7026:	5f 01       	movw	r10, r30
    7028:	b7 01       	movw	r22, r14
    702a:	90 e0       	ldi	r25, 0x00	; 0
    702c:	0e 94 b3 3a 	call	0x7566	; 0x7566 <fputc>
    7030:	31 10       	cpse	r3, r1
    7032:	3a 94       	dec	r3
    7034:	f1 e0       	ldi	r31, 0x01	; 1
    7036:	4f 1a       	sub	r4, r31
    7038:	51 08       	sbc	r5, r1
    703a:	41 14       	cp	r4, r1
    703c:	51 04       	cpc	r5, r1
    703e:	71 f7       	brne	.-36     	; 0x701c <vfprintf+0x18c>
    7040:	e5 c0       	rjmp	.+458    	; 0x720c <vfprintf+0x37c>
    7042:	84 36       	cpi	r24, 0x64	; 100
    7044:	11 f0       	breq	.+4      	; 0x704a <vfprintf+0x1ba>
    7046:	89 36       	cpi	r24, 0x69	; 105
    7048:	39 f5       	brne	.+78     	; 0x7098 <vfprintf+0x208>
    704a:	f8 01       	movw	r30, r16
    704c:	27 ff       	sbrs	r18, 7
    704e:	07 c0       	rjmp	.+14     	; 0x705e <vfprintf+0x1ce>
    7050:	60 81       	ld	r22, Z
    7052:	71 81       	ldd	r23, Z+1	; 0x01
    7054:	82 81       	ldd	r24, Z+2	; 0x02
    7056:	93 81       	ldd	r25, Z+3	; 0x03
    7058:	0c 5f       	subi	r16, 0xFC	; 252
    705a:	1f 4f       	sbci	r17, 0xFF	; 255
    705c:	08 c0       	rjmp	.+16     	; 0x706e <vfprintf+0x1de>
    705e:	60 81       	ld	r22, Z
    7060:	71 81       	ldd	r23, Z+1	; 0x01
    7062:	88 27       	eor	r24, r24
    7064:	77 fd       	sbrc	r23, 7
    7066:	80 95       	com	r24
    7068:	98 2f       	mov	r25, r24
    706a:	0e 5f       	subi	r16, 0xFE	; 254
    706c:	1f 4f       	sbci	r17, 0xFF	; 255
    706e:	2f 76       	andi	r18, 0x6F	; 111
    7070:	b2 2e       	mov	r11, r18
    7072:	97 ff       	sbrs	r25, 7
    7074:	09 c0       	rjmp	.+18     	; 0x7088 <vfprintf+0x1f8>
    7076:	90 95       	com	r25
    7078:	80 95       	com	r24
    707a:	70 95       	com	r23
    707c:	61 95       	neg	r22
    707e:	7f 4f       	sbci	r23, 0xFF	; 255
    7080:	8f 4f       	sbci	r24, 0xFF	; 255
    7082:	9f 4f       	sbci	r25, 0xFF	; 255
    7084:	20 68       	ori	r18, 0x80	; 128
    7086:	b2 2e       	mov	r11, r18
    7088:	2a e0       	ldi	r18, 0x0A	; 10
    708a:	30 e0       	ldi	r19, 0x00	; 0
    708c:	a4 01       	movw	r20, r8
    708e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__ultoa_invert>
    7092:	a8 2e       	mov	r10, r24
    7094:	a8 18       	sub	r10, r8
    7096:	44 c0       	rjmp	.+136    	; 0x7120 <vfprintf+0x290>
    7098:	85 37       	cpi	r24, 0x75	; 117
    709a:	29 f4       	brne	.+10     	; 0x70a6 <vfprintf+0x216>
    709c:	2f 7e       	andi	r18, 0xEF	; 239
    709e:	b2 2e       	mov	r11, r18
    70a0:	2a e0       	ldi	r18, 0x0A	; 10
    70a2:	30 e0       	ldi	r19, 0x00	; 0
    70a4:	25 c0       	rjmp	.+74     	; 0x70f0 <vfprintf+0x260>
    70a6:	f2 2f       	mov	r31, r18
    70a8:	f9 7f       	andi	r31, 0xF9	; 249
    70aa:	bf 2e       	mov	r11, r31
    70ac:	8f 36       	cpi	r24, 0x6F	; 111
    70ae:	c1 f0       	breq	.+48     	; 0x70e0 <vfprintf+0x250>
    70b0:	18 f4       	brcc	.+6      	; 0x70b8 <vfprintf+0x228>
    70b2:	88 35       	cpi	r24, 0x58	; 88
    70b4:	79 f0       	breq	.+30     	; 0x70d4 <vfprintf+0x244>
    70b6:	b4 c0       	rjmp	.+360    	; 0x7220 <vfprintf+0x390>
    70b8:	80 37       	cpi	r24, 0x70	; 112
    70ba:	19 f0       	breq	.+6      	; 0x70c2 <vfprintf+0x232>
    70bc:	88 37       	cpi	r24, 0x78	; 120
    70be:	21 f0       	breq	.+8      	; 0x70c8 <vfprintf+0x238>
    70c0:	af c0       	rjmp	.+350    	; 0x7220 <vfprintf+0x390>
    70c2:	2f 2f       	mov	r18, r31
    70c4:	20 61       	ori	r18, 0x10	; 16
    70c6:	b2 2e       	mov	r11, r18
    70c8:	b4 fe       	sbrs	r11, 4
    70ca:	0d c0       	rjmp	.+26     	; 0x70e6 <vfprintf+0x256>
    70cc:	8b 2d       	mov	r24, r11
    70ce:	84 60       	ori	r24, 0x04	; 4
    70d0:	b8 2e       	mov	r11, r24
    70d2:	09 c0       	rjmp	.+18     	; 0x70e6 <vfprintf+0x256>
    70d4:	24 ff       	sbrs	r18, 4
    70d6:	0a c0       	rjmp	.+20     	; 0x70ec <vfprintf+0x25c>
    70d8:	9f 2f       	mov	r25, r31
    70da:	96 60       	ori	r25, 0x06	; 6
    70dc:	b9 2e       	mov	r11, r25
    70de:	06 c0       	rjmp	.+12     	; 0x70ec <vfprintf+0x25c>
    70e0:	28 e0       	ldi	r18, 0x08	; 8
    70e2:	30 e0       	ldi	r19, 0x00	; 0
    70e4:	05 c0       	rjmp	.+10     	; 0x70f0 <vfprintf+0x260>
    70e6:	20 e1       	ldi	r18, 0x10	; 16
    70e8:	30 e0       	ldi	r19, 0x00	; 0
    70ea:	02 c0       	rjmp	.+4      	; 0x70f0 <vfprintf+0x260>
    70ec:	20 e1       	ldi	r18, 0x10	; 16
    70ee:	32 e0       	ldi	r19, 0x02	; 2
    70f0:	f8 01       	movw	r30, r16
    70f2:	b7 fe       	sbrs	r11, 7
    70f4:	07 c0       	rjmp	.+14     	; 0x7104 <vfprintf+0x274>
    70f6:	60 81       	ld	r22, Z
    70f8:	71 81       	ldd	r23, Z+1	; 0x01
    70fa:	82 81       	ldd	r24, Z+2	; 0x02
    70fc:	93 81       	ldd	r25, Z+3	; 0x03
    70fe:	0c 5f       	subi	r16, 0xFC	; 252
    7100:	1f 4f       	sbci	r17, 0xFF	; 255
    7102:	06 c0       	rjmp	.+12     	; 0x7110 <vfprintf+0x280>
    7104:	60 81       	ld	r22, Z
    7106:	71 81       	ldd	r23, Z+1	; 0x01
    7108:	80 e0       	ldi	r24, 0x00	; 0
    710a:	90 e0       	ldi	r25, 0x00	; 0
    710c:	0e 5f       	subi	r16, 0xFE	; 254
    710e:	1f 4f       	sbci	r17, 0xFF	; 255
    7110:	a4 01       	movw	r20, r8
    7112:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__ultoa_invert>
    7116:	a8 2e       	mov	r10, r24
    7118:	a8 18       	sub	r10, r8
    711a:	fb 2d       	mov	r31, r11
    711c:	ff 77       	andi	r31, 0x7F	; 127
    711e:	bf 2e       	mov	r11, r31
    7120:	b6 fe       	sbrs	r11, 6
    7122:	0b c0       	rjmp	.+22     	; 0x713a <vfprintf+0x2aa>
    7124:	2b 2d       	mov	r18, r11
    7126:	2e 7f       	andi	r18, 0xFE	; 254
    7128:	a5 14       	cp	r10, r5
    712a:	50 f4       	brcc	.+20     	; 0x7140 <vfprintf+0x2b0>
    712c:	b4 fe       	sbrs	r11, 4
    712e:	0a c0       	rjmp	.+20     	; 0x7144 <vfprintf+0x2b4>
    7130:	b2 fc       	sbrc	r11, 2
    7132:	08 c0       	rjmp	.+16     	; 0x7144 <vfprintf+0x2b4>
    7134:	2b 2d       	mov	r18, r11
    7136:	2e 7e       	andi	r18, 0xEE	; 238
    7138:	05 c0       	rjmp	.+10     	; 0x7144 <vfprintf+0x2b4>
    713a:	7a 2c       	mov	r7, r10
    713c:	2b 2d       	mov	r18, r11
    713e:	03 c0       	rjmp	.+6      	; 0x7146 <vfprintf+0x2b6>
    7140:	7a 2c       	mov	r7, r10
    7142:	01 c0       	rjmp	.+2      	; 0x7146 <vfprintf+0x2b6>
    7144:	75 2c       	mov	r7, r5
    7146:	24 ff       	sbrs	r18, 4
    7148:	0d c0       	rjmp	.+26     	; 0x7164 <vfprintf+0x2d4>
    714a:	fe 01       	movw	r30, r28
    714c:	ea 0d       	add	r30, r10
    714e:	f1 1d       	adc	r31, r1
    7150:	80 81       	ld	r24, Z
    7152:	80 33       	cpi	r24, 0x30	; 48
    7154:	11 f4       	brne	.+4      	; 0x715a <vfprintf+0x2ca>
    7156:	29 7e       	andi	r18, 0xE9	; 233
    7158:	09 c0       	rjmp	.+18     	; 0x716c <vfprintf+0x2dc>
    715a:	22 ff       	sbrs	r18, 2
    715c:	06 c0       	rjmp	.+12     	; 0x716a <vfprintf+0x2da>
    715e:	73 94       	inc	r7
    7160:	73 94       	inc	r7
    7162:	04 c0       	rjmp	.+8      	; 0x716c <vfprintf+0x2dc>
    7164:	82 2f       	mov	r24, r18
    7166:	86 78       	andi	r24, 0x86	; 134
    7168:	09 f0       	breq	.+2      	; 0x716c <vfprintf+0x2dc>
    716a:	73 94       	inc	r7
    716c:	23 fd       	sbrc	r18, 3
    716e:	13 c0       	rjmp	.+38     	; 0x7196 <vfprintf+0x306>
    7170:	20 ff       	sbrs	r18, 0
    7172:	06 c0       	rjmp	.+12     	; 0x7180 <vfprintf+0x2f0>
    7174:	5a 2c       	mov	r5, r10
    7176:	73 14       	cp	r7, r3
    7178:	18 f4       	brcc	.+6      	; 0x7180 <vfprintf+0x2f0>
    717a:	53 0c       	add	r5, r3
    717c:	57 18       	sub	r5, r7
    717e:	73 2c       	mov	r7, r3
    7180:	73 14       	cp	r7, r3
    7182:	68 f4       	brcc	.+26     	; 0x719e <vfprintf+0x30e>
    7184:	b7 01       	movw	r22, r14
    7186:	80 e2       	ldi	r24, 0x20	; 32
    7188:	90 e0       	ldi	r25, 0x00	; 0
    718a:	2c 87       	std	Y+12, r18	; 0x0c
    718c:	0e 94 b3 3a 	call	0x7566	; 0x7566 <fputc>
    7190:	73 94       	inc	r7
    7192:	2c 85       	ldd	r18, Y+12	; 0x0c
    7194:	f5 cf       	rjmp	.-22     	; 0x7180 <vfprintf+0x2f0>
    7196:	73 14       	cp	r7, r3
    7198:	10 f4       	brcc	.+4      	; 0x719e <vfprintf+0x30e>
    719a:	37 18       	sub	r3, r7
    719c:	01 c0       	rjmp	.+2      	; 0x71a0 <vfprintf+0x310>
    719e:	31 2c       	mov	r3, r1
    71a0:	24 ff       	sbrs	r18, 4
    71a2:	12 c0       	rjmp	.+36     	; 0x71c8 <vfprintf+0x338>
    71a4:	b7 01       	movw	r22, r14
    71a6:	80 e3       	ldi	r24, 0x30	; 48
    71a8:	90 e0       	ldi	r25, 0x00	; 0
    71aa:	2c 87       	std	Y+12, r18	; 0x0c
    71ac:	0e 94 b3 3a 	call	0x7566	; 0x7566 <fputc>
    71b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    71b2:	22 ff       	sbrs	r18, 2
    71b4:	17 c0       	rjmp	.+46     	; 0x71e4 <vfprintf+0x354>
    71b6:	21 ff       	sbrs	r18, 1
    71b8:	03 c0       	rjmp	.+6      	; 0x71c0 <vfprintf+0x330>
    71ba:	88 e5       	ldi	r24, 0x58	; 88
    71bc:	90 e0       	ldi	r25, 0x00	; 0
    71be:	02 c0       	rjmp	.+4      	; 0x71c4 <vfprintf+0x334>
    71c0:	88 e7       	ldi	r24, 0x78	; 120
    71c2:	90 e0       	ldi	r25, 0x00	; 0
    71c4:	b7 01       	movw	r22, r14
    71c6:	0c c0       	rjmp	.+24     	; 0x71e0 <vfprintf+0x350>
    71c8:	82 2f       	mov	r24, r18
    71ca:	86 78       	andi	r24, 0x86	; 134
    71cc:	59 f0       	breq	.+22     	; 0x71e4 <vfprintf+0x354>
    71ce:	21 fd       	sbrc	r18, 1
    71d0:	02 c0       	rjmp	.+4      	; 0x71d6 <vfprintf+0x346>
    71d2:	80 e2       	ldi	r24, 0x20	; 32
    71d4:	01 c0       	rjmp	.+2      	; 0x71d8 <vfprintf+0x348>
    71d6:	8b e2       	ldi	r24, 0x2B	; 43
    71d8:	27 fd       	sbrc	r18, 7
    71da:	8d e2       	ldi	r24, 0x2D	; 45
    71dc:	b7 01       	movw	r22, r14
    71de:	90 e0       	ldi	r25, 0x00	; 0
    71e0:	0e 94 b3 3a 	call	0x7566	; 0x7566 <fputc>
    71e4:	a5 14       	cp	r10, r5
    71e6:	38 f4       	brcc	.+14     	; 0x71f6 <vfprintf+0x366>
    71e8:	b7 01       	movw	r22, r14
    71ea:	80 e3       	ldi	r24, 0x30	; 48
    71ec:	90 e0       	ldi	r25, 0x00	; 0
    71ee:	0e 94 b3 3a 	call	0x7566	; 0x7566 <fputc>
    71f2:	5a 94       	dec	r5
    71f4:	f7 cf       	rjmp	.-18     	; 0x71e4 <vfprintf+0x354>
    71f6:	aa 94       	dec	r10
    71f8:	f4 01       	movw	r30, r8
    71fa:	ea 0d       	add	r30, r10
    71fc:	f1 1d       	adc	r31, r1
    71fe:	80 81       	ld	r24, Z
    7200:	b7 01       	movw	r22, r14
    7202:	90 e0       	ldi	r25, 0x00	; 0
    7204:	0e 94 b3 3a 	call	0x7566	; 0x7566 <fputc>
    7208:	a1 10       	cpse	r10, r1
    720a:	f5 cf       	rjmp	.-22     	; 0x71f6 <vfprintf+0x366>
    720c:	33 20       	and	r3, r3
    720e:	09 f4       	brne	.+2      	; 0x7212 <vfprintf+0x382>
    7210:	51 ce       	rjmp	.-862    	; 0x6eb4 <vfprintf+0x24>
    7212:	b7 01       	movw	r22, r14
    7214:	80 e2       	ldi	r24, 0x20	; 32
    7216:	90 e0       	ldi	r25, 0x00	; 0
    7218:	0e 94 b3 3a 	call	0x7566	; 0x7566 <fputc>
    721c:	3a 94       	dec	r3
    721e:	f6 cf       	rjmp	.-20     	; 0x720c <vfprintf+0x37c>
    7220:	f7 01       	movw	r30, r14
    7222:	86 81       	ldd	r24, Z+6	; 0x06
    7224:	97 81       	ldd	r25, Z+7	; 0x07
    7226:	02 c0       	rjmp	.+4      	; 0x722c <vfprintf+0x39c>
    7228:	8f ef       	ldi	r24, 0xFF	; 255
    722a:	9f ef       	ldi	r25, 0xFF	; 255
    722c:	2c 96       	adiw	r28, 0x0c	; 12
    722e:	e2 e1       	ldi	r30, 0x12	; 18
    7230:	0c 94 8a 3b 	jmp	0x7714	; 0x7714 <__epilogue_restores__>

00007234 <strtod>:
    7234:	a0 e0       	ldi	r26, 0x00	; 0
    7236:	b0 e0       	ldi	r27, 0x00	; 0
    7238:	e0 e2       	ldi	r30, 0x20	; 32
    723a:	f9 e3       	ldi	r31, 0x39	; 57
    723c:	0c 94 74 3b 	jmp	0x76e8	; 0x76e8 <__prologue_saves__+0xc>
    7240:	8b 01       	movw	r16, r22
    7242:	61 15       	cp	r22, r1
    7244:	71 05       	cpc	r23, r1
    7246:	21 f0       	breq	.+8      	; 0x7250 <strtod+0x1c>
    7248:	db 01       	movw	r26, r22
    724a:	8c 93       	st	X, r24
    724c:	11 96       	adiw	r26, 0x01	; 1
    724e:	9c 93       	st	X, r25
    7250:	ec 01       	movw	r28, r24
    7252:	5e 01       	movw	r10, r28
    7254:	bf ef       	ldi	r27, 0xFF	; 255
    7256:	ab 1a       	sub	r10, r27
    7258:	bb 0a       	sbc	r11, r27
    725a:	75 01       	movw	r14, r10
    725c:	c8 80       	ld	r12, Y
    725e:	8c 2d       	mov	r24, r12
    7260:	90 e0       	ldi	r25, 0x00	; 0
    7262:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <isspace>
    7266:	89 2b       	or	r24, r25
    7268:	11 f0       	breq	.+4      	; 0x726e <strtod+0x3a>
    726a:	e5 01       	movw	r28, r10
    726c:	f2 cf       	rjmp	.-28     	; 0x7252 <strtod+0x1e>
    726e:	ed e2       	ldi	r30, 0x2D	; 45
    7270:	ce 12       	cpse	r12, r30
    7272:	08 c0       	rjmp	.+16     	; 0x7284 <strtod+0x50>
    7274:	7e 01       	movw	r14, r28
    7276:	f2 e0       	ldi	r31, 0x02	; 2
    7278:	ef 0e       	add	r14, r31
    727a:	f1 1c       	adc	r15, r1
    727c:	c9 80       	ldd	r12, Y+1	; 0x01
    727e:	dd 24       	eor	r13, r13
    7280:	d3 94       	inc	r13
    7282:	09 c0       	rjmp	.+18     	; 0x7296 <strtod+0x62>
    7284:	2b e2       	ldi	r18, 0x2B	; 43
    7286:	c2 12       	cpse	r12, r18
    7288:	05 c0       	rjmp	.+10     	; 0x7294 <strtod+0x60>
    728a:	7e 01       	movw	r14, r28
    728c:	42 e0       	ldi	r20, 0x02	; 2
    728e:	e4 0e       	add	r14, r20
    7290:	f1 1c       	adc	r15, r1
    7292:	c9 80       	ldd	r12, Y+1	; 0x01
    7294:	d1 2c       	mov	r13, r1
    7296:	e7 01       	movw	r28, r14
    7298:	21 97       	sbiw	r28, 0x01	; 1
    729a:	43 e0       	ldi	r20, 0x03	; 3
    729c:	50 e0       	ldi	r21, 0x00	; 0
    729e:	6a ea       	ldi	r22, 0xAA	; 170
    72a0:	7b e1       	ldi	r23, 0x1B	; 27
    72a2:	ce 01       	movw	r24, r28
    72a4:	0e 94 85 3a 	call	0x750a	; 0x750a <strncasecmp_P>
    72a8:	89 2b       	or	r24, r25
    72aa:	c1 f4       	brne	.+48     	; 0x72dc <strtod+0xa8>
    72ac:	23 96       	adiw	r28, 0x03	; 3
    72ae:	45 e0       	ldi	r20, 0x05	; 5
    72b0:	50 e0       	ldi	r21, 0x00	; 0
    72b2:	65 ea       	ldi	r22, 0xA5	; 165
    72b4:	7b e1       	ldi	r23, 0x1B	; 27
    72b6:	ce 01       	movw	r24, r28
    72b8:	0e 94 85 3a 	call	0x750a	; 0x750a <strncasecmp_P>
    72bc:	89 2b       	or	r24, r25
    72be:	09 f4       	brne	.+2      	; 0x72c2 <strtod+0x8e>
    72c0:	25 96       	adiw	r28, 0x05	; 5
    72c2:	01 15       	cp	r16, r1
    72c4:	11 05       	cpc	r17, r1
    72c6:	19 f0       	breq	.+6      	; 0x72ce <strtod+0x9a>
    72c8:	d8 01       	movw	r26, r16
    72ca:	cd 93       	st	X+, r28
    72cc:	dc 93       	st	X, r29
    72ce:	d1 10       	cpse	r13, r1
    72d0:	06 c1       	rjmp	.+524    	; 0x74de <strtod+0x2aa>
    72d2:	60 e0       	ldi	r22, 0x00	; 0
    72d4:	70 e0       	ldi	r23, 0x00	; 0
    72d6:	80 e8       	ldi	r24, 0x80	; 128
    72d8:	9f e7       	ldi	r25, 0x7F	; 127
    72da:	0a c1       	rjmp	.+532    	; 0x74f0 <strtod+0x2bc>
    72dc:	43 e0       	ldi	r20, 0x03	; 3
    72de:	50 e0       	ldi	r21, 0x00	; 0
    72e0:	62 ea       	ldi	r22, 0xA2	; 162
    72e2:	7b e1       	ldi	r23, 0x1B	; 27
    72e4:	ce 01       	movw	r24, r28
    72e6:	0e 94 85 3a 	call	0x750a	; 0x750a <strncasecmp_P>
    72ea:	89 2b       	or	r24, r25
    72ec:	59 f4       	brne	.+22     	; 0x7304 <strtod+0xd0>
    72ee:	01 15       	cp	r16, r1
    72f0:	11 05       	cpc	r17, r1
    72f2:	09 f4       	brne	.+2      	; 0x72f6 <strtod+0xc2>
    72f4:	f9 c0       	rjmp	.+498    	; 0x74e8 <strtod+0x2b4>
    72f6:	b2 e0       	ldi	r27, 0x02	; 2
    72f8:	eb 0e       	add	r14, r27
    72fa:	f1 1c       	adc	r15, r1
    72fc:	f8 01       	movw	r30, r16
    72fe:	f1 82       	std	Z+1, r15	; 0x01
    7300:	e0 82       	st	Z, r14
    7302:	f2 c0       	rjmp	.+484    	; 0x74e8 <strtod+0x2b4>
    7304:	f7 01       	movw	r30, r14
    7306:	60 e0       	ldi	r22, 0x00	; 0
    7308:	70 e0       	ldi	r23, 0x00	; 0
    730a:	cb 01       	movw	r24, r22
    730c:	c0 e0       	ldi	r28, 0x00	; 0
    730e:	d0 e0       	ldi	r29, 0x00	; 0
    7310:	7f 01       	movw	r14, r30
    7312:	a0 ed       	ldi	r26, 0xD0	; 208
    7314:	aa 2e       	mov	r10, r26
    7316:	ac 0c       	add	r10, r12
    7318:	29 e0       	ldi	r18, 0x09	; 9
    731a:	2a 15       	cp	r18, r10
    731c:	30 f1       	brcs	.+76     	; 0x736a <strtod+0x136>
    731e:	4d 2d       	mov	r20, r13
    7320:	42 60       	ori	r20, 0x02	; 2
    7322:	b4 2e       	mov	r11, r20
    7324:	2d 2d       	mov	r18, r13
    7326:	28 70       	andi	r18, 0x08	; 8
    7328:	d2 fe       	sbrs	r13, 2
    732a:	04 c0       	rjmp	.+8      	; 0x7334 <strtod+0x100>
    732c:	21 11       	cpse	r18, r1
    732e:	25 c0       	rjmp	.+74     	; 0x737a <strtod+0x146>
    7330:	21 96       	adiw	r28, 0x01	; 1
    7332:	23 c0       	rjmp	.+70     	; 0x737a <strtod+0x146>
    7334:	21 11       	cpse	r18, r1
    7336:	21 97       	sbiw	r28, 0x01	; 1
    7338:	a5 e0       	ldi	r26, 0x05	; 5
    733a:	b0 e0       	ldi	r27, 0x00	; 0
    733c:	9b 01       	movw	r18, r22
    733e:	ac 01       	movw	r20, r24
    7340:	0e 94 49 36 	call	0x6c92	; 0x6c92 <__muluhisi3>
    7344:	66 0f       	add	r22, r22
    7346:	77 1f       	adc	r23, r23
    7348:	88 1f       	adc	r24, r24
    734a:	99 1f       	adc	r25, r25
    734c:	6a 0d       	add	r22, r10
    734e:	71 1d       	adc	r23, r1
    7350:	81 1d       	adc	r24, r1
    7352:	91 1d       	adc	r25, r1
    7354:	68 39       	cpi	r22, 0x98	; 152
    7356:	a9 e9       	ldi	r26, 0x99	; 153
    7358:	7a 07       	cpc	r23, r26
    735a:	8a 07       	cpc	r24, r26
    735c:	a9 e1       	ldi	r26, 0x19	; 25
    735e:	9a 07       	cpc	r25, r26
    7360:	60 f0       	brcs	.+24     	; 0x737a <strtod+0x146>
    7362:	bd 2d       	mov	r27, r13
    7364:	b6 60       	ori	r27, 0x06	; 6
    7366:	bb 2e       	mov	r11, r27
    7368:	08 c0       	rjmp	.+16     	; 0x737a <strtod+0x146>
    736a:	2e ef       	ldi	r18, 0xFE	; 254
    736c:	a2 12       	cpse	r10, r18
    736e:	0a c0       	rjmp	.+20     	; 0x7384 <strtod+0x150>
    7370:	d3 fc       	sbrc	r13, 3
    7372:	50 c0       	rjmp	.+160    	; 0x7414 <strtod+0x1e0>
    7374:	4d 2d       	mov	r20, r13
    7376:	48 60       	ori	r20, 0x08	; 8
    7378:	b4 2e       	mov	r11, r20
    737a:	31 96       	adiw	r30, 0x01	; 1
    737c:	d7 01       	movw	r26, r14
    737e:	cc 90       	ld	r12, X
    7380:	db 2c       	mov	r13, r11
    7382:	c6 cf       	rjmp	.-116    	; 0x7310 <strtod+0xdc>
    7384:	2c 2d       	mov	r18, r12
    7386:	2f 7d       	andi	r18, 0xDF	; 223
    7388:	25 34       	cpi	r18, 0x45	; 69
    738a:	09 f0       	breq	.+2      	; 0x738e <strtod+0x15a>
    738c:	43 c0       	rjmp	.+134    	; 0x7414 <strtod+0x1e0>
    738e:	a0 81       	ld	r26, Z
    7390:	ad 32       	cpi	r26, 0x2D	; 45
    7392:	41 f4       	brne	.+16     	; 0x73a4 <strtod+0x170>
    7394:	bd 2d       	mov	r27, r13
    7396:	b0 61       	ori	r27, 0x10	; 16
    7398:	db 2e       	mov	r13, r27
    739a:	7f 01       	movw	r14, r30
    739c:	22 e0       	ldi	r18, 0x02	; 2
    739e:	e2 0e       	add	r14, r18
    73a0:	f1 1c       	adc	r15, r1
    73a2:	0c c0       	rjmp	.+24     	; 0x73bc <strtod+0x188>
    73a4:	7f 01       	movw	r14, r30
    73a6:	ab 32       	cpi	r26, 0x2B	; 43
    73a8:	31 f0       	breq	.+12     	; 0x73b6 <strtod+0x182>
    73aa:	4f ef       	ldi	r20, 0xFF	; 255
    73ac:	e4 1a       	sub	r14, r20
    73ae:	f4 0a       	sbc	r15, r20
    73b0:	21 e0       	ldi	r18, 0x01	; 1
    73b2:	30 e0       	ldi	r19, 0x00	; 0
    73b4:	06 c0       	rjmp	.+12     	; 0x73c2 <strtod+0x18e>
    73b6:	a2 e0       	ldi	r26, 0x02	; 2
    73b8:	ea 0e       	add	r14, r26
    73ba:	f1 1c       	adc	r15, r1
    73bc:	a1 81       	ldd	r26, Z+1	; 0x01
    73be:	22 e0       	ldi	r18, 0x02	; 2
    73c0:	30 e0       	ldi	r19, 0x00	; 0
    73c2:	a0 53       	subi	r26, 0x30	; 48
    73c4:	aa 30       	cpi	r26, 0x0A	; 10
    73c6:	18 f0       	brcs	.+6      	; 0x73ce <strtod+0x19a>
    73c8:	e2 1a       	sub	r14, r18
    73ca:	f3 0a       	sbc	r15, r19
    73cc:	23 c0       	rjmp	.+70     	; 0x7414 <strtod+0x1e0>
    73ce:	f7 01       	movw	r30, r14
    73d0:	20 e0       	ldi	r18, 0x00	; 0
    73d2:	30 e0       	ldi	r19, 0x00	; 0
    73d4:	20 38       	cpi	r18, 0x80	; 128
    73d6:	bc e0       	ldi	r27, 0x0C	; 12
    73d8:	3b 07       	cpc	r19, r27
    73da:	5c f4       	brge	.+22     	; 0x73f2 <strtod+0x1be>
    73dc:	a9 01       	movw	r20, r18
    73de:	44 0f       	add	r20, r20
    73e0:	55 1f       	adc	r21, r21
    73e2:	44 0f       	add	r20, r20
    73e4:	55 1f       	adc	r21, r21
    73e6:	24 0f       	add	r18, r20
    73e8:	35 1f       	adc	r19, r21
    73ea:	22 0f       	add	r18, r18
    73ec:	33 1f       	adc	r19, r19
    73ee:	2a 0f       	add	r18, r26
    73f0:	31 1d       	adc	r19, r1
    73f2:	af 01       	movw	r20, r30
    73f4:	4f 5f       	subi	r20, 0xFF	; 255
    73f6:	5f 4f       	sbci	r21, 0xFF	; 255
    73f8:	7a 01       	movw	r14, r20
    73fa:	a0 81       	ld	r26, Z
    73fc:	a0 53       	subi	r26, 0x30	; 48
    73fe:	aa 30       	cpi	r26, 0x0A	; 10
    7400:	10 f4       	brcc	.+4      	; 0x7406 <strtod+0x1d2>
    7402:	fa 01       	movw	r30, r20
    7404:	e7 cf       	rjmp	.-50     	; 0x73d4 <strtod+0x1a0>
    7406:	d4 fe       	sbrs	r13, 4
    7408:	03 c0       	rjmp	.+6      	; 0x7410 <strtod+0x1dc>
    740a:	31 95       	neg	r19
    740c:	21 95       	neg	r18
    740e:	31 09       	sbc	r19, r1
    7410:	c2 0f       	add	r28, r18
    7412:	d3 1f       	adc	r29, r19
    7414:	d1 fe       	sbrs	r13, 1
    7416:	09 c0       	rjmp	.+18     	; 0x742a <strtod+0x1f6>
    7418:	01 15       	cp	r16, r1
    741a:	11 05       	cpc	r17, r1
    741c:	31 f0       	breq	.+12     	; 0x742a <strtod+0x1f6>
    741e:	e1 e0       	ldi	r30, 0x01	; 1
    7420:	ee 1a       	sub	r14, r30
    7422:	f1 08       	sbc	r15, r1
    7424:	d8 01       	movw	r26, r16
    7426:	ed 92       	st	X+, r14
    7428:	fc 92       	st	X, r15
    742a:	0e 94 07 34 	call	0x680e	; 0x680e <__floatunsisf>
    742e:	2d 2d       	mov	r18, r13
    7430:	23 70       	andi	r18, 0x03	; 3
    7432:	23 30       	cpi	r18, 0x03	; 3
    7434:	19 f0       	breq	.+6      	; 0x743c <strtod+0x208>
    7436:	4b 01       	movw	r8, r22
    7438:	5c 01       	movw	r10, r24
    743a:	06 c0       	rjmp	.+12     	; 0x7448 <strtod+0x214>
    743c:	4b 01       	movw	r8, r22
    743e:	5c 01       	movw	r10, r24
    7440:	b7 fa       	bst	r11, 7
    7442:	b0 94       	com	r11
    7444:	b7 f8       	bld	r11, 7
    7446:	b0 94       	com	r11
    7448:	20 e0       	ldi	r18, 0x00	; 0
    744a:	30 e0       	ldi	r19, 0x00	; 0
    744c:	a9 01       	movw	r20, r18
    744e:	c5 01       	movw	r24, r10
    7450:	b4 01       	movw	r22, r8
    7452:	0e 94 43 3b 	call	0x7686	; 0x7686 <__cmpsf2>
    7456:	88 23       	and	r24, r24
    7458:	09 f4       	brne	.+2      	; 0x745c <strtod+0x228>
    745a:	3e c0       	rjmp	.+124    	; 0x74d8 <strtod+0x2a4>
    745c:	d7 ff       	sbrs	r29, 7
    745e:	06 c0       	rjmp	.+12     	; 0x746c <strtod+0x238>
    7460:	d1 95       	neg	r29
    7462:	c1 95       	neg	r28
    7464:	d1 09       	sbc	r29, r1
    7466:	01 ec       	ldi	r16, 0xC1	; 193
    7468:	1b e1       	ldi	r17, 0x1B	; 27
    746a:	02 c0       	rjmp	.+4      	; 0x7470 <strtod+0x23c>
    746c:	09 ed       	ldi	r16, 0xD9	; 217
    746e:	1b e1       	ldi	r17, 0x1B	; 27
    7470:	68 01       	movw	r12, r16
    7472:	b8 e1       	ldi	r27, 0x18	; 24
    7474:	cb 1a       	sub	r12, r27
    7476:	d1 08       	sbc	r13, r1
    7478:	90 e2       	ldi	r25, 0x20	; 32
    747a:	e9 2e       	mov	r14, r25
    747c:	f1 2c       	mov	r15, r1
    747e:	ce 15       	cp	r28, r14
    7480:	df 05       	cpc	r29, r15
    7482:	74 f0       	brlt	.+28     	; 0x74a0 <strtod+0x26c>
    7484:	f8 01       	movw	r30, r16
    7486:	25 91       	lpm	r18, Z+
    7488:	35 91       	lpm	r19, Z+
    748a:	45 91       	lpm	r20, Z+
    748c:	54 91       	lpm	r21, Z
    748e:	c5 01       	movw	r24, r10
    7490:	b4 01       	movw	r22, r8
    7492:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__mulsf3>
    7496:	4b 01       	movw	r8, r22
    7498:	5c 01       	movw	r10, r24
    749a:	ce 19       	sub	r28, r14
    749c:	df 09       	sbc	r29, r15
    749e:	ef cf       	rjmp	.-34     	; 0x747e <strtod+0x24a>
    74a0:	04 50       	subi	r16, 0x04	; 4
    74a2:	11 09       	sbc	r17, r1
    74a4:	f5 94       	asr	r15
    74a6:	e7 94       	ror	r14
    74a8:	0c 15       	cp	r16, r12
    74aa:	1d 05       	cpc	r17, r13
    74ac:	41 f7       	brne	.-48     	; 0x747e <strtod+0x24a>
    74ae:	8a 2d       	mov	r24, r10
    74b0:	88 0f       	add	r24, r24
    74b2:	8b 2d       	mov	r24, r11
    74b4:	88 1f       	adc	r24, r24
    74b6:	8f 3f       	cpi	r24, 0xFF	; 255
    74b8:	49 f0       	breq	.+18     	; 0x74cc <strtod+0x298>
    74ba:	20 e0       	ldi	r18, 0x00	; 0
    74bc:	30 e0       	ldi	r19, 0x00	; 0
    74be:	a9 01       	movw	r20, r18
    74c0:	c5 01       	movw	r24, r10
    74c2:	b4 01       	movw	r22, r8
    74c4:	0e 94 43 3b 	call	0x7686	; 0x7686 <__cmpsf2>
    74c8:	81 11       	cpse	r24, r1
    74ca:	06 c0       	rjmp	.+12     	; 0x74d8 <strtod+0x2a4>
    74cc:	82 e2       	ldi	r24, 0x22	; 34
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	90 93 cb 02 	sts	0x02CB, r25
    74d4:	80 93 ca 02 	sts	0x02CA, r24
    74d8:	c5 01       	movw	r24, r10
    74da:	b4 01       	movw	r22, r8
    74dc:	09 c0       	rjmp	.+18     	; 0x74f0 <strtod+0x2bc>
    74de:	60 e0       	ldi	r22, 0x00	; 0
    74e0:	70 e0       	ldi	r23, 0x00	; 0
    74e2:	80 e8       	ldi	r24, 0x80	; 128
    74e4:	9f ef       	ldi	r25, 0xFF	; 255
    74e6:	04 c0       	rjmp	.+8      	; 0x74f0 <strtod+0x2bc>
    74e8:	60 e0       	ldi	r22, 0x00	; 0
    74ea:	70 e0       	ldi	r23, 0x00	; 0
    74ec:	80 ec       	ldi	r24, 0xC0	; 192
    74ee:	9f e7       	ldi	r25, 0x7F	; 127
    74f0:	cd b7       	in	r28, 0x3d	; 61
    74f2:	de b7       	in	r29, 0x3e	; 62
    74f4:	ec e0       	ldi	r30, 0x0C	; 12
    74f6:	0c 94 90 3b 	jmp	0x7720	; 0x7720 <__epilogue_restores__+0xc>

000074fa <isspace>:
    74fa:	91 11       	cpse	r25, r1
    74fc:	ec c0       	rjmp	.+472    	; 0x76d6 <__ctype_isfalse>
    74fe:	80 32       	cpi	r24, 0x20	; 32
    7500:	19 f0       	breq	.+6      	; 0x7508 <isspace+0xe>
    7502:	89 50       	subi	r24, 0x09	; 9
    7504:	85 50       	subi	r24, 0x05	; 5
    7506:	d0 f7       	brcc	.-12     	; 0x74fc <isspace+0x2>
    7508:	08 95       	ret

0000750a <strncasecmp_P>:
    750a:	fb 01       	movw	r30, r22
    750c:	dc 01       	movw	r26, r24
    750e:	41 50       	subi	r20, 0x01	; 1
    7510:	50 40       	sbci	r21, 0x00	; 0
    7512:	88 f0       	brcs	.+34     	; 0x7536 <strncasecmp_P+0x2c>
    7514:	8d 91       	ld	r24, X+
    7516:	81 34       	cpi	r24, 0x41	; 65
    7518:	1c f0       	brlt	.+6      	; 0x7520 <strncasecmp_P+0x16>
    751a:	8b 35       	cpi	r24, 0x5B	; 91
    751c:	0c f4       	brge	.+2      	; 0x7520 <strncasecmp_P+0x16>
    751e:	80 5e       	subi	r24, 0xE0	; 224
    7520:	65 91       	lpm	r22, Z+
    7522:	61 34       	cpi	r22, 0x41	; 65
    7524:	1c f0       	brlt	.+6      	; 0x752c <strncasecmp_P+0x22>
    7526:	6b 35       	cpi	r22, 0x5B	; 91
    7528:	0c f4       	brge	.+2      	; 0x752c <strncasecmp_P+0x22>
    752a:	60 5e       	subi	r22, 0xE0	; 224
    752c:	86 1b       	sub	r24, r22
    752e:	61 11       	cpse	r22, r1
    7530:	71 f3       	breq	.-36     	; 0x750e <strncasecmp_P+0x4>
    7532:	99 0b       	sbc	r25, r25
    7534:	08 95       	ret
    7536:	88 1b       	sub	r24, r24
    7538:	fc cf       	rjmp	.-8      	; 0x7532 <strncasecmp_P+0x28>

0000753a <strnlen_P>:
    753a:	fc 01       	movw	r30, r24
    753c:	05 90       	lpm	r0, Z+
    753e:	61 50       	subi	r22, 0x01	; 1
    7540:	70 40       	sbci	r23, 0x00	; 0
    7542:	01 10       	cpse	r0, r1
    7544:	d8 f7       	brcc	.-10     	; 0x753c <strnlen_P+0x2>
    7546:	80 95       	com	r24
    7548:	90 95       	com	r25
    754a:	8e 0f       	add	r24, r30
    754c:	9f 1f       	adc	r25, r31
    754e:	08 95       	ret

00007550 <strnlen>:
    7550:	fc 01       	movw	r30, r24
    7552:	61 50       	subi	r22, 0x01	; 1
    7554:	70 40       	sbci	r23, 0x00	; 0
    7556:	01 90       	ld	r0, Z+
    7558:	01 10       	cpse	r0, r1
    755a:	d8 f7       	brcc	.-10     	; 0x7552 <strnlen+0x2>
    755c:	80 95       	com	r24
    755e:	90 95       	com	r25
    7560:	8e 0f       	add	r24, r30
    7562:	9f 1f       	adc	r25, r31
    7564:	08 95       	ret

00007566 <fputc>:
    7566:	0f 93       	push	r16
    7568:	1f 93       	push	r17
    756a:	cf 93       	push	r28
    756c:	df 93       	push	r29
    756e:	18 2f       	mov	r17, r24
    7570:	09 2f       	mov	r16, r25
    7572:	eb 01       	movw	r28, r22
    7574:	8b 81       	ldd	r24, Y+3	; 0x03
    7576:	81 fd       	sbrc	r24, 1
    7578:	03 c0       	rjmp	.+6      	; 0x7580 <fputc+0x1a>
    757a:	8f ef       	ldi	r24, 0xFF	; 255
    757c:	9f ef       	ldi	r25, 0xFF	; 255
    757e:	20 c0       	rjmp	.+64     	; 0x75c0 <fputc+0x5a>
    7580:	82 ff       	sbrs	r24, 2
    7582:	10 c0       	rjmp	.+32     	; 0x75a4 <fputc+0x3e>
    7584:	4e 81       	ldd	r20, Y+6	; 0x06
    7586:	5f 81       	ldd	r21, Y+7	; 0x07
    7588:	2c 81       	ldd	r18, Y+4	; 0x04
    758a:	3d 81       	ldd	r19, Y+5	; 0x05
    758c:	42 17       	cp	r20, r18
    758e:	53 07       	cpc	r21, r19
    7590:	7c f4       	brge	.+30     	; 0x75b0 <fputc+0x4a>
    7592:	e8 81       	ld	r30, Y
    7594:	f9 81       	ldd	r31, Y+1	; 0x01
    7596:	9f 01       	movw	r18, r30
    7598:	2f 5f       	subi	r18, 0xFF	; 255
    759a:	3f 4f       	sbci	r19, 0xFF	; 255
    759c:	39 83       	std	Y+1, r19	; 0x01
    759e:	28 83       	st	Y, r18
    75a0:	10 83       	st	Z, r17
    75a2:	06 c0       	rjmp	.+12     	; 0x75b0 <fputc+0x4a>
    75a4:	e8 85       	ldd	r30, Y+8	; 0x08
    75a6:	f9 85       	ldd	r31, Y+9	; 0x09
    75a8:	81 2f       	mov	r24, r17
    75aa:	09 95       	icall
    75ac:	89 2b       	or	r24, r25
    75ae:	29 f7       	brne	.-54     	; 0x757a <fputc+0x14>
    75b0:	2e 81       	ldd	r18, Y+6	; 0x06
    75b2:	3f 81       	ldd	r19, Y+7	; 0x07
    75b4:	2f 5f       	subi	r18, 0xFF	; 255
    75b6:	3f 4f       	sbci	r19, 0xFF	; 255
    75b8:	3f 83       	std	Y+7, r19	; 0x07
    75ba:	2e 83       	std	Y+6, r18	; 0x06
    75bc:	81 2f       	mov	r24, r17
    75be:	90 2f       	mov	r25, r16
    75c0:	df 91       	pop	r29
    75c2:	cf 91       	pop	r28
    75c4:	1f 91       	pop	r17
    75c6:	0f 91       	pop	r16
    75c8:	08 95       	ret

000075ca <__ultoa_invert>:
    75ca:	fa 01       	movw	r30, r20
    75cc:	aa 27       	eor	r26, r26
    75ce:	28 30       	cpi	r18, 0x08	; 8
    75d0:	51 f1       	breq	.+84     	; 0x7626 <__ultoa_invert+0x5c>
    75d2:	20 31       	cpi	r18, 0x10	; 16
    75d4:	81 f1       	breq	.+96     	; 0x7636 <__ultoa_invert+0x6c>
    75d6:	e8 94       	clt
    75d8:	6f 93       	push	r22
    75da:	6e 7f       	andi	r22, 0xFE	; 254
    75dc:	6e 5f       	subi	r22, 0xFE	; 254
    75de:	7f 4f       	sbci	r23, 0xFF	; 255
    75e0:	8f 4f       	sbci	r24, 0xFF	; 255
    75e2:	9f 4f       	sbci	r25, 0xFF	; 255
    75e4:	af 4f       	sbci	r26, 0xFF	; 255
    75e6:	b1 e0       	ldi	r27, 0x01	; 1
    75e8:	3e d0       	rcall	.+124    	; 0x7666 <__ultoa_invert+0x9c>
    75ea:	b4 e0       	ldi	r27, 0x04	; 4
    75ec:	3c d0       	rcall	.+120    	; 0x7666 <__ultoa_invert+0x9c>
    75ee:	67 0f       	add	r22, r23
    75f0:	78 1f       	adc	r23, r24
    75f2:	89 1f       	adc	r24, r25
    75f4:	9a 1f       	adc	r25, r26
    75f6:	a1 1d       	adc	r26, r1
    75f8:	68 0f       	add	r22, r24
    75fa:	79 1f       	adc	r23, r25
    75fc:	8a 1f       	adc	r24, r26
    75fe:	91 1d       	adc	r25, r1
    7600:	a1 1d       	adc	r26, r1
    7602:	6a 0f       	add	r22, r26
    7604:	71 1d       	adc	r23, r1
    7606:	81 1d       	adc	r24, r1
    7608:	91 1d       	adc	r25, r1
    760a:	a1 1d       	adc	r26, r1
    760c:	20 d0       	rcall	.+64     	; 0x764e <__ultoa_invert+0x84>
    760e:	09 f4       	brne	.+2      	; 0x7612 <__ultoa_invert+0x48>
    7610:	68 94       	set
    7612:	3f 91       	pop	r19
    7614:	2a e0       	ldi	r18, 0x0A	; 10
    7616:	26 9f       	mul	r18, r22
    7618:	11 24       	eor	r1, r1
    761a:	30 19       	sub	r19, r0
    761c:	30 5d       	subi	r19, 0xD0	; 208
    761e:	31 93       	st	Z+, r19
    7620:	de f6       	brtc	.-74     	; 0x75d8 <__ultoa_invert+0xe>
    7622:	cf 01       	movw	r24, r30
    7624:	08 95       	ret
    7626:	46 2f       	mov	r20, r22
    7628:	47 70       	andi	r20, 0x07	; 7
    762a:	40 5d       	subi	r20, 0xD0	; 208
    762c:	41 93       	st	Z+, r20
    762e:	b3 e0       	ldi	r27, 0x03	; 3
    7630:	0f d0       	rcall	.+30     	; 0x7650 <__ultoa_invert+0x86>
    7632:	c9 f7       	brne	.-14     	; 0x7626 <__ultoa_invert+0x5c>
    7634:	f6 cf       	rjmp	.-20     	; 0x7622 <__ultoa_invert+0x58>
    7636:	46 2f       	mov	r20, r22
    7638:	4f 70       	andi	r20, 0x0F	; 15
    763a:	40 5d       	subi	r20, 0xD0	; 208
    763c:	4a 33       	cpi	r20, 0x3A	; 58
    763e:	18 f0       	brcs	.+6      	; 0x7646 <__ultoa_invert+0x7c>
    7640:	49 5d       	subi	r20, 0xD9	; 217
    7642:	31 fd       	sbrc	r19, 1
    7644:	40 52       	subi	r20, 0x20	; 32
    7646:	41 93       	st	Z+, r20
    7648:	02 d0       	rcall	.+4      	; 0x764e <__ultoa_invert+0x84>
    764a:	a9 f7       	brne	.-22     	; 0x7636 <__ultoa_invert+0x6c>
    764c:	ea cf       	rjmp	.-44     	; 0x7622 <__ultoa_invert+0x58>
    764e:	b4 e0       	ldi	r27, 0x04	; 4
    7650:	a6 95       	lsr	r26
    7652:	97 95       	ror	r25
    7654:	87 95       	ror	r24
    7656:	77 95       	ror	r23
    7658:	67 95       	ror	r22
    765a:	ba 95       	dec	r27
    765c:	c9 f7       	brne	.-14     	; 0x7650 <__ultoa_invert+0x86>
    765e:	00 97       	sbiw	r24, 0x00	; 0
    7660:	61 05       	cpc	r22, r1
    7662:	71 05       	cpc	r23, r1
    7664:	08 95       	ret
    7666:	9b 01       	movw	r18, r22
    7668:	ac 01       	movw	r20, r24
    766a:	0a 2e       	mov	r0, r26
    766c:	06 94       	lsr	r0
    766e:	57 95       	ror	r21
    7670:	47 95       	ror	r20
    7672:	37 95       	ror	r19
    7674:	27 95       	ror	r18
    7676:	ba 95       	dec	r27
    7678:	c9 f7       	brne	.-14     	; 0x766c <__ultoa_invert+0xa2>
    767a:	62 0f       	add	r22, r18
    767c:	73 1f       	adc	r23, r19
    767e:	84 1f       	adc	r24, r20
    7680:	95 1f       	adc	r25, r21
    7682:	a0 1d       	adc	r26, r0
    7684:	08 95       	ret

00007686 <__cmpsf2>:
    7686:	03 d0       	rcall	.+6      	; 0x768e <__fp_cmp>
    7688:	08 f4       	brcc	.+2      	; 0x768c <__cmpsf2+0x6>
    768a:	81 e0       	ldi	r24, 0x01	; 1
    768c:	08 95       	ret

0000768e <__fp_cmp>:
    768e:	99 0f       	add	r25, r25
    7690:	00 08       	sbc	r0, r0
    7692:	55 0f       	add	r21, r21
    7694:	aa 0b       	sbc	r26, r26
    7696:	e0 e8       	ldi	r30, 0x80	; 128
    7698:	fe ef       	ldi	r31, 0xFE	; 254
    769a:	16 16       	cp	r1, r22
    769c:	17 06       	cpc	r1, r23
    769e:	e8 07       	cpc	r30, r24
    76a0:	f9 07       	cpc	r31, r25
    76a2:	c0 f0       	brcs	.+48     	; 0x76d4 <__fp_cmp+0x46>
    76a4:	12 16       	cp	r1, r18
    76a6:	13 06       	cpc	r1, r19
    76a8:	e4 07       	cpc	r30, r20
    76aa:	f5 07       	cpc	r31, r21
    76ac:	98 f0       	brcs	.+38     	; 0x76d4 <__fp_cmp+0x46>
    76ae:	62 1b       	sub	r22, r18
    76b0:	73 0b       	sbc	r23, r19
    76b2:	84 0b       	sbc	r24, r20
    76b4:	95 0b       	sbc	r25, r21
    76b6:	39 f4       	brne	.+14     	; 0x76c6 <__fp_cmp+0x38>
    76b8:	0a 26       	eor	r0, r26
    76ba:	61 f0       	breq	.+24     	; 0x76d4 <__fp_cmp+0x46>
    76bc:	23 2b       	or	r18, r19
    76be:	24 2b       	or	r18, r20
    76c0:	25 2b       	or	r18, r21
    76c2:	21 f4       	brne	.+8      	; 0x76cc <__fp_cmp+0x3e>
    76c4:	08 95       	ret
    76c6:	0a 26       	eor	r0, r26
    76c8:	09 f4       	brne	.+2      	; 0x76cc <__fp_cmp+0x3e>
    76ca:	a1 40       	sbci	r26, 0x01	; 1
    76cc:	a6 95       	lsr	r26
    76ce:	8f ef       	ldi	r24, 0xFF	; 255
    76d0:	81 1d       	adc	r24, r1
    76d2:	81 1d       	adc	r24, r1
    76d4:	08 95       	ret

000076d6 <__ctype_isfalse>:
    76d6:	99 27       	eor	r25, r25
    76d8:	88 27       	eor	r24, r24

000076da <__ctype_istrue>:
    76da:	08 95       	ret

000076dc <__prologue_saves__>:
    76dc:	2f 92       	push	r2
    76de:	3f 92       	push	r3
    76e0:	4f 92       	push	r4
    76e2:	5f 92       	push	r5
    76e4:	6f 92       	push	r6
    76e6:	7f 92       	push	r7
    76e8:	8f 92       	push	r8
    76ea:	9f 92       	push	r9
    76ec:	af 92       	push	r10
    76ee:	bf 92       	push	r11
    76f0:	cf 92       	push	r12
    76f2:	df 92       	push	r13
    76f4:	ef 92       	push	r14
    76f6:	ff 92       	push	r15
    76f8:	0f 93       	push	r16
    76fa:	1f 93       	push	r17
    76fc:	cf 93       	push	r28
    76fe:	df 93       	push	r29
    7700:	cd b7       	in	r28, 0x3d	; 61
    7702:	de b7       	in	r29, 0x3e	; 62
    7704:	ca 1b       	sub	r28, r26
    7706:	db 0b       	sbc	r29, r27
    7708:	0f b6       	in	r0, 0x3f	; 63
    770a:	f8 94       	cli
    770c:	de bf       	out	0x3e, r29	; 62
    770e:	0f be       	out	0x3f, r0	; 63
    7710:	cd bf       	out	0x3d, r28	; 61
    7712:	09 94       	ijmp

00007714 <__epilogue_restores__>:
    7714:	2a 88       	ldd	r2, Y+18	; 0x12
    7716:	39 88       	ldd	r3, Y+17	; 0x11
    7718:	48 88       	ldd	r4, Y+16	; 0x10
    771a:	5f 84       	ldd	r5, Y+15	; 0x0f
    771c:	6e 84       	ldd	r6, Y+14	; 0x0e
    771e:	7d 84       	ldd	r7, Y+13	; 0x0d
    7720:	8c 84       	ldd	r8, Y+12	; 0x0c
    7722:	9b 84       	ldd	r9, Y+11	; 0x0b
    7724:	aa 84       	ldd	r10, Y+10	; 0x0a
    7726:	b9 84       	ldd	r11, Y+9	; 0x09
    7728:	c8 84       	ldd	r12, Y+8	; 0x08
    772a:	df 80       	ldd	r13, Y+7	; 0x07
    772c:	ee 80       	ldd	r14, Y+6	; 0x06
    772e:	fd 80       	ldd	r15, Y+5	; 0x05
    7730:	0c 81       	ldd	r16, Y+4	; 0x04
    7732:	1b 81       	ldd	r17, Y+3	; 0x03
    7734:	aa 81       	ldd	r26, Y+2	; 0x02
    7736:	b9 81       	ldd	r27, Y+1	; 0x01
    7738:	ce 0f       	add	r28, r30
    773a:	d1 1d       	adc	r29, r1
    773c:	0f b6       	in	r0, 0x3f	; 63
    773e:	f8 94       	cli
    7740:	de bf       	out	0x3e, r29	; 62
    7742:	0f be       	out	0x3f, r0	; 63
    7744:	cd bf       	out	0x3d, r28	; 61
    7746:	ed 01       	movw	r28, r26
    7748:	08 95       	ret

0000774a <_exit>:
    774a:	f8 94       	cli

0000774c <__stop_program>:
    774c:	ff cf       	rjmp	.-2      	; 0x774c <__stop_program>
