
GPS_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00001bc4  00001c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000af  0080009a  0080009a  00001c92  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00001cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002005  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ff  00000000  00000000  00003e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000900  00000000  00000000  00004552  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000043c  00000000  00000000  00004e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060a  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013f6  00000000  00000000  0000589a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00006c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_13>
      38:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_14>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	5e 00       	.word	0x005e	; ????

00000056 <pstr_nan>:
      56:	4e 41 4e                                            NAN

00000059 <pstr_inity>:
      59:	49 4e 49 54 59                                      INITY

0000005e <pstr_inf>:
      5e:	49 4e 46                                            INF

00000061 <pwr_m10>:
      61:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      71:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000079 <pwr_p10>:
      79:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      89:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf e5       	ldi	r28, 0x5F	; 95
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	a0 e6       	ldi	r26, 0x60	; 96
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e4 ec       	ldi	r30, 0xC4	; 196
      a6:	fb e1       	ldi	r31, 0x1B	; 27
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	aa 39       	cpi	r26, 0x9A	; 154
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	aa e9       	ldi	r26, 0x9A	; 154
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a9 34       	cpi	r26, 0x49	; 73
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 9a 04 	call	0x934	; 0x934 <main>
      c8:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <parseHex>:
			currentReading.j = 0;
			
			  // do checksum check

			  // first look if we even have one
			  if (fullLine[strlen(fullLine)-4] == '*') {
      d0:	80 33       	cpi	r24, 0x30	; 48
				  uint16_t sum = parseHex(fullLine[strlen(fullLine)-3]) * 16;
      d2:	50 f0       	brcs	.+20     	; 0xe8 <parseHex+0x18>
      d4:	8a 33       	cpi	r24, 0x3A	; 58
      d6:	10 f4       	brcc	.+4      	; 0xdc <parseHex+0xc>
      d8:	80 53       	subi	r24, 0x30	; 48
      da:	08 95       	ret
      dc:	9f eb       	ldi	r25, 0xBF	; 191
      de:	98 0f       	add	r25, r24
      e0:	96 30       	cpi	r25, 0x06	; 6
      e2:	20 f4       	brcc	.+8      	; 0xec <parseHex+0x1c>
      e4:	87 53       	subi	r24, 0x37	; 55
				  sum += parseHex(fullLine[strlen(fullLine)-2]);
      e6:	08 95       	ret
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	08 95       	ret
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	08 95       	ret

000000f0 <readGPRMC>:
      f0:	4f 92       	push	r4
      f2:	5f 92       	push	r5
      f4:	6f 92       	push	r6
      f6:	7f 92       	push	r7
      f8:	8f 92       	push	r8
      fa:	9f 92       	push	r9
				  
				  // check checksum
				  for (uint8_t i=1; i < (strlen(fullLine)-4); i++) {
      fc:	af 92       	push	r10
      fe:	bf 92       	push	r11
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
					  sum ^= fullLine[i];
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
			  if (fullLine[strlen(fullLine)-4] == '*') {
				  uint16_t sum = parseHex(fullLine[strlen(fullLine)-3]) * 16;
				  sum += parseHex(fullLine[strlen(fullLine)-2]);
				  
				  // check checksum
				  for (uint8_t i=1; i < (strlen(fullLine)-4); i++) {
     114:	cb 58       	subi	r28, 0x8B	; 139
     116:	d1 09       	sbc	r29, r1
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
					  sum ^= fullLine[i];
				  }
				  if (sum != 0) {
     120:	cd bf       	out	0x3d, r28	; 61
     122:	10 92 bd 00 	sts	0x00BD, r1
					  // bad checksum :(
					  return;
				  }
			  }
			
			memset(tHours, 0, 3);
     126:	0f 2e       	mov	r0, r31
     128:	fe ec       	ldi	r31, 0xCE	; 206
     12a:	ef 2e       	mov	r14, r31
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	ff 2e       	mov	r15, r31
     130:	f0 2d       	mov	r31, r0
     132:	a1 2c       	mov	r10, r1
			memset(tMinutes, 0, 3);
     134:	b1 2c       	mov	r11, r1
     136:	20 c0       	rjmp	.+64     	; 0x178 <readGPRMC+0x88>
     138:	80 2f       	mov	r24, r16
     13a:	0e 94 a9 06 	call	0xd52	; 0xd52 <serialHasChar>
     13e:	88 23       	and	r24, r24
     140:	99 f0       	breq	.+38     	; 0x168 <readGPRMC+0x78>
			memset(tSeconds, 0, 3);
     142:	d7 01       	movw	r26, r14
     144:	cd 90       	ld	r12, X+
     146:	dc 90       	ld	r13, X
     148:	80 2f       	mov	r24, r16
     14a:	0e 94 bb 06 	call	0xd76	; 0xd76 <serialGet>
     14e:	eb e0       	ldi	r30, 0x0B	; 11
			memset(degreebuff, 0, 10);
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	ec 0f       	add	r30, r28
     154:	fd 1f       	adc	r31, r29
     156:	ec 0d       	add	r30, r12
     158:	fd 1d       	adc	r31, r13
     15a:	80 83       	st	Z, r24
     15c:	f7 01       	movw	r30, r14
			memset(currentReading.lat, 0, 1);
     15e:	80 81       	ld	r24, Z
     160:	91 81       	ldd	r25, Z+1	; 0x01
			
			if (strstr(fullLine, "$GPGGA")) {
     162:	01 96       	adiw	r24, 0x01	; 1
     164:	91 83       	std	Z+1, r25	; 0x01
     166:	80 83       	st	Z, r24
     168:	0f 5f       	subi	r16, 0xFF	; 255
     16a:	1f 4f       	sbci	r17, 0xFF	; 255
     16c:	0e 94 46 06 	call	0xc8c	; 0xc8c <serialAvailable>
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	08 17       	cp	r16, r24
				// found GGA
				p = strstr(fullLine, "$GPGGA");
				p = strchr(p, ',')+1;
     174:	19 07       	cpc	r17, r25
     176:	04 f3       	brlt	.-64     	; 0x138 <readGPRMC+0x48>
     178:	d7 01       	movw	r26, r14
     17a:	8d 91       	ld	r24, X+
     17c:	9c 91       	ld	r25, X
     17e:	88 37       	cpi	r24, 0x78	; 120
     180:	91 05       	cpc	r25, r1
     182:	1c f4       	brge	.+6      	; 0x18a <readGPRMC+0x9a>
				strncpy(tHours, p, 2); // hours
     184:	0a 2d       	mov	r16, r10
     186:	1b 2d       	mov	r17, r11
     188:	f1 cf       	rjmp	.-30     	; 0x16c <readGPRMC+0x7c>
     18a:	87 37       	cpi	r24, 0x77	; 119
     18c:	91 05       	cpc	r25, r1
     18e:	0c f4       	brge	.+2      	; 0x192 <readGPRMC+0xa2>
     190:	af c3       	rjmp	.+1886   	; 0x8f0 <__stack+0x91>
				p = p + 2;
				strncpy(tMinutes, p, 2); // minutes
     192:	10 92 cf 00 	sts	0x00CF, r1
     196:	10 92 ce 00 	sts	0x00CE, r1
     19a:	fe 01       	movw	r30, r28
     19c:	3b 96       	adiw	r30, 0x0b	; 11
     19e:	df 01       	movw	r26, r30
     1a0:	0d 90       	ld	r0, X+
     1a2:	00 20       	and	r0, r0
     1a4:	e9 f7       	brne	.-6      	; 0x1a0 <readGPRMC+0xb0>
				p = p + 2;
     1a6:	11 97       	sbiw	r26, 0x01	; 1
     1a8:	7d 01       	movw	r14, r26
     1aa:	ee 1a       	sub	r14, r30
     1ac:	ff 0a       	sbc	r15, r31
				strncpy(tSeconds, p, 2); // seconds
     1ae:	87 01       	movw	r16, r14
     1b0:	04 50       	subi	r16, 0x04	; 4
     1b2:	11 09       	sbc	r17, r1
     1b4:	e0 0f       	add	r30, r16
     1b6:	f1 1f       	adc	r31, r17
     1b8:	80 81       	ld	r24, Z
     1ba:	8a 32       	cpi	r24, 0x2A	; 42
     1bc:	a1 f5       	brne	.+104    	; 0x226 <readGPRMC+0x136>
				previousReading.hours = currentReading.hours;
     1be:	fe 01       	movw	r30, r28
     1c0:	ee 0d       	add	r30, r14
     1c2:	ff 1d       	adc	r31, r15
     1c4:	80 85       	ldd	r24, Z+8	; 0x08
     1c6:	0e 94 68 00 	call	0xd0	; 0xd0 <parseHex>
     1ca:	b0 e1       	ldi	r27, 0x10	; 16
     1cc:	8b 9f       	mul	r24, r27
     1ce:	60 01       	movw	r12, r0
				currentReading.hours = atoi(tHours);
     1d0:	11 24       	eor	r1, r1
     1d2:	de 01       	movw	r26, r28
     1d4:	ae 0d       	add	r26, r14
     1d6:	bf 1d       	adc	r27, r15
     1d8:	19 96       	adiw	r26, 0x09	; 9
     1da:	8c 91       	ld	r24, X
     1dc:	0e 94 68 00 	call	0xd0	; 0xd0 <parseHex>
     1e0:	f6 01       	movw	r30, r12
				previousReading.minutes = currentReading.minutes;
     1e2:	e8 0f       	add	r30, r24
     1e4:	f1 1d       	adc	r31, r1
     1e6:	cf 01       	movw	r24, r30
     1e8:	03 30       	cpi	r16, 0x03	; 3
     1ea:	11 05       	cpc	r17, r1
     1ec:	78 f0       	brcs	.+30     	; 0x20c <readGPRMC+0x11c>
     1ee:	42 e0       	ldi	r20, 0x02	; 2
     1f0:	eb e0       	ldi	r30, 0x0B	; 11
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
				currentReading.minutes = atoi(tMinutes);
     1f4:	ec 0f       	add	r30, r28
     1f6:	fd 1f       	adc	r31, r29
     1f8:	e4 0f       	add	r30, r20
     1fa:	f1 1d       	adc	r31, r1
     1fc:	20 81       	ld	r18, Z
     1fe:	82 27       	eor	r24, r18
     200:	4f 5f       	subi	r20, 0xFF	; 255
     202:	24 2f       	mov	r18, r20
				currentReading.seconds = atoi(tSeconds);
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	20 17       	cp	r18, r16
     208:	31 07       	cpc	r19, r17
     20a:	90 f3       	brcs	.-28     	; 0x1f0 <readGPRMC+0x100>
     20c:	89 2b       	or	r24, r25
     20e:	59 f0       	breq	.+22     	; 0x226 <readGPRMC+0x136>
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 c9 05 	call	0xb92	; 0xb92 <lcd_gotoxy>
				if (currentReading.hours < 22) {
     218:	8a e7       	ldi	r24, 0x7A	; 122
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_puts>
					currentReading.hours = currentReading.hours + 2;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	6f c3       	rjmp	.+1758   	; 0x904 <__stack+0xa5>
     226:	cd 57       	subi	r28, 0x7D	; 125
     228:	df 4f       	sbci	r29, 0xFF	; 255
     22a:	18 82       	st	Y, r1
     22c:	19 82       	std	Y+1, r1	; 0x01
				} else if (currentReading.hours == 22){
     22e:	1a 82       	std	Y+2, r1	; 0x02
     230:	c3 58       	subi	r28, 0x83	; 131
     232:	d0 40       	sbci	r29, 0x00	; 0
     234:	ca 57       	subi	r28, 0x7A	; 122
					currentReading.hours = 0;
     236:	df 4f       	sbci	r29, 0xFF	; 255
     238:	18 82       	st	Y, r1
     23a:	19 82       	std	Y+1, r1	; 0x01
     23c:	1a 82       	std	Y+2, r1	; 0x02
     23e:	c6 58       	subi	r28, 0x86	; 134
				} else {
					currentReading.hours = 1;
     240:	d0 40       	sbci	r29, 0x00	; 0
     242:	c7 57       	subi	r28, 0x77	; 119
     244:	df 4f       	sbci	r29, 0xFF	; 255
     246:	18 82       	st	Y, r1
     248:	19 82       	std	Y+1, r1	; 0x01
     24a:	1a 82       	std	Y+2, r1	; 0x02
				}

				
				p = strchr(p, ',')+1;
     24c:	c9 58       	subi	r28, 0x89	; 137
     24e:	d0 40       	sbci	r29, 0x00	; 0
     250:	fe 01       	movw	r30, r28
     252:	31 96       	adiw	r30, 0x01	; 1
     254:	8a e0       	ldi	r24, 0x0A	; 10
     256:	df 01       	movw	r26, r30
     258:	1d 92       	st	X+, r1
     25a:	8a 95       	dec	r24
     25c:	e9 f7       	brne	.-6      	; 0x258 <readGPRMC+0x168>
				
				 if (',' != *p)
     25e:	10 92 bc 00 	sts	0x00BC, r1
     262:	69 e8       	ldi	r22, 0x89	; 137
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	ce 01       	movw	r24, r28
     268:	0b 96       	adiw	r24, 0x0b	; 11
				 {
					 strncpy(degreebuff, p, 2);
     26a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <strstr>
     26e:	8c 01       	movw	r16, r24
     270:	00 97       	sbiw	r24, 0x00	; 0
     272:	09 f4       	brne	.+2      	; 0x276 <readGPRMC+0x186>
     274:	e0 c2       	rjmp	.+1472   	; 0x836 <readGPRMC+0x746>
     276:	8b 85       	ldd	r24, Y+11	; 0x0b
					 p += 2;
					 degreebuff[2] = '\0';
					 //long degree = atol(degreebuff) * 10000000;
					 degree = atol(degreebuff) * 10000000;
     278:	f8 01       	movw	r30, r16
     27a:	80 83       	st	Z, r24
     27c:	44 e1       	ldi	r20, 0x14	; 20
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	b8 01       	movw	r22, r16
     282:	8f ed       	ldi	r24, 0xDF	; 223
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
     28a:	6c e2       	ldi	r22, 0x2C	; 44
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	c8 01       	movw	r24, r16
     290:	0e 94 44 0b 	call	0x1688	; 0x1688 <strchr>
					 strncpy(degreebuff, p, 2); // minutes
     294:	8c 01       	movw	r16, r24
     296:	bc 01       	movw	r22, r24
     298:	6f 5f       	subi	r22, 0xFF	; 255
     29a:	7f 4f       	sbci	r23, 0xFF	; 255
     29c:	42 e0       	ldi	r20, 0x02	; 2
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	ce 01       	movw	r24, r28
     2a2:	8d 57       	subi	r24, 0x7D	; 125
     2a4:	9f 4f       	sbci	r25, 0xFF	; 255
					 p += 3; // skip decimal point
     2a6:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
					 strncpy(degreebuff + 2, p, 4);
     2aa:	b8 01       	movw	r22, r16
     2ac:	6d 5f       	subi	r22, 0xFD	; 253
     2ae:	7f 4f       	sbci	r23, 0xFF	; 255
     2b0:	42 e0       	ldi	r20, 0x02	; 2
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	ce 01       	movw	r24, r28
     2b6:	8a 57       	subi	r24, 0x7A	; 122
					 degreebuff[6] = '\0';
					 currentReading.minutesLat = 50 * atol(degreebuff) / 3;
     2b8:	9f 4f       	sbci	r25, 0xFF	; 255
     2ba:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
     2be:	68 01       	movw	r12, r16
     2c0:	f5 e0       	ldi	r31, 0x05	; 5
     2c2:	cf 0e       	add	r12, r31
     2c4:	d1 1c       	adc	r13, r1
     2c6:	42 e0       	ldi	r20, 0x02	; 2
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	b6 01       	movw	r22, r12
     2cc:	ce 01       	movw	r24, r28
     2ce:	87 57       	subi	r24, 0x77	; 119
     2d0:	9f 4f       	sbci	r25, 0xFF	; 255
     2d2:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
     2d6:	06 ea       	ldi	r16, 0xA6	; 166
     2d8:	10 e0       	ldi	r17, 0x00	; 0
     2da:	d8 01       	movw	r26, r16
     2dc:	8d 91       	ld	r24, X+
     2de:	9c 91       	ld	r25, X
     2e0:	90 93 f4 00 	sts	0x00F4, r25
     2e4:	80 93 f3 00 	sts	0x00F3, r24
     2e8:	ce 01       	movw	r24, r28
     2ea:	8d 57       	subi	r24, 0x7D	; 125
					 previousReading.latitude = currentReading.latitude;
     2ec:	9f 4f       	sbci	r25, 0xFF	; 255
     2ee:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <atoi>
     2f2:	7c 01       	movw	r14, r24
     2f4:	f8 01       	movw	r30, r16
     2f6:	91 83       	std	Z+1, r25	; 0x01
     2f8:	80 83       	st	Z, r24
     2fa:	08 ea       	ldi	r16, 0xA8	; 168
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	d8 01       	movw	r26, r16
     300:	8d 91       	ld	r24, X+
     302:	9c 91       	ld	r25, X
     304:	90 93 f6 00 	sts	0x00F6, r25
     308:	80 93 f5 00 	sts	0x00F5, r24
     30c:	ce 01       	movw	r24, r28
     30e:	8a 57       	subi	r24, 0x7A	; 122
     310:	9f 4f       	sbci	r25, 0xFF	; 255
					 currentReading.latitude = degree / 100000 + currentReading.minutesLat * 0.000006F;				 
     312:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <atoi>
     316:	f8 01       	movw	r30, r16
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
     31c:	ce 01       	movw	r24, r28
     31e:	87 57       	subi	r24, 0x77	; 119
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <atoi>
     326:	90 93 ab 00 	sts	0x00AB, r25
     32a:	80 93 aa 00 	sts	0x00AA, r24
     32e:	f6 e1       	ldi	r31, 0x16	; 22
     330:	ef 16       	cp	r14, r31
     332:	f1 04       	cpc	r15, r1
     334:	44 f4       	brge	.+16     	; 0x346 <readGPRMC+0x256>
     336:	22 e0       	ldi	r18, 0x02	; 2
     338:	e2 0e       	add	r14, r18
     33a:	f1 1c       	adc	r15, r1
     33c:	f0 92 a7 00 	sts	0x00A7, r15
     340:	e0 92 a6 00 	sts	0x00A6, r14
     344:	0f c0       	rjmp	.+30     	; 0x364 <readGPRMC+0x274>
     346:	36 e1       	ldi	r19, 0x16	; 22
     348:	e3 16       	cp	r14, r19
     34a:	f1 04       	cpc	r15, r1
     34c:	29 f4       	brne	.+10     	; 0x358 <readGPRMC+0x268>
     34e:	10 92 a7 00 	sts	0x00A7, r1
     352:	10 92 a6 00 	sts	0x00A6, r1
     356:	06 c0       	rjmp	.+12     	; 0x364 <readGPRMC+0x274>
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	90 93 a7 00 	sts	0x00A7, r25
     360:	80 93 a6 00 	sts	0x00A6, r24
					 currentReading.latitudeDegrees = (currentReading.latitude-100*(int)(currentReading.latitude/100))/60.0;
     364:	6c e2       	ldi	r22, 0x2C	; 44
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	c6 01       	movw	r24, r12
     36a:	0e 94 44 0b 	call	0x1688	; 0x1688 <strchr>
     36e:	fc 01       	movw	r30, r24
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	21 81       	ldd	r18, Z+1	; 0x01
     374:	21 34       	cpi	r18, 0x41	; 65
     376:	49 f4       	brne	.+18     	; 0x38a <readGPRMC+0x29a>
     378:	20 93 d6 00 	sts	0x00D6, r18
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	30 93 d5 00 	sts	0x00D5, r19
     384:	20 93 d4 00 	sts	0x00D4, r18
     388:	0c c0       	rjmp	.+24     	; 0x3a2 <readGPRMC+0x2b2>
     38a:	26 35       	cpi	r18, 0x56	; 86
     38c:	51 f4       	brne	.+20     	; 0x3a2 <readGPRMC+0x2b2>
     38e:	86 e5       	ldi	r24, 0x56	; 86
     390:	80 93 d6 00 	sts	0x00D6, r24
     394:	10 92 d5 00 	sts	0x00D5, r1
     398:	10 92 d4 00 	sts	0x00D4, r1
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	b1 c2       	rjmp	.+1378   	; 0x904 <__stack+0xa5>
     3a2:	6c e2       	ldi	r22, 0x2C	; 44
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	0e 94 44 0b 	call	0x1688	; 0x1688 <strchr>
     3aa:	7c 01       	movw	r14, r24
     3ac:	8c 01       	movw	r16, r24
     3ae:	0f 5f       	subi	r16, 0xFF	; 255
     3b0:	1f 4f       	sbci	r17, 0xFF	; 255
     3b2:	dc 01       	movw	r26, r24
     3b4:	11 96       	adiw	r26, 0x01	; 1
     3b6:	8c 91       	ld	r24, X
     3b8:	8c 32       	cpi	r24, 0x2C	; 44
     3ba:	09 f4       	brne	.+2      	; 0x3be <readGPRMC+0x2ce>
     3bc:	d0 c0       	rjmp	.+416    	; 0x55e <readGPRMC+0x46e>
     3be:	42 e0       	ldi	r20, 0x02	; 2
     3c0:	50 e0       	ldi	r21, 0x00	; 0
					 currentReading.latitudeDegrees += (int)(currentReading.latitude/100);
     3c2:	b8 01       	movw	r22, r16
     3c4:	ce 01       	movw	r24, r28
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
     3cc:	1b 82       	std	Y+3, r1	; 0x03
     3ce:	ce 01       	movw	r24, r28
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	0e 94 1d 0b 	call	0x163a	; 0x163a <atol>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	60 e8       	ldi	r22, 0x80	; 128
     3dc:	76 e9       	ldi	r23, 0x96	; 150
     3de:	88 e9       	ldi	r24, 0x98	; 152
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 90 0a 	call	0x1520	; 0x1520 <__mulsi3>
     3e6:	3b 01       	movw	r6, r22
     3e8:	4c 01       	movw	r8, r24
     3ea:	b7 01       	movw	r22, r14
     3ec:	6d 5f       	subi	r22, 0xFD	; 253
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
					 currentReading.latitude_fixed = degree + currentReading.minutesLat;		 
     3f0:	42 e0       	ldi	r20, 0x02	; 2
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
     3fc:	0b 5f       	subi	r16, 0xFB	; 251
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
     400:	44 e0       	ldi	r20, 0x04	; 4
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	b8 01       	movw	r22, r16
     406:	ce 01       	movw	r24, r28
					 
					 
				 }
				 
				 
				 p = strchr(p, ',')+1;
     408:	03 96       	adiw	r24, 0x03	; 3
     40a:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
     40e:	1f 82       	std	Y+7, r1	; 0x07
     410:	0f 2e       	mov	r0, r31
     412:	f4 eb       	ldi	r31, 0xB4	; 180
     414:	af 2e       	mov	r10, r31
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	bf 2e       	mov	r11, r31
     41a:	f0 2d       	mov	r31, r0
				 if (',' != *p)
     41c:	f5 01       	movw	r30, r10
     41e:	80 81       	ld	r24, Z
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	a2 81       	ldd	r26, Z+2	; 0x02
     424:	b3 81       	ldd	r27, Z+3	; 0x03
				 {
					 if (p[0] == 'S') currentReading.latitudeDegrees *= -1.0;
     426:	80 93 07 01 	sts	0x0107, r24
     42a:	90 93 08 01 	sts	0x0108, r25
     42e:	a0 93 09 01 	sts	0x0109, r26
     432:	b0 93 0a 01 	sts	0x010A, r27
     436:	0f 2e       	mov	r0, r31
     438:	fc ea       	ldi	r31, 0xAC	; 172
     43a:	4f 2e       	mov	r4, r31
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	5f 2e       	mov	r5, r31
     440:	f0 2d       	mov	r31, r0
     442:	f2 01       	movw	r30, r4
     444:	80 81       	ld	r24, Z
     446:	91 81       	ldd	r25, Z+1	; 0x01
     448:	a2 81       	ldd	r26, Z+2	; 0x02
     44a:	b3 81       	ldd	r27, Z+3	; 0x03
     44c:	80 93 fb 00 	sts	0x00FB, r24
     450:	90 93 fc 00 	sts	0x00FC, r25
     454:	a0 93 fd 00 	sts	0x00FD, r26
					 if (p[0] == 'N') currentReading.lat[0] = 'N';
     458:	b0 93 fe 00 	sts	0x00FE, r27
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	0e 94 1d 0b 	call	0x163a	; 0x163a <atol>
     464:	9b 01       	movw	r18, r22
     466:	ac 01       	movw	r20, r24
					 else if (p[0] == 'S') currentReading.lat[0] = 'S';
     468:	a2 e3       	ldi	r26, 0x32	; 50
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__muluhisi3>
     470:	23 e0       	ldi	r18, 0x03	; 3
					 else if (p[0] == ',') currentReading.lat[0] = '/';
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divmodsi4>
				 }
				 
				 // parse out longitude
				 p = strchr(p, ',')+1;
     47c:	69 01       	movw	r12, r18
     47e:	7a 01       	movw	r14, r20
     480:	20 93 b8 00 	sts	0x00B8, r18
     484:	30 93 b9 00 	sts	0x00B9, r19
     488:	40 93 ba 00 	sts	0x00BA, r20
     48c:	50 93 bb 00 	sts	0x00BB, r21
				 if (',' != *p)
     490:	da 01       	movw	r26, r20
     492:	c9 01       	movw	r24, r18
     494:	86 0d       	add	r24, r6
     496:	97 1d       	adc	r25, r7
     498:	a8 1d       	adc	r26, r8
				 {
					 strncpy(degreebuff, p, 3);
     49a:	b9 1d       	adc	r27, r9
     49c:	f5 01       	movw	r30, r10
     49e:	80 83       	st	Z, r24
     4a0:	91 83       	std	Z+1, r25	; 0x01
     4a2:	a2 83       	std	Z+2, r26	; 0x02
     4a4:	b3 83       	std	Z+3, r27	; 0x03
     4a6:	c4 01       	movw	r24, r8
					 p += 3;
					 degreebuff[3] = '\0';
     4a8:	b3 01       	movw	r22, r6
					 degree = atol(degreebuff) * 10000000;
     4aa:	20 ea       	ldi	r18, 0xA0	; 160
     4ac:	36 e8       	ldi	r19, 0x86	; 134
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divmodsi4>
     4b6:	ca 01       	movw	r24, r20
     4b8:	b9 01       	movw	r22, r18
     4ba:	0e 94 a1 09 	call	0x1342	; 0x1342 <__floatsisf>
     4be:	4b 01       	movw	r8, r22
     4c0:	5c 01       	movw	r10, r24
     4c2:	c7 01       	movw	r24, r14
     4c4:	b6 01       	movw	r22, r12
					 strncpy(degreebuff, p, 2); // minutes
     4c6:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
     4ca:	2c e9       	ldi	r18, 0x9C	; 156
     4cc:	33 e5       	ldi	r19, 0x53	; 83
     4ce:	49 ec       	ldi	r20, 0xC9	; 201
     4d0:	56 e3       	ldi	r21, 0x36	; 54
     4d2:	0e 94 2d 0a 	call	0x145a	; 0x145a <__mulsf3>
     4d6:	9b 01       	movw	r18, r22
					 p += 3; // skip decimal point
     4d8:	ac 01       	movw	r20, r24
     4da:	c5 01       	movw	r24, r10
					 strncpy(degreebuff + 2, p, 4);
     4dc:	b4 01       	movw	r22, r8
     4de:	0e 94 a7 08 	call	0x114e	; 0x114e <__addsf3>
     4e2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fixunssfsi>
     4e6:	6b 01       	movw	r12, r22
     4e8:	7c 01       	movw	r14, r24
					 degreebuff[6] = '\0';
					 currentReading.minutesLon = 50 * atol(degreebuff) / 3;
     4ea:	d2 01       	movw	r26, r4
     4ec:	6d 93       	st	X+, r22
     4ee:	7d 93       	st	X+, r23
     4f0:	8d 93       	st	X+, r24
     4f2:	9c 93       	st	X, r25
     4f4:	13 97       	sbiw	r26, 0x03	; 3
     4f6:	24 e6       	ldi	r18, 0x64	; 100
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__udivmodsi4>
     502:	49 01       	movw	r8, r18
     504:	5a 01       	movw	r10, r20
     506:	24 e6       	ldi	r18, 0x64	; 100
     508:	28 9d       	mul	r18, r8
     50a:	c0 01       	movw	r24, r0
     50c:	29 9d       	mul	r18, r9
     50e:	90 0d       	add	r25, r0
     510:	11 24       	eor	r1, r1
     512:	aa 27       	eor	r26, r26
     514:	97 fd       	sbrc	r25, 7
     516:	a0 95       	com	r26
     518:	ba 2f       	mov	r27, r26
     51a:	a7 01       	movw	r20, r14
     51c:	96 01       	movw	r18, r12
					 previousReading.longitude = currentReading.longitude;
     51e:	28 1b       	sub	r18, r24
     520:	39 0b       	sbc	r19, r25
     522:	4a 0b       	sbc	r20, r26
     524:	5b 0b       	sbc	r21, r27
     526:	ca 01       	movw	r24, r20
     528:	b9 01       	movw	r22, r18
     52a:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e7       	ldi	r20, 0x70	; 112
     534:	52 e4       	ldi	r21, 0x42	; 66
     536:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divsf3>
     53a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fixunssfsi>
     53e:	aa 24       	eor	r10, r10
     540:	97 fc       	sbrc	r9, 7
     542:	a0 94       	com	r10
					 currentReading.longitude = degree / 100000 + currentReading.minutesLon * 0.000006F;
     544:	ba 2c       	mov	r11, r10
     546:	86 0e       	add	r8, r22
     548:	97 1e       	adc	r9, r23
     54a:	a8 1e       	adc	r10, r24
     54c:	b9 1e       	adc	r11, r25
     54e:	80 92 b0 00 	sts	0x00B0, r8
     552:	90 92 b1 00 	sts	0x00B1, r9
     556:	a0 92 b2 00 	sts	0x00B2, r10
     55a:	b0 92 b3 00 	sts	0x00B3, r11
     55e:	6c e2       	ldi	r22, 0x2C	; 44
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	c8 01       	movw	r24, r16
     564:	0e 94 44 0b 	call	0x1688	; 0x1688 <strchr>
     568:	8c 01       	movw	r16, r24
     56a:	6c 01       	movw	r12, r24
     56c:	3f ef       	ldi	r19, 0xFF	; 255
     56e:	c3 1a       	sub	r12, r19
     570:	d3 0a       	sbc	r13, r19
     572:	dc 01       	movw	r26, r24
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	8c 91       	ld	r24, X
     578:	8c 32       	cpi	r24, 0x2C	; 44
     57a:	59 f1       	breq	.+86     	; 0x5d2 <readGPRMC+0x4e2>
     57c:	83 35       	cpi	r24, 0x53	; 83
     57e:	09 f0       	breq	.+2      	; 0x582 <readGPRMC+0x492>
     580:	bd c1       	rjmp	.+890    	; 0x8fc <__stack+0x9d>
     582:	0f 2e       	mov	r0, r31
     584:	f0 eb       	ldi	r31, 0xB0	; 176
     586:	ef 2e       	mov	r14, r31
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	ff 2e       	mov	r15, r31
     58c:	f0 2d       	mov	r31, r0
     58e:	f7 01       	movw	r30, r14
     590:	60 81       	ld	r22, Z
     592:	71 81       	ldd	r23, Z+1	; 0x01
					 currentReading.longitudeDegrees = (currentReading.longitude-100*(int)(currentReading.longitude/100))/60.0;
     594:	82 81       	ldd	r24, Z+2	; 0x02
     596:	93 81       	ldd	r25, Z+3	; 0x03
     598:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
     59c:	90 58       	subi	r25, 0x80	; 128
     59e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fixunssfsi>
     5a2:	d7 01       	movw	r26, r14
     5a4:	6d 93       	st	X+, r22
     5a6:	7d 93       	st	X+, r23
     5a8:	8d 93       	st	X+, r24
     5aa:	9c 93       	st	X, r25
     5ac:	13 97       	sbiw	r26, 0x03	; 3
     5ae:	f8 01       	movw	r30, r16
     5b0:	81 81       	ldd	r24, Z+1	; 0x01
     5b2:	8e 34       	cpi	r24, 0x4E	; 78
     5b4:	21 f4       	brne	.+8      	; 0x5be <readGPRMC+0x4ce>
     5b6:	8e e4       	ldi	r24, 0x4E	; 78
     5b8:	80 93 bc 00 	sts	0x00BC, r24
     5bc:	0a c0       	rjmp	.+20     	; 0x5d2 <readGPRMC+0x4e2>
     5be:	83 35       	cpi	r24, 0x53	; 83
     5c0:	19 f4       	brne	.+6      	; 0x5c8 <readGPRMC+0x4d8>
     5c2:	80 93 bc 00 	sts	0x00BC, r24
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <readGPRMC+0x4e2>
     5c8:	8c 32       	cpi	r24, 0x2C	; 44
     5ca:	19 f4       	brne	.+6      	; 0x5d2 <readGPRMC+0x4e2>
     5cc:	8f e2       	ldi	r24, 0x2F	; 47
     5ce:	80 93 bc 00 	sts	0x00BC, r24
     5d2:	6c e2       	ldi	r22, 0x2C	; 44
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	c6 01       	movw	r24, r12
     5d8:	0e 94 44 0b 	call	0x1688	; 0x1688 <strchr>
     5dc:	7c 01       	movw	r14, r24
     5de:	8c 01       	movw	r16, r24
     5e0:	0f 5f       	subi	r16, 0xFF	; 255
     5e2:	1f 4f       	sbci	r17, 0xFF	; 255
     5e4:	dc 01       	movw	r26, r24
     5e6:	11 96       	adiw	r26, 0x01	; 1
     5e8:	8c 91       	ld	r24, X
     5ea:	8c 32       	cpi	r24, 0x2C	; 44
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <readGPRMC+0x500>
     5ee:	d0 c0       	rjmp	.+416    	; 0x790 <readGPRMC+0x6a0>
     5f0:	43 e0       	ldi	r20, 0x03	; 3
     5f2:	50 e0       	ldi	r21, 0x00	; 0
					 currentReading.longitudeDegrees += (int)(currentReading.longitude/100);
     5f4:	b8 01       	movw	r22, r16
     5f6:	ce 01       	movw	r24, r28
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
     5fe:	1c 82       	std	Y+4, r1	; 0x04
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	0e 94 1d 0b 	call	0x163a	; 0x163a <atol>
     608:	9b 01       	movw	r18, r22
     60a:	ac 01       	movw	r20, r24
     60c:	60 e8       	ldi	r22, 0x80	; 128
     60e:	76 e9       	ldi	r23, 0x96	; 150
     610:	88 e9       	ldi	r24, 0x98	; 152
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 90 0a 	call	0x1520	; 0x1520 <__mulsi3>
     618:	3b 01       	movw	r6, r22
     61a:	4c 01       	movw	r8, r24
     61c:	b7 01       	movw	r22, r14
     61e:	6c 5f       	subi	r22, 0xFC	; 252
     620:	7f 4f       	sbci	r23, 0xFF	; 255
					 currentReading.longitude_fixed = degree + currentReading.minutesLon;
     622:	42 e0       	ldi	r20, 0x02	; 2
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	ce 01       	movw	r24, r28
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
     62e:	0a 5f       	subi	r16, 0xFA	; 250
     630:	1f 4f       	sbci	r17, 0xFF	; 255
     632:	44 e0       	ldi	r20, 0x04	; 4
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	b8 01       	movw	r22, r16
     638:	ce 01       	movw	r24, r28
				  }
				 
				p = strchr(p, ',')+1;
     63a:	03 96       	adiw	r24, 0x03	; 3
     63c:	0e 94 4f 0b 	call	0x169e	; 0x169e <strncpy>
     640:	1f 82       	std	Y+7, r1	; 0x07
     642:	0f 2e       	mov	r0, r31
     644:	f6 ec       	ldi	r31, 0xC6	; 198
     646:	af 2e       	mov	r10, r31
     648:	f0 e0       	ldi	r31, 0x00	; 0
				if (',' != *p)
					{
						if (p[0] == 'W') currentReading.longitudeDegrees *= -1.0;
     64a:	bf 2e       	mov	r11, r31
     64c:	f0 2d       	mov	r31, r0
     64e:	f5 01       	movw	r30, r10
     650:	80 81       	ld	r24, Z
     652:	91 81       	ldd	r25, Z+1	; 0x01
     654:	a2 81       	ldd	r26, Z+2	; 0x02
     656:	b3 81       	ldd	r27, Z+3	; 0x03
     658:	80 93 03 01 	sts	0x0103, r24
     65c:	90 93 04 01 	sts	0x0104, r25
     660:	a0 93 05 01 	sts	0x0105, r26
     664:	b0 93 06 01 	sts	0x0106, r27
     668:	0f 2e       	mov	r0, r31
     66a:	fe eb       	ldi	r31, 0xBE	; 190
     66c:	4f 2e       	mov	r4, r31
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	5f 2e       	mov	r5, r31
     672:	f0 2d       	mov	r31, r0
     674:	f2 01       	movw	r30, r4
     676:	80 81       	ld	r24, Z
     678:	91 81       	ldd	r25, Z+1	; 0x01
     67a:	a2 81       	ldd	r26, Z+2	; 0x02
     67c:	b3 81       	ldd	r27, Z+3	; 0x03
     67e:	80 93 ff 00 	sts	0x00FF, r24
					}
				 
				 
				 
				 p = strchr(p, ',')+1;
     682:	90 93 00 01 	sts	0x0100, r25
     686:	a0 93 01 01 	sts	0x0101, r26
     68a:	b0 93 02 01 	sts	0x0102, r27
     68e:	ce 01       	movw	r24, r28
				 if (',' != *p)
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	0e 94 1d 0b 	call	0x163a	; 0x163a <atol>
     696:	9b 01       	movw	r18, r22
				 {
					 currentReading.fixquality = atoi(p);
     698:	ac 01       	movw	r20, r24
     69a:	a2 e3       	ldi	r26, 0x32	; 50
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__muluhisi3>
     6a2:	23 e0       	ldi	r18, 0x03	; 3
     6a4:	30 e0       	ldi	r19, 0x00	; 0
				 }
				 
				 
				 
				 p = strchr(p, ',')+1;
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divmodsi4>
     6ae:	69 01       	movw	r12, r18
     6b0:	7a 01       	movw	r14, r20
     6b2:	20 93 ca 00 	sts	0x00CA, r18
				 if (',' != *p)
     6b6:	30 93 cb 00 	sts	0x00CB, r19
     6ba:	40 93 cc 00 	sts	0x00CC, r20
     6be:	50 93 cd 00 	sts	0x00CD, r21
				 {
					 previousReading.satellites = currentReading.satellites;
     6c2:	da 01       	movw	r26, r20
     6c4:	c9 01       	movw	r24, r18
     6c6:	86 0d       	add	r24, r6
     6c8:	97 1d       	adc	r25, r7
     6ca:	a8 1d       	adc	r26, r8
     6cc:	b9 1d       	adc	r27, r9
     6ce:	f5 01       	movw	r30, r10
     6d0:	80 83       	st	Z, r24
     6d2:	91 83       	std	Z+1, r25	; 0x01
     6d4:	a2 83       	std	Z+2, r26	; 0x02
     6d6:	b3 83       	std	Z+3, r27	; 0x03
     6d8:	c4 01       	movw	r24, r8
					 currentReading.satellites = atoi(p);
     6da:	b3 01       	movw	r22, r6
     6dc:	20 ea       	ldi	r18, 0xA0	; 160
     6de:	36 e8       	ldi	r19, 0x86	; 134
     6e0:	41 e0       	ldi	r20, 0x01	; 1
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divmodsi4>
				 }
				 
				 
				 p = strchr(p, ',')+1;
     6e8:	ca 01       	movw	r24, r20
     6ea:	b9 01       	movw	r22, r18
     6ec:	0e 94 a1 09 	call	0x1342	; 0x1342 <__floatsisf>
				 
				 p = strchr(p, ',')+1;
     6f0:	4b 01       	movw	r8, r22
     6f2:	5c 01       	movw	r10, r24
     6f4:	c7 01       	movw	r24, r14
     6f6:	b6 01       	movw	r22, r12
     6f8:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
				 if (',' != *p)
     6fc:	2c e9       	ldi	r18, 0x9C	; 156
     6fe:	33 e5       	ldi	r19, 0x53	; 83
     700:	49 ec       	ldi	r20, 0xC9	; 201
				 {
					 previousReading.altitude = currentReading.altitude;
     702:	56 e3       	ldi	r21, 0x36	; 54
     704:	0e 94 2d 0a 	call	0x145a	; 0x145a <__mulsf3>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c5 01       	movw	r24, r10
     70e:	b4 01       	movw	r22, r8
     710:	0e 94 a7 08 	call	0x114e	; 0x114e <__addsf3>
					 currentReading.altitude = atof(p);
     714:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fixunssfsi>
     718:	6b 01       	movw	r12, r22
     71a:	7c 01       	movw	r14, r24
     71c:	d2 01       	movw	r26, r4
     71e:	6d 93       	st	X+, r22
     720:	7d 93       	st	X+, r23
     722:	8d 93       	st	X+, r24
     724:	9c 93       	st	X, r25
				 
				 p = strchr(p, ',')+1;
				 if (',' != *p)
				 {
					 if (p[0] == 'S') currentReading.latitudeDegrees *= -1.0;
					 if (p[0] == 'N') currentReading.lat[0] = 'N';
     726:	13 97       	sbiw	r26, 0x03	; 3
     728:	24 e6       	ldi	r18, 0x64	; 100
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e0       	ldi	r20, 0x00	; 0
			}	
			
		}
		

}
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__udivmodsi4>
     734:	49 01       	movw	r8, r18
     736:	5a 01       	movw	r10, r20
     738:	24 e6       	ldi	r18, 0x64	; 100
     73a:	28 9d       	mul	r18, r8
     73c:	c0 01       	movw	r24, r0
     73e:	29 9d       	mul	r18, r9
     740:	90 0d       	add	r25, r0
     742:	11 24       	eor	r1, r1
     744:	aa 27       	eor	r26, r26
     746:	97 fd       	sbrc	r25, 7
     748:	a0 95       	com	r26
     74a:	ba 2f       	mov	r27, r26
     74c:	a7 01       	movw	r20, r14
     74e:	96 01       	movw	r18, r12
     750:	28 1b       	sub	r18, r24
     752:	39 0b       	sbc	r19, r25
     754:	4a 0b       	sbc	r20, r26
     756:	5b 0b       	sbc	r21, r27
     758:	ca 01       	movw	r24, r20
     75a:	b9 01       	movw	r22, r18
     75c:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
     760:	20 e0       	ldi	r18, 0x00	; 0
					 previousReading.longitude = currentReading.longitude;	
					
					currentReading.minutesLon = 50 * atol(degreebuff) / 3;
					currentReading.longitude_fixed = degree + currentReading.minutesLon;
					currentReading.longitude = degree / 100000 + currentReading.minutesLon * 0.000006F;
					currentReading.longitudeDegrees = (currentReading.longitude-100*(int)(currentReading.longitude/100))/60.0;
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e7       	ldi	r20, 0x70	; 112
     766:	52 e4       	ldi	r21, 0x42	; 66
     768:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divsf3>
     76c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fixunssfsi>
					currentReading.longitudeDegrees += (int)(currentReading.longitude/100);
     770:	aa 24       	eor	r10, r10
     772:	97 fc       	sbrc	r9, 7
     774:	a0 94       	com	r10
     776:	ba 2c       	mov	r11, r10
     778:	86 0e       	add	r8, r22
     77a:	97 1e       	adc	r9, r23
     77c:	a8 1e       	adc	r10, r24
     77e:	b9 1e       	adc	r11, r25
     780:	80 92 c2 00 	sts	0x00C2, r8
     784:	90 92 c3 00 	sts	0x00C3, r9
     788:	a0 92 c4 00 	sts	0x00C4, r10
     78c:	b0 92 c5 00 	sts	0x00C5, r11
					
				}
				p = strchr(p, ',')+1;
     790:	6c e2       	ldi	r22, 0x2C	; 44
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	c8 01       	movw	r24, r16
     796:	0e 94 44 0b 	call	0x1688	; 0x1688 <strchr>
     79a:	8c 01       	movw	r16, r24
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
				if (',' != *p)
				{
					if (p[0] == 'W') currentReading.longitudeDegrees *= -1.0;
     7a0:	dc 01       	movw	r26, r24
     7a2:	11 96       	adiw	r26, 0x01	; 1
     7a4:	8c 91       	ld	r24, X
     7a6:	87 35       	cpi	r24, 0x57	; 87
     7a8:	b1 f4       	brne	.+44     	; 0x7d6 <readGPRMC+0x6e6>
     7aa:	0f 2e       	mov	r0, r31
     7ac:	f2 ec       	ldi	r31, 0xC2	; 194
     7ae:	ef 2e       	mov	r14, r31
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ff 2e       	mov	r15, r31
     7b4:	f0 2d       	mov	r31, r0
     7b6:	f7 01       	movw	r30, r14
     7b8:	60 81       	ld	r22, Z
     7ba:	71 81       	ldd	r23, Z+1	; 0x01
     7bc:	82 81       	ldd	r24, Z+2	; 0x02
     7be:	93 81       	ldd	r25, Z+3	; 0x03
     7c0:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
     7c4:	90 58       	subi	r25, 0x80	; 128
     7c6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fixunssfsi>
     7ca:	d7 01       	movw	r26, r14
     7cc:	6d 93       	st	X+, r22
     7ce:	7d 93       	st	X+, r23
     7d0:	8d 93       	st	X+, r24
     7d2:	9c 93       	st	X, r25
     7d4:	13 97       	sbiw	r26, 0x03	; 3
				}
				
				p = strchr(p, ',')+1;
     7d6:	6c e2       	ldi	r22, 0x2C	; 44
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	c8 01       	movw	r24, r16
     7dc:	0e 94 44 0b 	call	0x1688	; 0x1688 <strchr>
     7e0:	8c 01       	movw	r16, r24
     7e2:	0f 5f       	subi	r16, 0xFF	; 255
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
				if (',' != *p)
     7e6:	fc 01       	movw	r30, r24
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
     7ea:	8c 32       	cpi	r24, 0x2C	; 44
     7ec:	59 f0       	breq	.+22     	; 0x804 <readGPRMC+0x714>
				{
					currentReading.speed = atof(p);
     7ee:	c8 01       	movw	r24, r16
     7f0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <atof>
     7f4:	60 93 d7 00 	sts	0x00D7, r22
     7f8:	70 93 d8 00 	sts	0x00D8, r23
     7fc:	80 93 d9 00 	sts	0x00D9, r24
     800:	90 93 da 00 	sts	0x00DA, r25
				}
				
				p = strchr(p, ',')+1;
     804:	6c e2       	ldi	r22, 0x2C	; 44
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	c8 01       	movw	r24, r16
     80a:	0e 94 44 0b 	call	0x1688	; 0x1688 <strchr>
				if (',' != *p)
     80e:	dc 01       	movw	r26, r24
     810:	11 96       	adiw	r26, 0x01	; 1
     812:	2c 91       	ld	r18, X
     814:	2c 32       	cpi	r18, 0x2C	; 44
     816:	09 f4       	brne	.+2      	; 0x81a <readGPRMC+0x72a>
     818:	6e c0       	rjmp	.+220    	; 0x8f6 <__stack+0x97>
				{
					currentReading.angle = atof(p);
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <atof>
     820:	60 93 db 00 	sts	0x00DB, r22
     824:	70 93 dc 00 	sts	0x00DC, r23
     828:	80 93 dd 00 	sts	0x00DD, r24
     82c:	90 93 de 00 	sts	0x00DE, r25
					//tracking angle!
				}
				p = strchr(p, ',')+1;
				
				return 1;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	67 c0       	rjmp	.+206    	; 0x904 <__stack+0xa5>
			}
		
		
				
		/** Compass **/
		compass.previousAngle=compass.angle;
     836:	60 91 9e 00 	lds	r22, 0x009E
     83a:	70 91 9f 00 	lds	r23, 0x009F
     83e:	80 91 a0 00 	lds	r24, 0x00A0
     842:	90 91 a1 00 	lds	r25, 0x00A1
     846:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fixunssfsi>
     84a:	60 93 a2 00 	sts	0x00A2, r22
     84e:	70 93 a3 00 	sts	0x00A3, r23
     852:	80 93 a4 00 	sts	0x00A4, r24
     856:	90 93 a5 00 	sts	0x00A5, r25
		compass.slope = ((long double)currentReading.latitude_fixed-(long double)previousReading.latitude_fixed) - ((long double)currentReading.longitude_fixed-(long double)previousReading.longitude_fixed);
     85a:	60 91 b4 00 	lds	r22, 0x00B4
     85e:	70 91 b5 00 	lds	r23, 0x00B5
     862:	80 91 b6 00 	lds	r24, 0x00B6
     866:	90 91 b7 00 	lds	r25, 0x00B7
     86a:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
     86e:	6b 01       	movw	r12, r22
     870:	7c 01       	movw	r14, r24
     872:	60 91 07 01 	lds	r22, 0x0107
     876:	70 91 08 01 	lds	r23, 0x0108
     87a:	80 91 09 01 	lds	r24, 0x0109
     87e:	90 91 0a 01 	lds	r25, 0x010A
     882:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
     886:	9b 01       	movw	r18, r22
     888:	ac 01       	movw	r20, r24
     88a:	c7 01       	movw	r24, r14
     88c:	b6 01       	movw	r22, r12
     88e:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
     892:	6b 01       	movw	r12, r22
     894:	7c 01       	movw	r14, r24
     896:	60 91 c6 00 	lds	r22, 0x00C6
     89a:	70 91 c7 00 	lds	r23, 0x00C7
     89e:	80 91 c8 00 	lds	r24, 0x00C8
     8a2:	90 91 c9 00 	lds	r25, 0x00C9
     8a6:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
     8aa:	4b 01       	movw	r8, r22
     8ac:	5c 01       	movw	r10, r24
     8ae:	60 91 03 01 	lds	r22, 0x0103
     8b2:	70 91 04 01 	lds	r23, 0x0104
     8b6:	80 91 05 01 	lds	r24, 0x0105
     8ba:	90 91 06 01 	lds	r25, 0x0106
     8be:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
     8c2:	9b 01       	movw	r18, r22
     8c4:	ac 01       	movw	r20, r24
     8c6:	c5 01       	movw	r24, r10
     8c8:	b4 01       	movw	r22, r8
     8ca:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
     8da:	60 93 9a 00 	sts	0x009A, r22
     8de:	70 93 9b 00 	sts	0x009B, r23
     8e2:	80 93 9c 00 	sts	0x009C, r24
     8e6:	90 93 9d 00 	sts	0x009D, r25
		//compass.angle= atan(compass.slope)*180/pi;
		//A minute (1/60th of a degree) equals 1.852 km :'(
		
		}
		
		return 1;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0a c0       	rjmp	.+20     	; 0x904 <__stack+0xa5>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	07 c0       	rjmp	.+14     	; 0x904 <__stack+0xa5>
					currentReading.angle = atof(p);
					//tracking angle!
				}
				p = strchr(p, ',')+1;
				
				return 1;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <__stack+0xa5>
				
				p = strchr(p, ',')+1; //4
				if (',' != *p)
				{
					if (p[0] == 'S') currentReading.latitudeDegrees *= -1.0;
					if (p[0] == 'N') currentReading.lat[0] = 'N';
     8fc:	8e 34       	cpi	r24, 0x4E	; 78
     8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0xa3>
     900:	68 ce       	rjmp	.-816    	; 0x5d2 <readGPRMC+0x4e2>
     902:	59 ce       	rjmp	.-846    	; 0x5b6 <readGPRMC+0x4c6>
		//A minute (1/60th of a degree) equals 1.852 km :'(
		
		}
		
		return 1;
}
     904:	c5 57       	subi	r28, 0x75	; 117
     906:	df 4f       	sbci	r29, 0xFF	; 255
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	ef 90       	pop	r14
     91e:	df 90       	pop	r13
     920:	cf 90       	pop	r12
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	9f 90       	pop	r9
     928:	8f 90       	pop	r8
     92a:	7f 90       	pop	r7
     92c:	6f 90       	pop	r6
     92e:	5f 90       	pop	r5
     930:	4f 90       	pop	r4
     932:	08 95       	ret

00000934 <main>:

int main(void)
{
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	c8 57       	subi	r28, 0x78	; 120
     93e:	d1 09       	sbc	r29, r1
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
}

static void LCD_Init(void)
{
	// initialize display, cursor off
	lcd_init(LCD_DISP_ON);
     94a:	8c e0       	ldi	r24, 0x0C	; 12
     94c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <lcd_init>

	// clear display and home cursor
	lcd_clrscr();
     950:	0e 94 d3 05 	call	0xba6	; 0xba6 <lcd_clrscr>
{
	LCD_Init();


	// Initialize UART modules
	for (int i = 0; i < serialAvailable(); i++) {
     954:	00 e0       	ldi	r16, 0x00	; 0
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	10 c0       	rjmp	.+32     	; 0x97a <main+0x46>
		serialInit(i, BAUD(9600, F_CPU));
     95a:	63 e3       	ldi	r22, 0x33	; 51
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 2f       	mov	r24, r16
     960:	0e 94 48 06 	call	0xc90	; 0xc90 <serialInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     964:	2f ef       	ldi	r18, 0xFF	; 255
     966:	80 e7       	ldi	r24, 0x70	; 112
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	21 50       	subi	r18, 0x01	; 1
     96c:	80 40       	sbci	r24, 0x00	; 0
     96e:	90 40       	sbci	r25, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <main+0x36>
     972:	00 c0       	rjmp	.+0      	; 0x974 <main+0x40>
     974:	00 00       	nop
{
	LCD_Init();


	// Initialize UART modules
	for (int i = 0; i < serialAvailable(); i++) {
     976:	0f 5f       	subi	r16, 0xFF	; 255
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	0e 94 46 06 	call	0xc8c	; 0xc8c <serialAvailable>
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	08 17       	cp	r16, r24
     982:	19 07       	cpc	r17, r25
     984:	54 f3       	brlt	.-44     	; 0x95a <main+0x26>
		_delay_ms(100);
	}

	//my_serial UART_Init();
	// Enable Interrupts
	sei();
     986:	78 94       	sei
			lcd_puts(itoa(currentReading.seconds, s, 10));
			*/
			//long latitude_fixed; /**< Fixed point latitude value with degrees stored in units of 1/100000 degrees and minutes stored in units of 1/100000 degrees */
			//lcd_puts(itoa(currentReading.latitude_fixed, s, 10)); //!!! promijenjiva vrijednost- zasto??
			lcd_clrscr();
			lcd_putc(currentReading.fix); // 'A' i 'V'
     988:	0f 2e       	mov	r0, r31
     98a:	f6 ed       	ldi	r31, 0xD6	; 214
     98c:	af 2e       	mov	r10, r31
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	bf 2e       	mov	r11, r31
     992:	f0 2d       	mov	r31, r0
			
			//lcd_puts(itoa(currentReading.angle, s, 10)); //!!!!!
			//lcd_puts(itoa(currentReading.speed, s, 10)); //!!!!!
			
			
			lcd_puts(ltoa(currentReading.latitude_fixed,s,10));
     994:	04 eb       	ldi	r16, 0xB4	; 180
     996:	10 e0       	ldi	r17, 0x00	; 0
			lcd_gotoxy(0,2);
			lcd_puts(ltoa(currentReading.longitude_fixed,s,10));
     998:	0f 2e       	mov	r0, r31
     99a:	f6 ec       	ldi	r31, 0xC6	; 198
     99c:	cf 2e       	mov	r12, r31
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	df 2e       	mov	r13, r31
     9a2:	f0 2d       	mov	r31, r0
		
			lcd_gotoxy(11,1);
			lcd_puts(itoa(currentReading.hours,s,10));
     9a4:	0f 2e       	mov	r0, r31
     9a6:	f6 ea       	ldi	r31, 0xA6	; 166
     9a8:	ef 2e       	mov	r14, r31
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	ff 2e       	mov	r15, r31
     9ae:	f0 2d       	mov	r31, r0
			lcd_putc(':');
			lcd_puts(itoa(currentReading.minutes,s,10));
     9b0:	0f 2e       	mov	r0, r31
     9b2:	f8 ea       	ldi	r31, 0xA8	; 168
     9b4:	8f 2e       	mov	r8, r31
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	9f 2e       	mov	r9, r31
     9ba:	f0 2d       	mov	r31, r0
	int MAX=0;
	int fix;
	while(1)
    {
		MAX++;
		fix=readGPRMC();
     9bc:	0e 94 78 00 	call	0xf0	; 0xf0 <readGPRMC>
		//readGPGGA();
		//if(1){
		if(fix){
     9c0:	89 2b       	or	r24, r25
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <main+0x92>
     9c4:	72 c0       	rjmp	.+228    	; 0xaaa <main+0x176>
			lcd_puts(itoa(currentReading.minutes, s, 10));
			lcd_puts(itoa(currentReading.seconds, s, 10));
			*/
			//long latitude_fixed; /**< Fixed point latitude value with degrees stored in units of 1/100000 degrees and minutes stored in units of 1/100000 degrees */
			//lcd_puts(itoa(currentReading.latitude_fixed, s, 10)); //!!! promijenjiva vrijednost- zasto??
			lcd_clrscr();
     9c6:	0e 94 d3 05 	call	0xba6	; 0xba6 <lcd_clrscr>
			lcd_putc(currentReading.fix); // 'A' i 'V'
     9ca:	f5 01       	movw	r30, r10
     9cc:	80 81       	ld	r24, Z
     9ce:	0e 94 d7 05 	call	0xbae	; 0xbae <lcd_putc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     9d2:	f8 01       	movw	r30, r16
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	82 81       	ldd	r24, Z+2	; 0x02
     9da:	93 81       	ldd	r25, Z+3	; 0x03
     9dc:	2a e0       	ldi	r18, 0x0A	; 10
     9de:	ae 01       	movw	r20, r28
     9e0:	4f 5f       	subi	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e 94 83 0b 	call	0x1706	; 0x1706 <__ltoa_ncheck>
			
			//lcd_puts(itoa(currentReading.angle, s, 10)); //!!!!!
			//lcd_puts(itoa(currentReading.speed, s, 10)); //!!!!!
			
			
			lcd_puts(ltoa(currentReading.latitude_fixed,s,10));
     9e8:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_puts>
			lcd_gotoxy(0,2);
     9ec:	62 e0       	ldi	r22, 0x02	; 2
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 c9 05 	call	0xb92	; 0xb92 <lcd_gotoxy>
     9f4:	f6 01       	movw	r30, r12
     9f6:	60 81       	ld	r22, Z
     9f8:	71 81       	ldd	r23, Z+1	; 0x01
     9fa:	82 81       	ldd	r24, Z+2	; 0x02
     9fc:	93 81       	ldd	r25, Z+3	; 0x03
     9fe:	2a e0       	ldi	r18, 0x0A	; 10
     a00:	ae 01       	movw	r20, r28
     a02:	4f 5f       	subi	r20, 0xFF	; 255
     a04:	5f 4f       	sbci	r21, 0xFF	; 255
     a06:	0e 94 83 0b 	call	0x1706	; 0x1706 <__ltoa_ncheck>
			lcd_puts(ltoa(currentReading.longitude_fixed,s,10));
     a0a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_puts>
		
			lcd_gotoxy(11,1);
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	8b e0       	ldi	r24, 0x0B	; 11
     a12:	0e 94 c9 05 	call	0xb92	; 0xb92 <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     a16:	4a e0       	ldi	r20, 0x0A	; 10
     a18:	be 01       	movw	r22, r28
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	f7 01       	movw	r30, r14
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__itoa_ncheck>
			lcd_puts(itoa(currentReading.hours,s,10));
     a28:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_puts>
			lcd_putc(':');
     a2c:	8a e3       	ldi	r24, 0x3A	; 58
     a2e:	0e 94 d7 05 	call	0xbae	; 0xbae <lcd_putc>
     a32:	4a e0       	ldi	r20, 0x0A	; 10
     a34:	be 01       	movw	r22, r28
     a36:	6f 5f       	subi	r22, 0xFF	; 255
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	f4 01       	movw	r30, r8
     a3c:	80 81       	ld	r24, Z
     a3e:	91 81       	ldd	r25, Z+1	; 0x01
     a40:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__itoa_ncheck>
			lcd_puts(itoa(currentReading.minutes,s,10));
     a44:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_puts>
     a48:	ff ef       	ldi	r31, 0xFF	; 255
     a4a:	29 e6       	ldi	r18, 0x69	; 105
     a4c:	88 e1       	ldi	r24, 0x18	; 24
     a4e:	f1 50       	subi	r31, 0x01	; 1
     a50:	20 40       	sbci	r18, 0x00	; 0
     a52:	80 40       	sbci	r24, 0x00	; 0
     a54:	e1 f7       	brne	.-8      	; 0xa4e <main+0x11a>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <main+0x124>
     a58:	00 00       	nop
			_delay_ms(1000);
			if(currentReading.latitude_fixed == atol("7816")){
     a5a:	f8 01       	movw	r30, r16
     a5c:	40 80       	ld	r4, Z
     a5e:	51 80       	ldd	r5, Z+1	; 0x01
     a60:	62 80       	ldd	r6, Z+2	; 0x02
     a62:	73 80       	ldd	r7, Z+3	; 0x03
     a64:	80 e9       	ldi	r24, 0x90	; 144
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 1d 0b 	call	0x163a	; 0x163a <atol>
     a6c:	46 16       	cp	r4, r22
     a6e:	57 06       	cpc	r5, r23
     a70:	68 06       	cpc	r6, r24
     a72:	79 06       	cpc	r7, r25
     a74:	41 f4       	brne	.+16     	; 0xa86 <main+0x152>
				lcd_gotoxy(0,1);
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0e 94 c9 05 	call	0xb92	; 0xb92 <lcd_gotoxy>
				lcd_puts_P("^");				
     a7e:	84 e5       	ldi	r24, 0x54	; 84
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <lcd_puts_p>
			}
			lcd_clrscr();
     a86:	0e 94 d3 05 	call	0xba6	; 0xba6 <lcd_clrscr>
			lcd_puts(storesGPRMC);
     a8a:	8f ed       	ldi	r24, 0xDF	; 223
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_puts>
     a92:	ff ef       	ldi	r31, 0xFF	; 255
     a94:	23 ed       	ldi	r18, 0xD3	; 211
     a96:	80 e3       	ldi	r24, 0x30	; 48
     a98:	f1 50       	subi	r31, 0x01	; 1
     a9a:	20 40       	sbci	r18, 0x00	; 0
     a9c:	80 40       	sbci	r24, 0x00	; 0
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <main+0x164>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <main+0x16e>
     aa2:	00 00       	nop
			_delay_ms(2000);
			lcd_clrscr();
     aa4:	0e 94 d3 05 	call	0xba6	; 0xba6 <lcd_clrscr>
     aa8:	89 cf       	rjmp	.-238    	; 0x9bc <main+0x88>
				
		}else lcd_puts("bcm");
     aaa:	85 e9       	ldi	r24, 0x95	; 149
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_puts>
     ab2:	84 cf       	rjmp	.-248    	; 0x9bc <main+0x88>

00000ab4 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     ab4:	97 9a       	sbi	0x12, 7	; 18
    lcd_e_delay();
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <toggle_e+0x4>
    lcd_e_low();
     ab8:	97 98       	cbi	0x12, 7	; 18
     aba:	08 95       	ret

00000abc <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     abc:	cf 93       	push	r28
     abe:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     ac0:	66 23       	and	r22, r22
     ac2:	11 f0       	breq	.+4      	; 0xac8 <lcd_write+0xc>
       lcd_rs_high();
     ac4:	95 9a       	sbi	0x12, 5	; 18
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     ac8:	95 98       	cbi	0x12, 5	; 18
    }
    lcd_rw_low();
     aca:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     acc:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     ace:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     ad0:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     ad2:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     ad4:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     ad6:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     ad8:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     ada:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     adc:	cc 23       	and	r28, r28
     ade:	0c f4       	brge	.+2      	; 0xae2 <lcd_write+0x26>
     ae0:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     ae2:	c6 fd       	sbrc	r28, 6
     ae4:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     ae6:	c5 fd       	sbrc	r28, 5
     ae8:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     aea:	c4 fd       	sbrc	r28, 4
     aec:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();
     aee:	0e 94 5a 05 	call	0xab4	; 0xab4 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     af2:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     af4:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     af6:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     af8:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     afa:	c3 fd       	sbrc	r28, 3
     afc:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     afe:	c2 fd       	sbrc	r28, 2
     b00:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     b02:	c1 fd       	sbrc	r28, 1
     b04:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     b06:	c0 fd       	sbrc	r28, 0
     b08:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();        
     b0a:	0e 94 5a 05 	call	0xab4	; 0xab4 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     b0e:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     b10:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     b12:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     b14:	c7 9a       	sbi	0x18, 7	; 24
    }
}
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     b1a:	88 23       	and	r24, r24
     b1c:	11 f0       	breq	.+4      	; 0xb22 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     b1e:	95 9a       	sbi	0x12, 5	; 18
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     b22:	95 98       	cbi	0x12, 5	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
     b24:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     b26:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     b28:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     b2a:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     b2c:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
     b2e:	97 9a       	sbi	0x12, 7	; 18
        lcd_e_delay();        
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     b32:	b4 99       	sbic	0x16, 4	; 22
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     b3a:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     b3c:	b5 99       	sbic	0x16, 5	; 22
     b3e:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     b40:	b6 99       	sbic	0x16, 6	; 22
     b42:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     b44:	b7 99       	sbic	0x16, 7	; 22
     b46:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     b48:	97 98       	cbi	0x12, 7	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
     b4c:	97 9a       	sbi	0x12, 7	; 18
        lcd_e_delay();
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     b50:	b4 99       	sbic	0x16, 4	; 22
     b52:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     b54:	b5 99       	sbic	0x16, 5	; 22
     b56:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     b58:	b6 99       	sbic	0x16, 6	; 22
     b5a:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     b5c:	b7 99       	sbic	0x16, 7	; 22
     b5e:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     b60:	97 98       	cbi	0x12, 7	; 18
    }
    return data;
}
     b62:	08 95       	ret

00000b64 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	0e 94 8d 05 	call	0xb1a	; 0xb1a <lcd_read>
     b6a:	88 23       	and	r24, r24
     b6c:	dc f3       	brlt	.-10     	; 0xb64 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	f1 f7       	brne	.-4      	; 0xb72 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	0e 94 8d 05 	call	0xb1a	; 0xb1a <lcd_read>
    
}/* lcd_waitbusy */
     b7c:	08 95       	ret

00000b7e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     b7e:	cf 93       	push	r28
     b80:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     b82:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_waitbusy>
    lcd_write(cmd,0);
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	8c 2f       	mov	r24, r28
     b8a:	0e 94 5e 05 	call	0xabc	; 0xabc <lcd_write>
}
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     b92:	61 11       	cpse	r22, r1
     b94:	04 c0       	rjmp	.+8      	; 0xb9e <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     b96:	80 58       	subi	r24, 0x80	; 128
     b98:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_command>
     b9c:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     b9e:	80 54       	subi	r24, 0x40	; 64
     ba0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_command>
     ba4:	08 95       	ret

00000ba6 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_command>
     bac:	08 95       	ret

00000bae <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     bae:	cf 93       	push	r28
     bb0:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     bb2:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_waitbusy>
    if (c=='\n')
     bb6:	ca 30       	cpi	r28, 0x0A	; 10
     bb8:	49 f4       	brne	.+18     	; 0xbcc <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     bba:	80 34       	cpi	r24, 0x40	; 64
     bbc:	10 f4       	brcc	.+4      	; 0xbc2 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
     bc2:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     bc4:	80 58       	subi	r24, 0x80	; 128
     bc6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_command>
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	8c 2f       	mov	r24, r28
     bd0:	0e 94 5e 05 	call	0xabc	; 0xabc <lcd_write>
    }

}/* lcd_putc */
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
     bdc:	ec 01       	movw	r28, r24
     bde:	21 96       	adiw	r28, 0x01	; 1
     be0:	fc 01       	movw	r30, r24
     be2:	80 81       	ld	r24, Z
     be4:	88 23       	and	r24, r24
     be6:	29 f0       	breq	.+10     	; 0xbf2 <lcd_puts+0x1a>
        lcd_putc(c);
     be8:	0e 94 d7 05 	call	0xbae	; 0xbae <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     bec:	89 91       	ld	r24, Y+
     bee:	81 11       	cpse	r24, r1
     bf0:	fb cf       	rjmp	.-10     	; 0xbe8 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     bfc:	ec 01       	movw	r28, r24
     bfe:	21 96       	adiw	r28, 0x01	; 1
     c00:	fc 01       	movw	r30, r24
     c02:	84 91       	lpm	r24, Z
     c04:	88 23       	and	r24, r24
     c06:	39 f0       	breq	.+14     	; 0xc16 <lcd_puts_p+0x1e>
        lcd_putc(c);
     c08:	0e 94 d7 05 	call	0xbae	; 0xbae <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     c0c:	fe 01       	movw	r30, r28
     c0e:	84 91       	lpm	r24, Z
     c10:	21 96       	adiw	r28, 0x01	; 1
     c12:	81 11       	cpse	r24, r1
     c14:	f9 cf       	rjmp	.-14     	; 0xc08 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     c1c:	cf 93       	push	r28
     c1e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     c20:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     c22:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     c24:	8f 9a       	sbi	0x11, 7	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     c26:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     c28:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     c2a:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     c2c:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     c2e:	e0 e3       	ldi	r30, 0x30	; 48
     c30:	f3 e7       	ldi	r31, 0x73	; 115
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     c36:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     c38:	c4 9a       	sbi	0x18, 4	; 24
    lcd_e_toggle();
     c3a:	0e 94 5a 05 	call	0xab4	; 0xab4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     c3e:	e0 ef       	ldi	r30, 0xF0	; 240
     c40:	f3 e2       	ldi	r31, 0x23	; 35
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     c46:	0e 94 5a 05 	call	0xab4	; 0xab4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     c4a:	e5 e7       	ldi	r30, 0x75	; 117
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     c52:	0e 94 5a 05 	call	0xab4	; 0xab4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     c56:	e5 e7       	ldi	r30, 0x75	; 117
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     c5e:	c4 98       	cbi	0x18, 4	; 24
    lcd_e_toggle();
     c60:	0e 94 5a 05 	call	0xab4	; 0xab4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     c64:	e5 e7       	ldi	r30, 0x75	; 117
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     c6c:	88 e2       	ldi	r24, 0x28	; 40
     c6e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     c72:	88 e0       	ldi	r24, 0x08	; 8
     c74:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     c78:	0e 94 d3 05 	call	0xba6	; 0xba6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     c82:	8c 2f       	mov	r24, r28
     c84:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_command>

}/* lcd_init */
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <serialAvailable>:
uint8_t volatile rxBufferElements[UART_COUNT];
#endif

uint8_t serialAvailable(void) {
    return UART_COUNT;
}
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	08 95       	ret

00000c90 <serialInit>:

void serialInit(uint8_t uart, uint16_t baud) {
    if (uart >= UART_COUNT)
     c90:	81 11       	cpse	r24, r1
     c92:	5e c0       	rjmp	.+188    	; 0xd50 <serialInit+0xc0>
        return;

    // Initialize state variables
    rxRead[uart] = 0;
     c94:	10 92 15 01 	sts	0x0115, r1
     c98:	10 92 14 01 	sts	0x0114, r1
    rxWrite[uart] = 0;
     c9c:	10 92 0c 01 	sts	0x010C, r1
     ca0:	10 92 0b 01 	sts	0x010B, r1
    txRead[uart] = 0;
     ca4:	10 92 0f 01 	sts	0x010F, r1
     ca8:	10 92 0e 01 	sts	0x010E, r1
    txWrite[uart] = 0;
     cac:	10 92 11 01 	sts	0x0111, r1
     cb0:	10 92 10 01 	sts	0x0110, r1
    shouldStartTransmission[uart] = 1;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	80 93 13 01 	sts	0x0113, r24
#ifdef FLOWCONTROL
    sendThisNext[uart] = 0;
     cba:	10 92 12 01 	sts	0x0112, r1
    flow[uart] = 1;
     cbe:	80 93 0d 01 	sts	0x010D, r24
    rxBufferElements[uart] = 0;
     cc2:	10 92 46 01 	sts	0x0146, r1
#endif

    // Default Configuration: 8N1
    *serialRegisters[uart][SERIALC] = (1 << serialBits[uart][SERIALUCSZ0]) | (1 << serialBits[uart][SERIALUCSZ1]);
     cc6:	e0 91 6b 00 	lds	r30, 0x006B
     cca:	f0 91 6c 00 	lds	r31, 0x006C
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	ac 01       	movw	r20, r24
     cd4:	00 90 61 00 	lds	r0, 0x0061
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <serialInit+0x4e>
     cda:	44 0f       	add	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <serialInit+0x4a>
     ce2:	9c 01       	movw	r18, r24
     ce4:	00 90 60 00 	lds	r0, 0x0060
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <serialInit+0x5e>
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <serialInit+0x5a>
     cf2:	24 2b       	or	r18, r20
     cf4:	20 83       	st	Z, r18

    // Set baudrate
#if SERIALBAUDBIT == 8
    *serialRegisters[uart][SERIALUBRRH] = (baud >> 8);
     cf6:	e0 91 6f 00 	lds	r30, 0x006F
     cfa:	f0 91 70 00 	lds	r31, 0x0070
     cfe:	70 83       	st	Z, r23
    *serialRegisters[uart][SERIALUBRRL] = baud;
     d00:	e0 91 71 00 	lds	r30, 0x0071
     d04:	f0 91 72 00 	lds	r31, 0x0072
     d08:	60 83       	st	Z, r22
#else
    *serialBaudRegisters[uart] = baud;
#endif

    *serialRegisters[uart][SERIALB] = (1 << serialBits[uart][SERIALRXCIE]); // Enable Interrupts
     d0a:	e9 e6       	ldi	r30, 0x69	; 105
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	a0 81       	ld	r26, Z
     d10:	b1 81       	ldd	r27, Z+1	; 0x01
     d12:	9c 01       	movw	r18, r24
     d14:	00 90 62 00 	lds	r0, 0x0062
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <serialInit+0x8e>
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <serialInit+0x8a>
     d22:	2c 93       	st	X, r18
    *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALRXEN]) | (1 << serialBits[uart][SERIALTXEN]); // Enable Receiver/Transmitter
     d24:	01 90       	ld	r0, Z+
     d26:	f0 81       	ld	r31, Z
     d28:	e0 2d       	mov	r30, r0
     d2a:	40 81       	ld	r20, Z
     d2c:	9c 01       	movw	r18, r24
     d2e:	00 90 63 00 	lds	r0, 0x0063
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <serialInit+0xa8>
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <serialInit+0xa4>
     d3c:	00 90 64 00 	lds	r0, 0x0064
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <serialInit+0xb6>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <serialInit+0xb2>
     d4a:	82 2b       	or	r24, r18
     d4c:	84 2b       	or	r24, r20
     d4e:	80 83       	st	Z, r24
     d50:	08 95       	ret

00000d52 <serialHasChar>:
// ---------------------
// |     Reception     |
// ---------------------

uint8_t serialHasChar(uint8_t uart) {
    if (uart >= UART_COUNT)
     d52:	81 11       	cpse	r24, r1
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <serialHasChar+0x20>
        return 0;

    if (rxRead[uart] != rxWrite[uart]) { // True if char available
     d56:	40 91 14 01 	lds	r20, 0x0114
     d5a:	50 91 15 01 	lds	r21, 0x0115
     d5e:	20 91 0b 01 	lds	r18, 0x010B
     d62:	30 91 0c 01 	lds	r19, 0x010C
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	42 17       	cp	r20, r18
     d6a:	53 07       	cpc	r21, r19
     d6c:	19 f4       	brne	.+6      	; 0xd74 <serialHasChar+0x22>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	08 95       	ret
// |     Reception     |
// ---------------------

uint8_t serialHasChar(uint8_t uart) {
    if (uart >= UART_COUNT)
        return 0;
     d72:	80 e0       	ldi	r24, 0x00	; 0
    if (rxRead[uart] != rxWrite[uart]) { // True if char available
        return 1;
    } else {
        return 0;
    }
}
     d74:	08 95       	ret

00000d76 <serialGet>:
    while(!serialHasChar(uart));
    return serialGet(uart);
}

uint8_t serialGet(uint8_t uart) {
    if (uart >= UART_COUNT)
     d76:	81 11       	cpse	r24, r1
     d78:	6c c0       	rjmp	.+216    	; 0xe52 <serialGet+0xdc>
        return 0;

    uint8_t c;

#ifdef FLOWCONTROL
    rxBufferElements[uart]--;
     d7a:	80 91 46 01 	lds	r24, 0x0146
     d7e:	81 50       	subi	r24, 0x01	; 1
     d80:	80 93 46 01 	sts	0x0146, r24
    if ((flow[uart] == 0) && (rxBufferElements[uart] <= FLOWMARK)) {
     d84:	80 91 0d 01 	lds	r24, 0x010D
     d88:	81 11       	cpse	r24, r1
     d8a:	33 c0       	rjmp	.+102    	; 0xdf2 <serialGet+0x7c>
     d8c:	80 91 46 01 	lds	r24, 0x0146
     d90:	86 30       	cpi	r24, 0x06	; 6
     d92:	78 f5       	brcc	.+94     	; 0xdf2 <serialGet+0x7c>
        while (sendThisNext[uart] != 0);
     d94:	80 91 12 01 	lds	r24, 0x0112
     d98:	81 11       	cpse	r24, r1
     d9a:	fc cf       	rjmp	.-8      	; 0xd94 <serialGet+0x1e>
        sendThisNext[uart] = XON;
     d9c:	81 e1       	ldi	r24, 0x11	; 17
     d9e:	80 93 12 01 	sts	0x0112, r24
        flow[uart] = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 0d 01 	sts	0x010D, r24
        if (shouldStartTransmission[uart]) {
     da8:	80 91 13 01 	lds	r24, 0x0113
     dac:	88 23       	and	r24, r24
     dae:	09 f1       	breq	.+66     	; 0xdf2 <serialGet+0x7c>
            shouldStartTransmission[uart] = 0;
     db0:	10 92 13 01 	sts	0x0113, r1
            *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALUDRIE]); // Enable Interrupt
     db4:	e0 91 69 00 	lds	r30, 0x0069
     db8:	f0 91 6a 00 	lds	r31, 0x006A
     dbc:	40 81       	ld	r20, Z
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	9c 01       	movw	r18, r24
     dc4:	00 90 65 00 	lds	r0, 0x0065
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <serialGet+0x58>
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <serialGet+0x54>
     dd2:	24 2b       	or	r18, r20
     dd4:	20 83       	st	Z, r18
            *serialRegisters[uart][SERIALA] |= (1 << serialBits[uart][SERIALUDRE]); // Trigger Interrupt
     dd6:	e0 91 6d 00 	lds	r30, 0x006D
     dda:	f0 91 6e 00 	lds	r31, 0x006E
     dde:	20 81       	ld	r18, Z
     de0:	00 90 66 00 	lds	r0, 0x0066
     de4:	02 c0       	rjmp	.+4      	; 0xdea <serialGet+0x74>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <serialGet+0x70>
     dee:	82 2b       	or	r24, r18
     df0:	80 83       	st	Z, r24
        }
    }
#endif

    if (rxRead[uart] != rxWrite[uart]) {
     df2:	20 91 14 01 	lds	r18, 0x0114
     df6:	30 91 15 01 	lds	r19, 0x0115
     dfa:	80 91 0b 01 	lds	r24, 0x010B
     dfe:	90 91 0c 01 	lds	r25, 0x010C
     e02:	28 17       	cp	r18, r24
     e04:	39 07       	cpc	r19, r25
     e06:	39 f1       	breq	.+78     	; 0xe56 <serialGet+0xe0>
        c = rxBuffer[uart][rxRead[uart]];
     e08:	e0 91 14 01 	lds	r30, 0x0114
     e0c:	f0 91 15 01 	lds	r31, 0x0115
     e10:	ea 5e       	subi	r30, 0xEA	; 234
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	80 81       	ld	r24, Z
        rxBuffer[uart][rxRead[uart]] = 0;
     e16:	e0 91 14 01 	lds	r30, 0x0114
     e1a:	f0 91 15 01 	lds	r31, 0x0115
     e1e:	ea 5e       	subi	r30, 0xEA	; 234
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	10 82       	st	Z, r1
        if (rxRead[uart] < (RX_BUFFER_SIZE - 1)) {
     e24:	20 91 14 01 	lds	r18, 0x0114
     e28:	30 91 15 01 	lds	r19, 0x0115
     e2c:	2f 31       	cpi	r18, 0x1F	; 31
     e2e:	31 05       	cpc	r19, r1
     e30:	58 f4       	brcc	.+22     	; 0xe48 <serialGet+0xd2>
            rxRead[uart]++;
     e32:	20 91 14 01 	lds	r18, 0x0114
     e36:	30 91 15 01 	lds	r19, 0x0115
     e3a:	2f 5f       	subi	r18, 0xFF	; 255
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	30 93 15 01 	sts	0x0115, r19
     e42:	20 93 14 01 	sts	0x0114, r18
     e46:	08 95       	ret
        } else {
            rxRead[uart] = 0;
     e48:	10 92 15 01 	sts	0x0115, r1
     e4c:	10 92 14 01 	sts	0x0114, r1
     e50:	08 95       	ret
    return serialGet(uart);
}

uint8_t serialGet(uint8_t uart) {
    if (uart >= UART_COUNT)
        return 0;
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	08 95       	ret
        } else {
            rxRead[uart] = 0;
        }
        return c;
    } else {
        return 0;
     e56:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     e58:	08 95       	ret

00000e5a <serialReceiveInterrupt>:
    } else {
        return 1;
    }
}

void serialReceiveInterrupt(uint8_t uart) {
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
    rxBuffer[uart][rxWrite[uart]] = *serialRegisters[uart][SERIALDATA];
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9c 01       	movw	r18, r24
     e62:	22 0f       	add	r18, r18
     e64:	33 1f       	adc	r19, r19
     e66:	f9 01       	movw	r30, r18
     e68:	e5 5f       	subi	r30, 0xF5	; 245
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	40 81       	ld	r20, Z
     e6e:	51 81       	ldd	r21, Z+1	; 0x01
     e70:	28 0f       	add	r18, r24
     e72:	39 1f       	adc	r19, r25
     e74:	d9 01       	movw	r26, r18
     e76:	aa 0f       	add	r26, r26
     e78:	bb 1f       	adc	r27, r27
     e7a:	aa 0f       	add	r26, r26
     e7c:	bb 1f       	adc	r27, r27
     e7e:	a9 59       	subi	r26, 0x99	; 153
     e80:	bf 4f       	sbci	r27, 0xFF	; 255
     e82:	0d 90       	ld	r0, X+
     e84:	bc 91       	ld	r27, X
     e86:	a0 2d       	mov	r26, r0
     e88:	2c 91       	ld	r18, X
     e8a:	dc 01       	movw	r26, r24
     e8c:	aa 0f       	add	r26, r26
     e8e:	bb 1f       	adc	r27, r27
     e90:	a2 95       	swap	r26
     e92:	b2 95       	swap	r27
     e94:	b0 7f       	andi	r27, 0xF0	; 240
     e96:	ba 27       	eor	r27, r26
     e98:	a0 7f       	andi	r26, 0xF0	; 240
     e9a:	ba 27       	eor	r27, r26
     e9c:	a4 0f       	add	r26, r20
     e9e:	b5 1f       	adc	r27, r21
     ea0:	aa 5e       	subi	r26, 0xEA	; 234
     ea2:	be 4f       	sbci	r27, 0xFE	; 254
     ea4:	2c 93       	st	X, r18
    if (rxWrite[uart] < (RX_BUFFER_SIZE - 1)) {
     ea6:	20 81       	ld	r18, Z
     ea8:	31 81       	ldd	r19, Z+1	; 0x01
     eaa:	2f 31       	cpi	r18, 0x1F	; 31
     eac:	31 05       	cpc	r19, r1
     eae:	60 f4       	brcc	.+24     	; 0xec8 <serialReceiveInterrupt+0x6e>
        rxWrite[uart]++;
     eb0:	fc 01       	movw	r30, r24
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	e5 5f       	subi	r30, 0xF5	; 245
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	20 81       	ld	r18, Z
     ebc:	31 81       	ldd	r19, Z+1	; 0x01
     ebe:	2f 5f       	subi	r18, 0xFF	; 255
     ec0:	3f 4f       	sbci	r19, 0xFF	; 255
     ec2:	31 83       	std	Z+1, r19	; 0x01
     ec4:	20 83       	st	Z, r18
     ec6:	07 c0       	rjmp	.+14     	; 0xed6 <serialReceiveInterrupt+0x7c>
    } else {
        rxWrite[uart] = 0;
     ec8:	fc 01       	movw	r30, r24
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	e5 5f       	subi	r30, 0xF5	; 245
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	11 82       	std	Z+1, r1	; 0x01
     ed4:	10 82       	st	Z, r1
    }

#ifdef FLOWCONTROL
    rxBufferElements[uart]++;
     ed6:	fc 01       	movw	r30, r24
     ed8:	ea 5b       	subi	r30, 0xBA	; 186
     eda:	fe 4f       	sbci	r31, 0xFE	; 254
     edc:	20 81       	ld	r18, Z
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	20 83       	st	Z, r18
    if ((flow[uart] == 1) && (rxBufferElements[uart] >= (RX_BUFFER_SIZE - FLOWMARK))) {
     ee2:	fc 01       	movw	r30, r24
     ee4:	e3 5f       	subi	r30, 0xF3	; 243
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	20 81       	ld	r18, Z
     eea:	21 30       	cpi	r18, 0x01	; 1
     eec:	09 f0       	breq	.+2      	; 0xef0 <serialReceiveInterrupt+0x96>
     eee:	4d c0       	rjmp	.+154    	; 0xf8a <serialReceiveInterrupt+0x130>
     ef0:	fc 01       	movw	r30, r24
     ef2:	ea 5b       	subi	r30, 0xBA	; 186
     ef4:	fe 4f       	sbci	r31, 0xFE	; 254
     ef6:	20 81       	ld	r18, Z
     ef8:	2b 31       	cpi	r18, 0x1B	; 27
     efa:	08 f4       	brcc	.+2      	; 0xefe <serialReceiveInterrupt+0xa4>
     efc:	46 c0       	rjmp	.+140    	; 0xf8a <serialReceiveInterrupt+0x130>
        sendThisNext[uart] = XOFF;
     efe:	23 e1       	ldi	r18, 0x13	; 19
     f00:	fc 01       	movw	r30, r24
     f02:	ee 5e       	subi	r30, 0xEE	; 238
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	20 83       	st	Z, r18
        flow[uart] = 0;
     f08:	fc 01       	movw	r30, r24
     f0a:	e3 5f       	subi	r30, 0xF3	; 243
     f0c:	fe 4f       	sbci	r31, 0xFE	; 254
     f0e:	10 82       	st	Z, r1
        if (shouldStartTransmission[uart]) {
     f10:	fc 01       	movw	r30, r24
     f12:	ed 5e       	subi	r30, 0xED	; 237
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	20 81       	ld	r18, Z
     f18:	22 23       	and	r18, r18
     f1a:	b9 f1       	breq	.+110    	; 0xf8a <serialReceiveInterrupt+0x130>
            shouldStartTransmission[uart] = 0;
     f1c:	fc 01       	movw	r30, r24
     f1e:	ed 5e       	subi	r30, 0xED	; 237
     f20:	fe 4f       	sbci	r31, 0xFE	; 254
     f22:	10 82       	st	Z, r1
            *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALUDRIE]); // Enable Interrupt
     f24:	fc 01       	movw	r30, r24
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	e8 0f       	add	r30, r24
     f2c:	f9 1f       	adc	r31, r25
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	e9 59       	subi	r30, 0x99	; 153
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	c2 81       	ldd	r28, Z+2	; 0x02
     f3c:	d3 81       	ldd	r29, Z+3	; 0x03
     f3e:	48 81       	ld	r20, Y
     f40:	dc 01       	movw	r26, r24
     f42:	aa 0f       	add	r26, r26
     f44:	bb 1f       	adc	r27, r27
     f46:	aa 0f       	add	r26, r26
     f48:	bb 1f       	adc	r27, r27
     f4a:	aa 0f       	add	r26, r26
     f4c:	bb 1f       	adc	r27, r27
     f4e:	a8 1b       	sub	r26, r24
     f50:	b9 0b       	sbc	r27, r25
     f52:	a0 5a       	subi	r26, 0xA0	; 160
     f54:	bf 4f       	sbci	r27, 0xFF	; 255
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9c 01       	movw	r18, r24
     f5c:	15 96       	adiw	r26, 0x05	; 5
     f5e:	0c 90       	ld	r0, X
     f60:	15 97       	sbiw	r26, 0x05	; 5
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <serialReceiveInterrupt+0x10e>
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <serialReceiveInterrupt+0x10a>
     f6c:	24 2b       	or	r18, r20
     f6e:	28 83       	st	Y, r18
            *serialRegisters[uart][SERIALA] |= (1 << serialBits[uart][SERIALUDRE]); // Trigger Interrupt
     f70:	06 80       	ldd	r0, Z+6	; 0x06
     f72:	f7 81       	ldd	r31, Z+7	; 0x07
     f74:	e0 2d       	mov	r30, r0
     f76:	20 81       	ld	r18, Z
     f78:	16 96       	adiw	r26, 0x06	; 6
     f7a:	0c 90       	ld	r0, X
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <serialReceiveInterrupt+0x128>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <serialReceiveInterrupt+0x124>
     f86:	82 2b       	or	r24, r18
     f88:	80 83       	st	Z, r24
        }
    }
#endif
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <serialTransmitInterrupt>:

void serialTransmitInterrupt(uint8_t uart) {
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
#ifdef FLOWCONTROL
    if (sendThisNext[uart]) {
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	fc 01       	movw	r30, r24
     f98:	ee 5e       	subi	r30, 0xEE	; 238
     f9a:	fe 4f       	sbci	r31, 0xFE	; 254
     f9c:	20 81       	ld	r18, Z
     f9e:	22 23       	and	r18, r18
     fa0:	a1 f0       	breq	.+40     	; 0xfca <serialTransmitInterrupt+0x3a>
        *serialRegisters[uart][SERIALDATA] = sendThisNext[uart];
     fa2:	fc 01       	movw	r30, r24
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	e8 0f       	add	r30, r24
     faa:	f9 1f       	adc	r31, r25
     fac:	ee 0f       	add	r30, r30
     fae:	ff 1f       	adc	r31, r31
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	e9 59       	subi	r30, 0x99	; 153
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	a0 81       	ld	r26, Z
     fba:	b1 81       	ldd	r27, Z+1	; 0x01
     fbc:	fc 01       	movw	r30, r24
     fbe:	ee 5e       	subi	r30, 0xEE	; 238
     fc0:	fe 4f       	sbci	r31, 0xFE	; 254
     fc2:	80 81       	ld	r24, Z
     fc4:	8c 93       	st	X, r24
        sendThisNext[uart] = 0;
     fc6:	10 82       	st	Z, r1
     fc8:	74 c0       	rjmp	.+232    	; 0x10b2 <serialTransmitInterrupt+0x122>
    } else {
#endif
        if (txRead[uart] != txWrite[uart]) {
     fca:	9c 01       	movw	r18, r24
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	f9 01       	movw	r30, r18
     fd2:	e2 5f       	subi	r30, 0xF2	; 242
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	40 81       	ld	r20, Z
     fd8:	51 81       	ldd	r21, Z+1	; 0x01
     fda:	f9 01       	movw	r30, r18
     fdc:	e0 5f       	subi	r30, 0xF0	; 240
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	20 81       	ld	r18, Z
     fe2:	31 81       	ldd	r19, Z+1	; 0x01
     fe4:	42 17       	cp	r20, r18
     fe6:	53 07       	cpc	r21, r19
     fe8:	c1 f1       	breq	.+112    	; 0x105a <serialTransmitInterrupt+0xca>
            *serialRegisters[uart][SERIALDATA] = txBuffer[uart][txRead[uart]];
     fea:	fc 01       	movw	r30, r24
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	df 01       	movw	r26, r30
     ff2:	a8 0f       	add	r26, r24
     ff4:	b9 1f       	adc	r27, r25
     ff6:	aa 0f       	add	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	aa 0f       	add	r26, r26
     ffc:	bb 1f       	adc	r27, r27
     ffe:	a9 59       	subi	r26, 0x99	; 153
    1000:	bf 4f       	sbci	r27, 0xFF	; 255
    1002:	0d 90       	ld	r0, X+
    1004:	bc 91       	ld	r27, X
    1006:	a0 2d       	mov	r26, r0
    1008:	e2 5f       	subi	r30, 0xF2	; 242
    100a:	fe 4f       	sbci	r31, 0xFE	; 254
    100c:	20 81       	ld	r18, Z
    100e:	31 81       	ldd	r19, Z+1	; 0x01
    1010:	ec 01       	movw	r28, r24
    1012:	c2 95       	swap	r28
    1014:	d2 95       	swap	r29
    1016:	d0 7f       	andi	r29, 0xF0	; 240
    1018:	dc 27       	eor	r29, r28
    101a:	c0 7f       	andi	r28, 0xF0	; 240
    101c:	dc 27       	eor	r29, r28
    101e:	c2 0f       	add	r28, r18
    1020:	d3 1f       	adc	r29, r19
    1022:	ca 5c       	subi	r28, 0xCA	; 202
    1024:	de 4f       	sbci	r29, 0xFE	; 254
    1026:	28 81       	ld	r18, Y
    1028:	2c 93       	st	X, r18
            if (txRead[uart] < (TX_BUFFER_SIZE -1)) {
    102a:	20 81       	ld	r18, Z
    102c:	31 81       	ldd	r19, Z+1	; 0x01
    102e:	2f 30       	cpi	r18, 0x0F	; 15
    1030:	31 05       	cpc	r19, r1
    1032:	58 f4       	brcc	.+22     	; 0x104a <serialTransmitInterrupt+0xba>
                txRead[uart]++;
    1034:	fc 01       	movw	r30, r24
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	e2 5f       	subi	r30, 0xF2	; 242
    103c:	fe 4f       	sbci	r31, 0xFE	; 254
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
    1048:	34 c0       	rjmp	.+104    	; 0x10b2 <serialTransmitInterrupt+0x122>
            } else {
                txRead[uart] = 0;
    104a:	fc 01       	movw	r30, r24
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e2 5f       	subi	r30, 0xF2	; 242
    1052:	fe 4f       	sbci	r31, 0xFE	; 254
    1054:	11 82       	std	Z+1, r1	; 0x01
    1056:	10 82       	st	Z, r1
    1058:	2c c0       	rjmp	.+88     	; 0x10b2 <serialTransmitInterrupt+0x122>
            }
        } else {
            shouldStartTransmission[uart] = 1;
    105a:	fc 01       	movw	r30, r24
    105c:	ed 5e       	subi	r30, 0xED	; 237
    105e:	fe 4f       	sbci	r31, 0xFE	; 254
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	20 83       	st	Z, r18
            *serialRegisters[uart][SERIALB] &= ~(1 << serialBits[uart][SERIALUDRIE]); // Disable Interrupt
    1064:	fc 01       	movw	r30, r24
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	e8 0f       	add	r30, r24
    106c:	f9 1f       	adc	r31, r25
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	e9 59       	subi	r30, 0x99	; 153
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	02 80       	ldd	r0, Z+2	; 0x02
    107c:	f3 81       	ldd	r31, Z+3	; 0x03
    107e:	e0 2d       	mov	r30, r0
    1080:	40 81       	ld	r20, Z
    1082:	dc 01       	movw	r26, r24
    1084:	aa 0f       	add	r26, r26
    1086:	bb 1f       	adc	r27, r27
    1088:	aa 0f       	add	r26, r26
    108a:	bb 1f       	adc	r27, r27
    108c:	aa 0f       	add	r26, r26
    108e:	bb 1f       	adc	r27, r27
    1090:	a8 1b       	sub	r26, r24
    1092:	b9 0b       	sbc	r27, r25
    1094:	a0 5a       	subi	r26, 0xA0	; 160
    1096:	bf 4f       	sbci	r27, 0xFF	; 255
    1098:	21 e0       	ldi	r18, 0x01	; 1
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	c9 01       	movw	r24, r18
    109e:	15 96       	adiw	r26, 0x05	; 5
    10a0:	0c 90       	ld	r0, X
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <serialTransmitInterrupt+0x118>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <serialTransmitInterrupt+0x114>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	80 83       	st	Z, r24
        }
#ifdef FLOWCONTROL
    }
#endif
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <__vector_13>:

ISR(SERIALRECIEVEINTERRUPT) { // Receive complete
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
    serialReceiveInterrupt(0);
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	0e 94 2d 07 	call	0xe5a	; 0xe5a <serialReceiveInterrupt>
}
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <__vector_14>:

ISR(SERIALTRANSMITINTERRUPT) { // Data register empty
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
    serialTransmitInterrupt(0);
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 c8 07 	call	0xf90	; 0xf90 <serialTransmitInterrupt>
}
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <__subsf3>:
    114c:	50 58       	subi	r21, 0x80	; 128

0000114e <__addsf3>:
    114e:	bb 27       	eor	r27, r27
    1150:	aa 27       	eor	r26, r26
    1152:	0e d0       	rcall	.+28     	; 0x1170 <__addsf3x>
    1154:	48 c1       	rjmp	.+656    	; 0x13e6 <__fp_round>
    1156:	39 d1       	rcall	.+626    	; 0x13ca <__fp_pscA>
    1158:	30 f0       	brcs	.+12     	; 0x1166 <__addsf3+0x18>
    115a:	3e d1       	rcall	.+636    	; 0x13d8 <__fp_pscB>
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__addsf3+0x18>
    115e:	31 f4       	brne	.+12     	; 0x116c <__addsf3+0x1e>
    1160:	9f 3f       	cpi	r25, 0xFF	; 255
    1162:	11 f4       	brne	.+4      	; 0x1168 <__addsf3+0x1a>
    1164:	1e f4       	brtc	.+6      	; 0x116c <__addsf3+0x1e>
    1166:	2e c1       	rjmp	.+604    	; 0x13c4 <__fp_nan>
    1168:	0e f4       	brtc	.+2      	; 0x116c <__addsf3+0x1e>
    116a:	e0 95       	com	r30
    116c:	e7 fb       	bst	r30, 7
    116e:	24 c1       	rjmp	.+584    	; 0x13b8 <__fp_inf>

00001170 <__addsf3x>:
    1170:	e9 2f       	mov	r30, r25
    1172:	4a d1       	rcall	.+660    	; 0x1408 <__fp_split3>
    1174:	80 f3       	brcs	.-32     	; 0x1156 <__addsf3+0x8>
    1176:	ba 17       	cp	r27, r26
    1178:	62 07       	cpc	r22, r18
    117a:	73 07       	cpc	r23, r19
    117c:	84 07       	cpc	r24, r20
    117e:	95 07       	cpc	r25, r21
    1180:	18 f0       	brcs	.+6      	; 0x1188 <__addsf3x+0x18>
    1182:	71 f4       	brne	.+28     	; 0x11a0 <__addsf3x+0x30>
    1184:	9e f5       	brtc	.+102    	; 0x11ec <__addsf3x+0x7c>
    1186:	62 c1       	rjmp	.+708    	; 0x144c <__fp_zero>
    1188:	0e f4       	brtc	.+2      	; 0x118c <__addsf3x+0x1c>
    118a:	e0 95       	com	r30
    118c:	0b 2e       	mov	r0, r27
    118e:	ba 2f       	mov	r27, r26
    1190:	a0 2d       	mov	r26, r0
    1192:	0b 01       	movw	r0, r22
    1194:	b9 01       	movw	r22, r18
    1196:	90 01       	movw	r18, r0
    1198:	0c 01       	movw	r0, r24
    119a:	ca 01       	movw	r24, r20
    119c:	a0 01       	movw	r20, r0
    119e:	11 24       	eor	r1, r1
    11a0:	ff 27       	eor	r31, r31
    11a2:	59 1b       	sub	r21, r25
    11a4:	99 f0       	breq	.+38     	; 0x11cc <__addsf3x+0x5c>
    11a6:	59 3f       	cpi	r21, 0xF9	; 249
    11a8:	50 f4       	brcc	.+20     	; 0x11be <__addsf3x+0x4e>
    11aa:	50 3e       	cpi	r21, 0xE0	; 224
    11ac:	68 f1       	brcs	.+90     	; 0x1208 <__addsf3x+0x98>
    11ae:	1a 16       	cp	r1, r26
    11b0:	f0 40       	sbci	r31, 0x00	; 0
    11b2:	a2 2f       	mov	r26, r18
    11b4:	23 2f       	mov	r18, r19
    11b6:	34 2f       	mov	r19, r20
    11b8:	44 27       	eor	r20, r20
    11ba:	58 5f       	subi	r21, 0xF8	; 248
    11bc:	f3 cf       	rjmp	.-26     	; 0x11a4 <__addsf3x+0x34>
    11be:	46 95       	lsr	r20
    11c0:	37 95       	ror	r19
    11c2:	27 95       	ror	r18
    11c4:	a7 95       	ror	r26
    11c6:	f0 40       	sbci	r31, 0x00	; 0
    11c8:	53 95       	inc	r21
    11ca:	c9 f7       	brne	.-14     	; 0x11be <__addsf3x+0x4e>
    11cc:	7e f4       	brtc	.+30     	; 0x11ec <__addsf3x+0x7c>
    11ce:	1f 16       	cp	r1, r31
    11d0:	ba 0b       	sbc	r27, r26
    11d2:	62 0b       	sbc	r22, r18
    11d4:	73 0b       	sbc	r23, r19
    11d6:	84 0b       	sbc	r24, r20
    11d8:	ba f0       	brmi	.+46     	; 0x1208 <__addsf3x+0x98>
    11da:	91 50       	subi	r25, 0x01	; 1
    11dc:	a1 f0       	breq	.+40     	; 0x1206 <__addsf3x+0x96>
    11de:	ff 0f       	add	r31, r31
    11e0:	bb 1f       	adc	r27, r27
    11e2:	66 1f       	adc	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	88 1f       	adc	r24, r24
    11e8:	c2 f7       	brpl	.-16     	; 0x11da <__addsf3x+0x6a>
    11ea:	0e c0       	rjmp	.+28     	; 0x1208 <__addsf3x+0x98>
    11ec:	ba 0f       	add	r27, r26
    11ee:	62 1f       	adc	r22, r18
    11f0:	73 1f       	adc	r23, r19
    11f2:	84 1f       	adc	r24, r20
    11f4:	48 f4       	brcc	.+18     	; 0x1208 <__addsf3x+0x98>
    11f6:	87 95       	ror	r24
    11f8:	77 95       	ror	r23
    11fa:	67 95       	ror	r22
    11fc:	b7 95       	ror	r27
    11fe:	f7 95       	ror	r31
    1200:	9e 3f       	cpi	r25, 0xFE	; 254
    1202:	08 f0       	brcs	.+2      	; 0x1206 <__addsf3x+0x96>
    1204:	b3 cf       	rjmp	.-154    	; 0x116c <__addsf3+0x1e>
    1206:	93 95       	inc	r25
    1208:	88 0f       	add	r24, r24
    120a:	08 f0       	brcs	.+2      	; 0x120e <__addsf3x+0x9e>
    120c:	99 27       	eor	r25, r25
    120e:	ee 0f       	add	r30, r30
    1210:	97 95       	ror	r25
    1212:	87 95       	ror	r24
    1214:	08 95       	ret

00001216 <__divsf3>:
    1216:	0c d0       	rcall	.+24     	; 0x1230 <__divsf3x>
    1218:	e6 c0       	rjmp	.+460    	; 0x13e6 <__fp_round>
    121a:	de d0       	rcall	.+444    	; 0x13d8 <__fp_pscB>
    121c:	40 f0       	brcs	.+16     	; 0x122e <__divsf3+0x18>
    121e:	d5 d0       	rcall	.+426    	; 0x13ca <__fp_pscA>
    1220:	30 f0       	brcs	.+12     	; 0x122e <__divsf3+0x18>
    1222:	21 f4       	brne	.+8      	; 0x122c <__divsf3+0x16>
    1224:	5f 3f       	cpi	r21, 0xFF	; 255
    1226:	19 f0       	breq	.+6      	; 0x122e <__divsf3+0x18>
    1228:	c7 c0       	rjmp	.+398    	; 0x13b8 <__fp_inf>
    122a:	51 11       	cpse	r21, r1
    122c:	10 c1       	rjmp	.+544    	; 0x144e <__fp_szero>
    122e:	ca c0       	rjmp	.+404    	; 0x13c4 <__fp_nan>

00001230 <__divsf3x>:
    1230:	eb d0       	rcall	.+470    	; 0x1408 <__fp_split3>
    1232:	98 f3       	brcs	.-26     	; 0x121a <__divsf3+0x4>

00001234 <__divsf3_pse>:
    1234:	99 23       	and	r25, r25
    1236:	c9 f3       	breq	.-14     	; 0x122a <__divsf3+0x14>
    1238:	55 23       	and	r21, r21
    123a:	b1 f3       	breq	.-20     	; 0x1228 <__divsf3+0x12>
    123c:	95 1b       	sub	r25, r21
    123e:	55 0b       	sbc	r21, r21
    1240:	bb 27       	eor	r27, r27
    1242:	aa 27       	eor	r26, r26
    1244:	62 17       	cp	r22, r18
    1246:	73 07       	cpc	r23, r19
    1248:	84 07       	cpc	r24, r20
    124a:	38 f0       	brcs	.+14     	; 0x125a <__divsf3_pse+0x26>
    124c:	9f 5f       	subi	r25, 0xFF	; 255
    124e:	5f 4f       	sbci	r21, 0xFF	; 255
    1250:	22 0f       	add	r18, r18
    1252:	33 1f       	adc	r19, r19
    1254:	44 1f       	adc	r20, r20
    1256:	aa 1f       	adc	r26, r26
    1258:	a9 f3       	breq	.-22     	; 0x1244 <__divsf3_pse+0x10>
    125a:	33 d0       	rcall	.+102    	; 0x12c2 <__divsf3_pse+0x8e>
    125c:	0e 2e       	mov	r0, r30
    125e:	3a f0       	brmi	.+14     	; 0x126e <__divsf3_pse+0x3a>
    1260:	e0 e8       	ldi	r30, 0x80	; 128
    1262:	30 d0       	rcall	.+96     	; 0x12c4 <__divsf3_pse+0x90>
    1264:	91 50       	subi	r25, 0x01	; 1
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	e6 95       	lsr	r30
    126a:	00 1c       	adc	r0, r0
    126c:	ca f7       	brpl	.-14     	; 0x1260 <__divsf3_pse+0x2c>
    126e:	29 d0       	rcall	.+82     	; 0x12c2 <__divsf3_pse+0x8e>
    1270:	fe 2f       	mov	r31, r30
    1272:	27 d0       	rcall	.+78     	; 0x12c2 <__divsf3_pse+0x8e>
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	bb 1f       	adc	r27, r27
    127c:	26 17       	cp	r18, r22
    127e:	37 07       	cpc	r19, r23
    1280:	48 07       	cpc	r20, r24
    1282:	ab 07       	cpc	r26, r27
    1284:	b0 e8       	ldi	r27, 0x80	; 128
    1286:	09 f0       	breq	.+2      	; 0x128a <__divsf3_pse+0x56>
    1288:	bb 0b       	sbc	r27, r27
    128a:	80 2d       	mov	r24, r0
    128c:	bf 01       	movw	r22, r30
    128e:	ff 27       	eor	r31, r31
    1290:	93 58       	subi	r25, 0x83	; 131
    1292:	5f 4f       	sbci	r21, 0xFF	; 255
    1294:	2a f0       	brmi	.+10     	; 0x12a0 <__divsf3_pse+0x6c>
    1296:	9e 3f       	cpi	r25, 0xFE	; 254
    1298:	51 05       	cpc	r21, r1
    129a:	68 f0       	brcs	.+26     	; 0x12b6 <__divsf3_pse+0x82>
    129c:	8d c0       	rjmp	.+282    	; 0x13b8 <__fp_inf>
    129e:	d7 c0       	rjmp	.+430    	; 0x144e <__fp_szero>
    12a0:	5f 3f       	cpi	r21, 0xFF	; 255
    12a2:	ec f3       	brlt	.-6      	; 0x129e <__divsf3_pse+0x6a>
    12a4:	98 3e       	cpi	r25, 0xE8	; 232
    12a6:	dc f3       	brlt	.-10     	; 0x129e <__divsf3_pse+0x6a>
    12a8:	86 95       	lsr	r24
    12aa:	77 95       	ror	r23
    12ac:	67 95       	ror	r22
    12ae:	b7 95       	ror	r27
    12b0:	f7 95       	ror	r31
    12b2:	9f 5f       	subi	r25, 0xFF	; 255
    12b4:	c9 f7       	brne	.-14     	; 0x12a8 <__divsf3_pse+0x74>
    12b6:	88 0f       	add	r24, r24
    12b8:	91 1d       	adc	r25, r1
    12ba:	96 95       	lsr	r25
    12bc:	87 95       	ror	r24
    12be:	97 f9       	bld	r25, 7
    12c0:	08 95       	ret
    12c2:	e1 e0       	ldi	r30, 0x01	; 1
    12c4:	66 0f       	add	r22, r22
    12c6:	77 1f       	adc	r23, r23
    12c8:	88 1f       	adc	r24, r24
    12ca:	bb 1f       	adc	r27, r27
    12cc:	62 17       	cp	r22, r18
    12ce:	73 07       	cpc	r23, r19
    12d0:	84 07       	cpc	r24, r20
    12d2:	ba 07       	cpc	r27, r26
    12d4:	20 f0       	brcs	.+8      	; 0x12de <__divsf3_pse+0xaa>
    12d6:	62 1b       	sub	r22, r18
    12d8:	73 0b       	sbc	r23, r19
    12da:	84 0b       	sbc	r24, r20
    12dc:	ba 0b       	sbc	r27, r26
    12de:	ee 1f       	adc	r30, r30
    12e0:	88 f7       	brcc	.-30     	; 0x12c4 <__divsf3_pse+0x90>
    12e2:	e0 95       	com	r30
    12e4:	08 95       	ret

000012e6 <__fixunssfsi>:
    12e6:	98 d0       	rcall	.+304    	; 0x1418 <__fp_splitA>
    12e8:	88 f0       	brcs	.+34     	; 0x130c <__fixunssfsi+0x26>
    12ea:	9f 57       	subi	r25, 0x7F	; 127
    12ec:	90 f0       	brcs	.+36     	; 0x1312 <__fixunssfsi+0x2c>
    12ee:	b9 2f       	mov	r27, r25
    12f0:	99 27       	eor	r25, r25
    12f2:	b7 51       	subi	r27, 0x17	; 23
    12f4:	a0 f0       	brcs	.+40     	; 0x131e <__fixunssfsi+0x38>
    12f6:	d1 f0       	breq	.+52     	; 0x132c <__fixunssfsi+0x46>
    12f8:	66 0f       	add	r22, r22
    12fa:	77 1f       	adc	r23, r23
    12fc:	88 1f       	adc	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	1a f0       	brmi	.+6      	; 0x1308 <__fixunssfsi+0x22>
    1302:	ba 95       	dec	r27
    1304:	c9 f7       	brne	.-14     	; 0x12f8 <__fixunssfsi+0x12>
    1306:	12 c0       	rjmp	.+36     	; 0x132c <__fixunssfsi+0x46>
    1308:	b1 30       	cpi	r27, 0x01	; 1
    130a:	81 f0       	breq	.+32     	; 0x132c <__fixunssfsi+0x46>
    130c:	9f d0       	rcall	.+318    	; 0x144c <__fp_zero>
    130e:	b1 e0       	ldi	r27, 0x01	; 1
    1310:	08 95       	ret
    1312:	9c c0       	rjmp	.+312    	; 0x144c <__fp_zero>
    1314:	67 2f       	mov	r22, r23
    1316:	78 2f       	mov	r23, r24
    1318:	88 27       	eor	r24, r24
    131a:	b8 5f       	subi	r27, 0xF8	; 248
    131c:	39 f0       	breq	.+14     	; 0x132c <__fixunssfsi+0x46>
    131e:	b9 3f       	cpi	r27, 0xF9	; 249
    1320:	cc f3       	brlt	.-14     	; 0x1314 <__fixunssfsi+0x2e>
    1322:	86 95       	lsr	r24
    1324:	77 95       	ror	r23
    1326:	67 95       	ror	r22
    1328:	b3 95       	inc	r27
    132a:	d9 f7       	brne	.-10     	; 0x1322 <__fixunssfsi+0x3c>
    132c:	3e f4       	brtc	.+14     	; 0x133c <__fixunssfsi+0x56>
    132e:	90 95       	com	r25
    1330:	80 95       	com	r24
    1332:	70 95       	com	r23
    1334:	61 95       	neg	r22
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	8f 4f       	sbci	r24, 0xFF	; 255
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	08 95       	ret

0000133e <__floatunsisf>:
    133e:	e8 94       	clt
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <__floatsisf+0x12>

00001342 <__floatsisf>:
    1342:	97 fb       	bst	r25, 7
    1344:	3e f4       	brtc	.+14     	; 0x1354 <__floatsisf+0x12>
    1346:	90 95       	com	r25
    1348:	80 95       	com	r24
    134a:	70 95       	com	r23
    134c:	61 95       	neg	r22
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	8f 4f       	sbci	r24, 0xFF	; 255
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	99 23       	and	r25, r25
    1356:	a9 f0       	breq	.+42     	; 0x1382 <__floatsisf+0x40>
    1358:	f9 2f       	mov	r31, r25
    135a:	96 e9       	ldi	r25, 0x96	; 150
    135c:	bb 27       	eor	r27, r27
    135e:	93 95       	inc	r25
    1360:	f6 95       	lsr	r31
    1362:	87 95       	ror	r24
    1364:	77 95       	ror	r23
    1366:	67 95       	ror	r22
    1368:	b7 95       	ror	r27
    136a:	f1 11       	cpse	r31, r1
    136c:	f8 cf       	rjmp	.-16     	; 0x135e <__floatsisf+0x1c>
    136e:	fa f4       	brpl	.+62     	; 0x13ae <__floatsisf+0x6c>
    1370:	bb 0f       	add	r27, r27
    1372:	11 f4       	brne	.+4      	; 0x1378 <__floatsisf+0x36>
    1374:	60 ff       	sbrs	r22, 0
    1376:	1b c0       	rjmp	.+54     	; 0x13ae <__floatsisf+0x6c>
    1378:	6f 5f       	subi	r22, 0xFF	; 255
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	8f 4f       	sbci	r24, 0xFF	; 255
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	16 c0       	rjmp	.+44     	; 0x13ae <__floatsisf+0x6c>
    1382:	88 23       	and	r24, r24
    1384:	11 f0       	breq	.+4      	; 0x138a <__floatsisf+0x48>
    1386:	96 e9       	ldi	r25, 0x96	; 150
    1388:	11 c0       	rjmp	.+34     	; 0x13ac <__floatsisf+0x6a>
    138a:	77 23       	and	r23, r23
    138c:	21 f0       	breq	.+8      	; 0x1396 <__floatsisf+0x54>
    138e:	9e e8       	ldi	r25, 0x8E	; 142
    1390:	87 2f       	mov	r24, r23
    1392:	76 2f       	mov	r23, r22
    1394:	05 c0       	rjmp	.+10     	; 0x13a0 <__floatsisf+0x5e>
    1396:	66 23       	and	r22, r22
    1398:	71 f0       	breq	.+28     	; 0x13b6 <__floatsisf+0x74>
    139a:	96 e8       	ldi	r25, 0x86	; 134
    139c:	86 2f       	mov	r24, r22
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	2a f0       	brmi	.+10     	; 0x13ae <__floatsisf+0x6c>
    13a4:	9a 95       	dec	r25
    13a6:	66 0f       	add	r22, r22
    13a8:	77 1f       	adc	r23, r23
    13aa:	88 1f       	adc	r24, r24
    13ac:	da f7       	brpl	.-10     	; 0x13a4 <__floatsisf+0x62>
    13ae:	88 0f       	add	r24, r24
    13b0:	96 95       	lsr	r25
    13b2:	87 95       	ror	r24
    13b4:	97 f9       	bld	r25, 7
    13b6:	08 95       	ret

000013b8 <__fp_inf>:
    13b8:	97 f9       	bld	r25, 7
    13ba:	9f 67       	ori	r25, 0x7F	; 127
    13bc:	80 e8       	ldi	r24, 0x80	; 128
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	08 95       	ret

000013c4 <__fp_nan>:
    13c4:	9f ef       	ldi	r25, 0xFF	; 255
    13c6:	80 ec       	ldi	r24, 0xC0	; 192
    13c8:	08 95       	ret

000013ca <__fp_pscA>:
    13ca:	00 24       	eor	r0, r0
    13cc:	0a 94       	dec	r0
    13ce:	16 16       	cp	r1, r22
    13d0:	17 06       	cpc	r1, r23
    13d2:	18 06       	cpc	r1, r24
    13d4:	09 06       	cpc	r0, r25
    13d6:	08 95       	ret

000013d8 <__fp_pscB>:
    13d8:	00 24       	eor	r0, r0
    13da:	0a 94       	dec	r0
    13dc:	12 16       	cp	r1, r18
    13de:	13 06       	cpc	r1, r19
    13e0:	14 06       	cpc	r1, r20
    13e2:	05 06       	cpc	r0, r21
    13e4:	08 95       	ret

000013e6 <__fp_round>:
    13e6:	09 2e       	mov	r0, r25
    13e8:	03 94       	inc	r0
    13ea:	00 0c       	add	r0, r0
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <__fp_round+0xc>
    13ee:	88 23       	and	r24, r24
    13f0:	52 f0       	brmi	.+20     	; 0x1406 <__fp_round+0x20>
    13f2:	bb 0f       	add	r27, r27
    13f4:	40 f4       	brcc	.+16     	; 0x1406 <__fp_round+0x20>
    13f6:	bf 2b       	or	r27, r31
    13f8:	11 f4       	brne	.+4      	; 0x13fe <__fp_round+0x18>
    13fa:	60 ff       	sbrs	r22, 0
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <__fp_round+0x20>
    13fe:	6f 5f       	subi	r22, 0xFF	; 255
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	8f 4f       	sbci	r24, 0xFF	; 255
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	08 95       	ret

00001408 <__fp_split3>:
    1408:	57 fd       	sbrc	r21, 7
    140a:	90 58       	subi	r25, 0x80	; 128
    140c:	44 0f       	add	r20, r20
    140e:	55 1f       	adc	r21, r21
    1410:	59 f0       	breq	.+22     	; 0x1428 <__fp_splitA+0x10>
    1412:	5f 3f       	cpi	r21, 0xFF	; 255
    1414:	71 f0       	breq	.+28     	; 0x1432 <__fp_splitA+0x1a>
    1416:	47 95       	ror	r20

00001418 <__fp_splitA>:
    1418:	88 0f       	add	r24, r24
    141a:	97 fb       	bst	r25, 7
    141c:	99 1f       	adc	r25, r25
    141e:	61 f0       	breq	.+24     	; 0x1438 <__fp_splitA+0x20>
    1420:	9f 3f       	cpi	r25, 0xFF	; 255
    1422:	79 f0       	breq	.+30     	; 0x1442 <__fp_splitA+0x2a>
    1424:	87 95       	ror	r24
    1426:	08 95       	ret
    1428:	12 16       	cp	r1, r18
    142a:	13 06       	cpc	r1, r19
    142c:	14 06       	cpc	r1, r20
    142e:	55 1f       	adc	r21, r21
    1430:	f2 cf       	rjmp	.-28     	; 0x1416 <__fp_split3+0xe>
    1432:	46 95       	lsr	r20
    1434:	f1 df       	rcall	.-30     	; 0x1418 <__fp_splitA>
    1436:	08 c0       	rjmp	.+16     	; 0x1448 <__fp_splitA+0x30>
    1438:	16 16       	cp	r1, r22
    143a:	17 06       	cpc	r1, r23
    143c:	18 06       	cpc	r1, r24
    143e:	99 1f       	adc	r25, r25
    1440:	f1 cf       	rjmp	.-30     	; 0x1424 <__fp_splitA+0xc>
    1442:	86 95       	lsr	r24
    1444:	71 05       	cpc	r23, r1
    1446:	61 05       	cpc	r22, r1
    1448:	08 94       	sec
    144a:	08 95       	ret

0000144c <__fp_zero>:
    144c:	e8 94       	clt

0000144e <__fp_szero>:
    144e:	bb 27       	eor	r27, r27
    1450:	66 27       	eor	r22, r22
    1452:	77 27       	eor	r23, r23
    1454:	cb 01       	movw	r24, r22
    1456:	97 f9       	bld	r25, 7
    1458:	08 95       	ret

0000145a <__mulsf3>:
    145a:	0b d0       	rcall	.+22     	; 0x1472 <__mulsf3x>
    145c:	c4 cf       	rjmp	.-120    	; 0x13e6 <__fp_round>
    145e:	b5 df       	rcall	.-150    	; 0x13ca <__fp_pscA>
    1460:	28 f0       	brcs	.+10     	; 0x146c <__mulsf3+0x12>
    1462:	ba df       	rcall	.-140    	; 0x13d8 <__fp_pscB>
    1464:	18 f0       	brcs	.+6      	; 0x146c <__mulsf3+0x12>
    1466:	95 23       	and	r25, r21
    1468:	09 f0       	breq	.+2      	; 0x146c <__mulsf3+0x12>
    146a:	a6 cf       	rjmp	.-180    	; 0x13b8 <__fp_inf>
    146c:	ab cf       	rjmp	.-170    	; 0x13c4 <__fp_nan>
    146e:	11 24       	eor	r1, r1
    1470:	ee cf       	rjmp	.-36     	; 0x144e <__fp_szero>

00001472 <__mulsf3x>:
    1472:	ca df       	rcall	.-108    	; 0x1408 <__fp_split3>
    1474:	a0 f3       	brcs	.-24     	; 0x145e <__mulsf3+0x4>

00001476 <__mulsf3_pse>:
    1476:	95 9f       	mul	r25, r21
    1478:	d1 f3       	breq	.-12     	; 0x146e <__mulsf3+0x14>
    147a:	95 0f       	add	r25, r21
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	55 1f       	adc	r21, r21
    1480:	62 9f       	mul	r22, r18
    1482:	f0 01       	movw	r30, r0
    1484:	72 9f       	mul	r23, r18
    1486:	bb 27       	eor	r27, r27
    1488:	f0 0d       	add	r31, r0
    148a:	b1 1d       	adc	r27, r1
    148c:	63 9f       	mul	r22, r19
    148e:	aa 27       	eor	r26, r26
    1490:	f0 0d       	add	r31, r0
    1492:	b1 1d       	adc	r27, r1
    1494:	aa 1f       	adc	r26, r26
    1496:	64 9f       	mul	r22, r20
    1498:	66 27       	eor	r22, r22
    149a:	b0 0d       	add	r27, r0
    149c:	a1 1d       	adc	r26, r1
    149e:	66 1f       	adc	r22, r22
    14a0:	82 9f       	mul	r24, r18
    14a2:	22 27       	eor	r18, r18
    14a4:	b0 0d       	add	r27, r0
    14a6:	a1 1d       	adc	r26, r1
    14a8:	62 1f       	adc	r22, r18
    14aa:	73 9f       	mul	r23, r19
    14ac:	b0 0d       	add	r27, r0
    14ae:	a1 1d       	adc	r26, r1
    14b0:	62 1f       	adc	r22, r18
    14b2:	83 9f       	mul	r24, r19
    14b4:	a0 0d       	add	r26, r0
    14b6:	61 1d       	adc	r22, r1
    14b8:	22 1f       	adc	r18, r18
    14ba:	74 9f       	mul	r23, r20
    14bc:	33 27       	eor	r19, r19
    14be:	a0 0d       	add	r26, r0
    14c0:	61 1d       	adc	r22, r1
    14c2:	23 1f       	adc	r18, r19
    14c4:	84 9f       	mul	r24, r20
    14c6:	60 0d       	add	r22, r0
    14c8:	21 1d       	adc	r18, r1
    14ca:	82 2f       	mov	r24, r18
    14cc:	76 2f       	mov	r23, r22
    14ce:	6a 2f       	mov	r22, r26
    14d0:	11 24       	eor	r1, r1
    14d2:	9f 57       	subi	r25, 0x7F	; 127
    14d4:	50 40       	sbci	r21, 0x00	; 0
    14d6:	8a f0       	brmi	.+34     	; 0x14fa <__mulsf3_pse+0x84>
    14d8:	e1 f0       	breq	.+56     	; 0x1512 <__mulsf3_pse+0x9c>
    14da:	88 23       	and	r24, r24
    14dc:	4a f0       	brmi	.+18     	; 0x14f0 <__mulsf3_pse+0x7a>
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	bb 1f       	adc	r27, r27
    14e4:	66 1f       	adc	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	91 50       	subi	r25, 0x01	; 1
    14ec:	50 40       	sbci	r21, 0x00	; 0
    14ee:	a9 f7       	brne	.-22     	; 0x14da <__mulsf3_pse+0x64>
    14f0:	9e 3f       	cpi	r25, 0xFE	; 254
    14f2:	51 05       	cpc	r21, r1
    14f4:	70 f0       	brcs	.+28     	; 0x1512 <__mulsf3_pse+0x9c>
    14f6:	60 cf       	rjmp	.-320    	; 0x13b8 <__fp_inf>
    14f8:	aa cf       	rjmp	.-172    	; 0x144e <__fp_szero>
    14fa:	5f 3f       	cpi	r21, 0xFF	; 255
    14fc:	ec f3       	brlt	.-6      	; 0x14f8 <__mulsf3_pse+0x82>
    14fe:	98 3e       	cpi	r25, 0xE8	; 232
    1500:	dc f3       	brlt	.-10     	; 0x14f8 <__mulsf3_pse+0x82>
    1502:	86 95       	lsr	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	b7 95       	ror	r27
    150a:	f7 95       	ror	r31
    150c:	e7 95       	ror	r30
    150e:	9f 5f       	subi	r25, 0xFF	; 255
    1510:	c1 f7       	brne	.-16     	; 0x1502 <__mulsf3_pse+0x8c>
    1512:	fe 2b       	or	r31, r30
    1514:	88 0f       	add	r24, r24
    1516:	91 1d       	adc	r25, r1
    1518:	96 95       	lsr	r25
    151a:	87 95       	ror	r24
    151c:	97 f9       	bld	r25, 7
    151e:	08 95       	ret

00001520 <__mulsi3>:
    1520:	db 01       	movw	r26, r22
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__muluhisi3>
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	a2 9f       	mul	r26, r18
    1530:	80 0d       	add	r24, r0
    1532:	91 1d       	adc	r25, r1
    1534:	a3 9f       	mul	r26, r19
    1536:	90 0d       	add	r25, r0
    1538:	b2 9f       	mul	r27, r18
    153a:	90 0d       	add	r25, r0
    153c:	11 24       	eor	r1, r1
    153e:	08 95       	ret

00001540 <__udivmodsi4>:
    1540:	a1 e2       	ldi	r26, 0x21	; 33
    1542:	1a 2e       	mov	r1, r26
    1544:	aa 1b       	sub	r26, r26
    1546:	bb 1b       	sub	r27, r27
    1548:	fd 01       	movw	r30, r26
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <__udivmodsi4_ep>

0000154c <__udivmodsi4_loop>:
    154c:	aa 1f       	adc	r26, r26
    154e:	bb 1f       	adc	r27, r27
    1550:	ee 1f       	adc	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	a2 17       	cp	r26, r18
    1556:	b3 07       	cpc	r27, r19
    1558:	e4 07       	cpc	r30, r20
    155a:	f5 07       	cpc	r31, r21
    155c:	20 f0       	brcs	.+8      	; 0x1566 <__udivmodsi4_ep>
    155e:	a2 1b       	sub	r26, r18
    1560:	b3 0b       	sbc	r27, r19
    1562:	e4 0b       	sbc	r30, r20
    1564:	f5 0b       	sbc	r31, r21

00001566 <__udivmodsi4_ep>:
    1566:	66 1f       	adc	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	1a 94       	dec	r1
    1570:	69 f7       	brne	.-38     	; 0x154c <__udivmodsi4_loop>
    1572:	60 95       	com	r22
    1574:	70 95       	com	r23
    1576:	80 95       	com	r24
    1578:	90 95       	com	r25
    157a:	9b 01       	movw	r18, r22
    157c:	ac 01       	movw	r20, r24
    157e:	bd 01       	movw	r22, r26
    1580:	cf 01       	movw	r24, r30
    1582:	08 95       	ret

00001584 <__divmodsi4>:
    1584:	05 2e       	mov	r0, r21
    1586:	97 fb       	bst	r25, 7
    1588:	1e f4       	brtc	.+6      	; 0x1590 <__divmodsi4+0xc>
    158a:	00 94       	com	r0
    158c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__negsi2>
    1590:	57 fd       	sbrc	r21, 7
    1592:	07 d0       	rcall	.+14     	; 0x15a2 <__divmodsi4_neg2>
    1594:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__udivmodsi4>
    1598:	07 fc       	sbrc	r0, 7
    159a:	03 d0       	rcall	.+6      	; 0x15a2 <__divmodsi4_neg2>
    159c:	4e f4       	brtc	.+18     	; 0x15b0 <__divmodsi4_exit>
    159e:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__negsi2>

000015a2 <__divmodsi4_neg2>:
    15a2:	50 95       	com	r21
    15a4:	40 95       	com	r20
    15a6:	30 95       	com	r19
    15a8:	21 95       	neg	r18
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	4f 4f       	sbci	r20, 0xFF	; 255
    15ae:	5f 4f       	sbci	r21, 0xFF	; 255

000015b0 <__divmodsi4_exit>:
    15b0:	08 95       	ret

000015b2 <__negsi2>:
    15b2:	90 95       	com	r25
    15b4:	80 95       	com	r24
    15b6:	70 95       	com	r23
    15b8:	61 95       	neg	r22
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	8f 4f       	sbci	r24, 0xFF	; 255
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	08 95       	ret

000015c2 <__muluhisi3>:
    15c2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__umulhisi3>
    15c6:	a5 9f       	mul	r26, r21
    15c8:	90 0d       	add	r25, r0
    15ca:	b4 9f       	mul	r27, r20
    15cc:	90 0d       	add	r25, r0
    15ce:	a4 9f       	mul	r26, r20
    15d0:	80 0d       	add	r24, r0
    15d2:	91 1d       	adc	r25, r1
    15d4:	11 24       	eor	r1, r1
    15d6:	08 95       	ret

000015d8 <__umulhisi3>:
    15d8:	a2 9f       	mul	r26, r18
    15da:	b0 01       	movw	r22, r0
    15dc:	b3 9f       	mul	r27, r19
    15de:	c0 01       	movw	r24, r0
    15e0:	a3 9f       	mul	r26, r19
    15e2:	70 0d       	add	r23, r0
    15e4:	81 1d       	adc	r24, r1
    15e6:	11 24       	eor	r1, r1
    15e8:	91 1d       	adc	r25, r1
    15ea:	b2 9f       	mul	r27, r18
    15ec:	70 0d       	add	r23, r0
    15ee:	81 1d       	adc	r24, r1
    15f0:	11 24       	eor	r1, r1
    15f2:	91 1d       	adc	r25, r1
    15f4:	08 95       	ret

000015f6 <atof>:
    15f6:	66 27       	eor	r22, r22
    15f8:	77 27       	eor	r23, r23
    15fa:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <strtod>

000015fe <atoi>:
    15fe:	fc 01       	movw	r30, r24
    1600:	88 27       	eor	r24, r24
    1602:	99 27       	eor	r25, r25
    1604:	e8 94       	clt
    1606:	21 91       	ld	r18, Z+
    1608:	20 32       	cpi	r18, 0x20	; 32
    160a:	e9 f3       	breq	.-6      	; 0x1606 <atoi+0x8>
    160c:	29 30       	cpi	r18, 0x09	; 9
    160e:	10 f0       	brcs	.+4      	; 0x1614 <atoi+0x16>
    1610:	2e 30       	cpi	r18, 0x0E	; 14
    1612:	c8 f3       	brcs	.-14     	; 0x1606 <atoi+0x8>
    1614:	2b 32       	cpi	r18, 0x2B	; 43
    1616:	41 f0       	breq	.+16     	; 0x1628 <atoi+0x2a>
    1618:	2d 32       	cpi	r18, 0x2D	; 45
    161a:	39 f4       	brne	.+14     	; 0x162a <atoi+0x2c>
    161c:	68 94       	set
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <atoi+0x2a>
    1620:	0e 94 a7 0b 	call	0x174e	; 0x174e <__mulhi_const_10>
    1624:	82 0f       	add	r24, r18
    1626:	91 1d       	adc	r25, r1
    1628:	21 91       	ld	r18, Z+
    162a:	20 53       	subi	r18, 0x30	; 48
    162c:	2a 30       	cpi	r18, 0x0A	; 10
    162e:	c0 f3       	brcs	.-16     	; 0x1620 <atoi+0x22>
    1630:	1e f4       	brtc	.+6      	; 0x1638 <atoi+0x3a>
    1632:	90 95       	com	r25
    1634:	81 95       	neg	r24
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	08 95       	ret

0000163a <atol>:
    163a:	1f 93       	push	r17
    163c:	fc 01       	movw	r30, r24
    163e:	99 27       	eor	r25, r25
    1640:	88 27       	eor	r24, r24
    1642:	bc 01       	movw	r22, r24
    1644:	e8 94       	clt
    1646:	11 91       	ld	r17, Z+
    1648:	10 32       	cpi	r17, 0x20	; 32
    164a:	e9 f3       	breq	.-6      	; 0x1646 <atol+0xc>
    164c:	19 30       	cpi	r17, 0x09	; 9
    164e:	10 f0       	brcs	.+4      	; 0x1654 <atol+0x1a>
    1650:	1e 30       	cpi	r17, 0x0E	; 14
    1652:	c8 f3       	brcs	.-14     	; 0x1646 <atol+0xc>
    1654:	1b 32       	cpi	r17, 0x2B	; 43
    1656:	51 f0       	breq	.+20     	; 0x166c <atol+0x32>
    1658:	1d 32       	cpi	r17, 0x2D	; 45
    165a:	49 f4       	brne	.+18     	; 0x166e <atol+0x34>
    165c:	68 94       	set
    165e:	06 c0       	rjmp	.+12     	; 0x166c <atol+0x32>
    1660:	0e 94 92 0b 	call	0x1724	; 0x1724 <__mulsi_const_10>
    1664:	61 0f       	add	r22, r17
    1666:	71 1d       	adc	r23, r1
    1668:	81 1d       	adc	r24, r1
    166a:	91 1d       	adc	r25, r1
    166c:	11 91       	ld	r17, Z+
    166e:	10 53       	subi	r17, 0x30	; 48
    1670:	1a 30       	cpi	r17, 0x0A	; 10
    1672:	b0 f3       	brcs	.-20     	; 0x1660 <atol+0x26>
    1674:	3e f4       	brtc	.+14     	; 0x1684 <atol+0x4a>
    1676:	90 95       	com	r25
    1678:	80 95       	com	r24
    167a:	70 95       	com	r23
    167c:	61 95       	neg	r22
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8f 4f       	sbci	r24, 0xFF	; 255
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	1f 91       	pop	r17
    1686:	08 95       	ret

00001688 <strchr>:
    1688:	fc 01       	movw	r30, r24
    168a:	81 91       	ld	r24, Z+
    168c:	86 17       	cp	r24, r22
    168e:	21 f0       	breq	.+8      	; 0x1698 <strchr+0x10>
    1690:	88 23       	and	r24, r24
    1692:	d9 f7       	brne	.-10     	; 0x168a <strchr+0x2>
    1694:	99 27       	eor	r25, r25
    1696:	08 95       	ret
    1698:	31 97       	sbiw	r30, 0x01	; 1
    169a:	cf 01       	movw	r24, r30
    169c:	08 95       	ret

0000169e <strncpy>:
    169e:	fb 01       	movw	r30, r22
    16a0:	dc 01       	movw	r26, r24
    16a2:	41 50       	subi	r20, 0x01	; 1
    16a4:	50 40       	sbci	r21, 0x00	; 0
    16a6:	48 f0       	brcs	.+18     	; 0x16ba <strncpy+0x1c>
    16a8:	01 90       	ld	r0, Z+
    16aa:	0d 92       	st	X+, r0
    16ac:	00 20       	and	r0, r0
    16ae:	c9 f7       	brne	.-14     	; 0x16a2 <strncpy+0x4>
    16b0:	01 c0       	rjmp	.+2      	; 0x16b4 <strncpy+0x16>
    16b2:	1d 92       	st	X+, r1
    16b4:	41 50       	subi	r20, 0x01	; 1
    16b6:	50 40       	sbci	r21, 0x00	; 0
    16b8:	e0 f7       	brcc	.-8      	; 0x16b2 <strncpy+0x14>
    16ba:	08 95       	ret

000016bc <strstr>:
    16bc:	fb 01       	movw	r30, r22
    16be:	51 91       	ld	r21, Z+
    16c0:	55 23       	and	r21, r21
    16c2:	a9 f0       	breq	.+42     	; 0x16ee <strstr+0x32>
    16c4:	bf 01       	movw	r22, r30
    16c6:	dc 01       	movw	r26, r24
    16c8:	4d 91       	ld	r20, X+
    16ca:	45 17       	cp	r20, r21
    16cc:	41 11       	cpse	r20, r1
    16ce:	e1 f7       	brne	.-8      	; 0x16c8 <strstr+0xc>
    16d0:	59 f4       	brne	.+22     	; 0x16e8 <strstr+0x2c>
    16d2:	cd 01       	movw	r24, r26
    16d4:	01 90       	ld	r0, Z+
    16d6:	00 20       	and	r0, r0
    16d8:	49 f0       	breq	.+18     	; 0x16ec <strstr+0x30>
    16da:	4d 91       	ld	r20, X+
    16dc:	40 15       	cp	r20, r0
    16de:	41 11       	cpse	r20, r1
    16e0:	c9 f3       	breq	.-14     	; 0x16d4 <strstr+0x18>
    16e2:	fb 01       	movw	r30, r22
    16e4:	41 11       	cpse	r20, r1
    16e6:	ef cf       	rjmp	.-34     	; 0x16c6 <strstr+0xa>
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	08 95       	ret

000016f0 <__itoa_ncheck>:
    16f0:	bb 27       	eor	r27, r27
    16f2:	4a 30       	cpi	r20, 0x0A	; 10
    16f4:	31 f4       	brne	.+12     	; 0x1702 <__itoa_ncheck+0x12>
    16f6:	99 23       	and	r25, r25
    16f8:	22 f4       	brpl	.+8      	; 0x1702 <__itoa_ncheck+0x12>
    16fa:	bd e2       	ldi	r27, 0x2D	; 45
    16fc:	90 95       	com	r25
    16fe:	81 95       	neg	r24
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__utoa_common>

00001706 <__ltoa_ncheck>:
    1706:	bb 27       	eor	r27, r27
    1708:	2a 30       	cpi	r18, 0x0A	; 10
    170a:	51 f4       	brne	.+20     	; 0x1720 <__ltoa_ncheck+0x1a>
    170c:	99 23       	and	r25, r25
    170e:	42 f4       	brpl	.+16     	; 0x1720 <__ltoa_ncheck+0x1a>
    1710:	bd e2       	ldi	r27, 0x2D	; 45
    1712:	90 95       	com	r25
    1714:	80 95       	com	r24
    1716:	70 95       	com	r23
    1718:	61 95       	neg	r22
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	8f 4f       	sbci	r24, 0xFF	; 255
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__ultoa_common>

00001724 <__mulsi_const_10>:
    1724:	59 2f       	mov	r21, r25
    1726:	48 2f       	mov	r20, r24
    1728:	37 2f       	mov	r19, r23
    172a:	26 2f       	mov	r18, r22
    172c:	66 0f       	add	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	62 0f       	add	r22, r18
    173e:	73 1f       	adc	r23, r19
    1740:	84 1f       	adc	r24, r20
    1742:	95 1f       	adc	r25, r21
    1744:	66 0f       	add	r22, r22
    1746:	77 1f       	adc	r23, r23
    1748:	88 1f       	adc	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	08 95       	ret

0000174e <__mulhi_const_10>:
    174e:	7a e0       	ldi	r23, 0x0A	; 10
    1750:	97 9f       	mul	r25, r23
    1752:	90 2d       	mov	r25, r0
    1754:	87 9f       	mul	r24, r23
    1756:	80 2d       	mov	r24, r0
    1758:	91 0d       	add	r25, r1
    175a:	11 24       	eor	r1, r1
    175c:	08 95       	ret

0000175e <__ultoa_ncheck>:
    175e:	bb 27       	eor	r27, r27

00001760 <__ultoa_common>:
    1760:	fa 01       	movw	r30, r20
    1762:	a6 2f       	mov	r26, r22
    1764:	62 17       	cp	r22, r18
    1766:	71 05       	cpc	r23, r1
    1768:	81 05       	cpc	r24, r1
    176a:	91 05       	cpc	r25, r1
    176c:	33 0b       	sbc	r19, r19
    176e:	30 fb       	bst	r19, 0
    1770:	66 f0       	brts	.+24     	; 0x178a <__ultoa_common+0x2a>
    1772:	aa 27       	eor	r26, r26
    1774:	66 0f       	add	r22, r22
    1776:	77 1f       	adc	r23, r23
    1778:	88 1f       	adc	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	aa 1f       	adc	r26, r26
    177e:	a2 17       	cp	r26, r18
    1780:	10 f0       	brcs	.+4      	; 0x1786 <__ultoa_common+0x26>
    1782:	a2 1b       	sub	r26, r18
    1784:	63 95       	inc	r22
    1786:	38 50       	subi	r19, 0x08	; 8
    1788:	a9 f7       	brne	.-22     	; 0x1774 <__ultoa_common+0x14>
    178a:	a0 5d       	subi	r26, 0xD0	; 208
    178c:	aa 33       	cpi	r26, 0x3A	; 58
    178e:	08 f0       	brcs	.+2      	; 0x1792 <__ultoa_common+0x32>
    1790:	a9 5d       	subi	r26, 0xD9	; 217
    1792:	a1 93       	st	Z+, r26
    1794:	36 f7       	brtc	.-52     	; 0x1762 <__ultoa_common+0x2>
    1796:	b1 11       	cpse	r27, r1
    1798:	b1 93       	st	Z+, r27
    179a:	10 82       	st	Z, r1
    179c:	ca 01       	movw	r24, r20
    179e:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <strrev>

000017a2 <__utoa_ncheck>:
    17a2:	bb 27       	eor	r27, r27

000017a4 <__utoa_common>:
    17a4:	fb 01       	movw	r30, r22
    17a6:	55 27       	eor	r21, r21
    17a8:	aa 27       	eor	r26, r26
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	aa 1f       	adc	r26, r26
    17b0:	a4 17       	cp	r26, r20
    17b2:	10 f0       	brcs	.+4      	; 0x17b8 <__utoa_common+0x14>
    17b4:	a4 1b       	sub	r26, r20
    17b6:	83 95       	inc	r24
    17b8:	50 51       	subi	r21, 0x10	; 16
    17ba:	b9 f7       	brne	.-18     	; 0x17aa <__utoa_common+0x6>
    17bc:	a0 5d       	subi	r26, 0xD0	; 208
    17be:	aa 33       	cpi	r26, 0x3A	; 58
    17c0:	08 f0       	brcs	.+2      	; 0x17c4 <__utoa_common+0x20>
    17c2:	a9 5d       	subi	r26, 0xD9	; 217
    17c4:	a1 93       	st	Z+, r26
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	79 f7       	brne	.-34     	; 0x17a8 <__utoa_common+0x4>
    17ca:	b1 11       	cpse	r27, r1
    17cc:	b1 93       	st	Z+, r27
    17ce:	11 92       	st	Z+, r1
    17d0:	cb 01       	movw	r24, r22
    17d2:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <strrev>

000017d6 <strtod>:
    17d6:	a0 e0       	ldi	r26, 0x00	; 0
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e1 ef       	ldi	r30, 0xF1	; 241
    17dc:	fb e0       	ldi	r31, 0x0B	; 11
    17de:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__prologue_saves__+0xc>
    17e2:	8b 01       	movw	r16, r22
    17e4:	61 15       	cp	r22, r1
    17e6:	71 05       	cpc	r23, r1
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <strtod+0x1c>
    17ea:	db 01       	movw	r26, r22
    17ec:	8c 93       	st	X, r24
    17ee:	11 96       	adiw	r26, 0x01	; 1
    17f0:	9c 93       	st	X, r25
    17f2:	ec 01       	movw	r28, r24
    17f4:	5e 01       	movw	r10, r28
    17f6:	bf ef       	ldi	r27, 0xFF	; 255
    17f8:	ab 1a       	sub	r10, r27
    17fa:	bb 0a       	sbc	r11, r27
    17fc:	75 01       	movw	r14, r10
    17fe:	c8 80       	ld	r12, Y
    1800:	8c 2d       	mov	r24, r12
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <isspace>
    1808:	89 2b       	or	r24, r25
    180a:	11 f0       	breq	.+4      	; 0x1810 <strtod+0x3a>
    180c:	e5 01       	movw	r28, r10
    180e:	f2 cf       	rjmp	.-28     	; 0x17f4 <strtod+0x1e>
    1810:	ed e2       	ldi	r30, 0x2D	; 45
    1812:	ce 12       	cpse	r12, r30
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <strtod+0x50>
    1816:	7e 01       	movw	r14, r28
    1818:	f2 e0       	ldi	r31, 0x02	; 2
    181a:	ef 0e       	add	r14, r31
    181c:	f1 1c       	adc	r15, r1
    181e:	c9 80       	ldd	r12, Y+1	; 0x01
    1820:	dd 24       	eor	r13, r13
    1822:	d3 94       	inc	r13
    1824:	09 c0       	rjmp	.+18     	; 0x1838 <strtod+0x62>
    1826:	2b e2       	ldi	r18, 0x2B	; 43
    1828:	c2 12       	cpse	r12, r18
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <strtod+0x60>
    182c:	7e 01       	movw	r14, r28
    182e:	42 e0       	ldi	r20, 0x02	; 2
    1830:	e4 0e       	add	r14, r20
    1832:	f1 1c       	adc	r15, r1
    1834:	c9 80       	ldd	r12, Y+1	; 0x01
    1836:	d1 2c       	mov	r13, r1
    1838:	e7 01       	movw	r28, r14
    183a:	21 97       	sbiw	r28, 0x01	; 1
    183c:	43 e0       	ldi	r20, 0x03	; 3
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	6e e5       	ldi	r22, 0x5E	; 94
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	ce 01       	movw	r24, r28
    1846:	0e 94 56 0d 	call	0x1aac	; 0x1aac <strncasecmp_P>
    184a:	89 2b       	or	r24, r25
    184c:	c1 f4       	brne	.+48     	; 0x187e <strtod+0xa8>
    184e:	23 96       	adiw	r28, 0x03	; 3
    1850:	45 e0       	ldi	r20, 0x05	; 5
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	69 e5       	ldi	r22, 0x59	; 89
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	ce 01       	movw	r24, r28
    185a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <strncasecmp_P>
    185e:	89 2b       	or	r24, r25
    1860:	09 f4       	brne	.+2      	; 0x1864 <strtod+0x8e>
    1862:	25 96       	adiw	r28, 0x05	; 5
    1864:	01 15       	cp	r16, r1
    1866:	11 05       	cpc	r17, r1
    1868:	19 f0       	breq	.+6      	; 0x1870 <strtod+0x9a>
    186a:	d8 01       	movw	r26, r16
    186c:	cd 93       	st	X+, r28
    186e:	dc 93       	st	X, r29
    1870:	d1 10       	cpse	r13, r1
    1872:	06 c1       	rjmp	.+524    	; 0x1a80 <strtod+0x2aa>
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	80 e8       	ldi	r24, 0x80	; 128
    187a:	9f e7       	ldi	r25, 0x7F	; 127
    187c:	0a c1       	rjmp	.+532    	; 0x1a92 <strtod+0x2bc>
    187e:	43 e0       	ldi	r20, 0x03	; 3
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	66 e5       	ldi	r22, 0x56	; 86
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	ce 01       	movw	r24, r28
    1888:	0e 94 56 0d 	call	0x1aac	; 0x1aac <strncasecmp_P>
    188c:	89 2b       	or	r24, r25
    188e:	59 f4       	brne	.+22     	; 0x18a6 <strtod+0xd0>
    1890:	01 15       	cp	r16, r1
    1892:	11 05       	cpc	r17, r1
    1894:	09 f4       	brne	.+2      	; 0x1898 <strtod+0xc2>
    1896:	f9 c0       	rjmp	.+498    	; 0x1a8a <strtod+0x2b4>
    1898:	b2 e0       	ldi	r27, 0x02	; 2
    189a:	eb 0e       	add	r14, r27
    189c:	f1 1c       	adc	r15, r1
    189e:	f8 01       	movw	r30, r16
    18a0:	f1 82       	std	Z+1, r15	; 0x01
    18a2:	e0 82       	st	Z, r14
    18a4:	f2 c0       	rjmp	.+484    	; 0x1a8a <strtod+0x2b4>
    18a6:	f7 01       	movw	r30, r14
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	cb 01       	movw	r24, r22
    18ae:	c0 e0       	ldi	r28, 0x00	; 0
    18b0:	d0 e0       	ldi	r29, 0x00	; 0
    18b2:	7f 01       	movw	r14, r30
    18b4:	a0 ed       	ldi	r26, 0xD0	; 208
    18b6:	aa 2e       	mov	r10, r26
    18b8:	ac 0c       	add	r10, r12
    18ba:	29 e0       	ldi	r18, 0x09	; 9
    18bc:	2a 15       	cp	r18, r10
    18be:	30 f1       	brcs	.+76     	; 0x190c <strtod+0x136>
    18c0:	4d 2d       	mov	r20, r13
    18c2:	42 60       	ori	r20, 0x02	; 2
    18c4:	b4 2e       	mov	r11, r20
    18c6:	2d 2d       	mov	r18, r13
    18c8:	28 70       	andi	r18, 0x08	; 8
    18ca:	d2 fe       	sbrs	r13, 2
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <strtod+0x100>
    18ce:	21 11       	cpse	r18, r1
    18d0:	25 c0       	rjmp	.+74     	; 0x191c <strtod+0x146>
    18d2:	21 96       	adiw	r28, 0x01	; 1
    18d4:	23 c0       	rjmp	.+70     	; 0x191c <strtod+0x146>
    18d6:	21 11       	cpse	r18, r1
    18d8:	21 97       	sbiw	r28, 0x01	; 1
    18da:	a5 e0       	ldi	r26, 0x05	; 5
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__muluhisi3>
    18e6:	66 0f       	add	r22, r22
    18e8:	77 1f       	adc	r23, r23
    18ea:	88 1f       	adc	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	6a 0d       	add	r22, r10
    18f0:	71 1d       	adc	r23, r1
    18f2:	81 1d       	adc	r24, r1
    18f4:	91 1d       	adc	r25, r1
    18f6:	68 39       	cpi	r22, 0x98	; 152
    18f8:	a9 e9       	ldi	r26, 0x99	; 153
    18fa:	7a 07       	cpc	r23, r26
    18fc:	8a 07       	cpc	r24, r26
    18fe:	a9 e1       	ldi	r26, 0x19	; 25
    1900:	9a 07       	cpc	r25, r26
    1902:	60 f0       	brcs	.+24     	; 0x191c <strtod+0x146>
    1904:	bd 2d       	mov	r27, r13
    1906:	b6 60       	ori	r27, 0x06	; 6
    1908:	bb 2e       	mov	r11, r27
    190a:	08 c0       	rjmp	.+16     	; 0x191c <strtod+0x146>
    190c:	2e ef       	ldi	r18, 0xFE	; 254
    190e:	a2 12       	cpse	r10, r18
    1910:	0a c0       	rjmp	.+20     	; 0x1926 <strtod+0x150>
    1912:	d3 fc       	sbrc	r13, 3
    1914:	50 c0       	rjmp	.+160    	; 0x19b6 <strtod+0x1e0>
    1916:	4d 2d       	mov	r20, r13
    1918:	48 60       	ori	r20, 0x08	; 8
    191a:	b4 2e       	mov	r11, r20
    191c:	31 96       	adiw	r30, 0x01	; 1
    191e:	d7 01       	movw	r26, r14
    1920:	cc 90       	ld	r12, X
    1922:	db 2c       	mov	r13, r11
    1924:	c6 cf       	rjmp	.-116    	; 0x18b2 <strtod+0xdc>
    1926:	2c 2d       	mov	r18, r12
    1928:	2f 7d       	andi	r18, 0xDF	; 223
    192a:	25 34       	cpi	r18, 0x45	; 69
    192c:	09 f0       	breq	.+2      	; 0x1930 <strtod+0x15a>
    192e:	43 c0       	rjmp	.+134    	; 0x19b6 <strtod+0x1e0>
    1930:	a0 81       	ld	r26, Z
    1932:	ad 32       	cpi	r26, 0x2D	; 45
    1934:	41 f4       	brne	.+16     	; 0x1946 <strtod+0x170>
    1936:	bd 2d       	mov	r27, r13
    1938:	b0 61       	ori	r27, 0x10	; 16
    193a:	db 2e       	mov	r13, r27
    193c:	7f 01       	movw	r14, r30
    193e:	22 e0       	ldi	r18, 0x02	; 2
    1940:	e2 0e       	add	r14, r18
    1942:	f1 1c       	adc	r15, r1
    1944:	0c c0       	rjmp	.+24     	; 0x195e <strtod+0x188>
    1946:	7f 01       	movw	r14, r30
    1948:	ab 32       	cpi	r26, 0x2B	; 43
    194a:	31 f0       	breq	.+12     	; 0x1958 <strtod+0x182>
    194c:	4f ef       	ldi	r20, 0xFF	; 255
    194e:	e4 1a       	sub	r14, r20
    1950:	f4 0a       	sbc	r15, r20
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <strtod+0x18e>
    1958:	a2 e0       	ldi	r26, 0x02	; 2
    195a:	ea 0e       	add	r14, r26
    195c:	f1 1c       	adc	r15, r1
    195e:	a1 81       	ldd	r26, Z+1	; 0x01
    1960:	22 e0       	ldi	r18, 0x02	; 2
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	a0 53       	subi	r26, 0x30	; 48
    1966:	aa 30       	cpi	r26, 0x0A	; 10
    1968:	18 f0       	brcs	.+6      	; 0x1970 <strtod+0x19a>
    196a:	e2 1a       	sub	r14, r18
    196c:	f3 0a       	sbc	r15, r19
    196e:	23 c0       	rjmp	.+70     	; 0x19b6 <strtod+0x1e0>
    1970:	f7 01       	movw	r30, r14
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	20 38       	cpi	r18, 0x80	; 128
    1978:	bc e0       	ldi	r27, 0x0C	; 12
    197a:	3b 07       	cpc	r19, r27
    197c:	5c f4       	brge	.+22     	; 0x1994 <strtod+0x1be>
    197e:	a9 01       	movw	r20, r18
    1980:	44 0f       	add	r20, r20
    1982:	55 1f       	adc	r21, r21
    1984:	44 0f       	add	r20, r20
    1986:	55 1f       	adc	r21, r21
    1988:	24 0f       	add	r18, r20
    198a:	35 1f       	adc	r19, r21
    198c:	22 0f       	add	r18, r18
    198e:	33 1f       	adc	r19, r19
    1990:	2a 0f       	add	r18, r26
    1992:	31 1d       	adc	r19, r1
    1994:	af 01       	movw	r20, r30
    1996:	4f 5f       	subi	r20, 0xFF	; 255
    1998:	5f 4f       	sbci	r21, 0xFF	; 255
    199a:	7a 01       	movw	r14, r20
    199c:	a0 81       	ld	r26, Z
    199e:	a0 53       	subi	r26, 0x30	; 48
    19a0:	aa 30       	cpi	r26, 0x0A	; 10
    19a2:	10 f4       	brcc	.+4      	; 0x19a8 <strtod+0x1d2>
    19a4:	fa 01       	movw	r30, r20
    19a6:	e7 cf       	rjmp	.-50     	; 0x1976 <strtod+0x1a0>
    19a8:	d4 fe       	sbrs	r13, 4
    19aa:	03 c0       	rjmp	.+6      	; 0x19b2 <strtod+0x1dc>
    19ac:	31 95       	neg	r19
    19ae:	21 95       	neg	r18
    19b0:	31 09       	sbc	r19, r1
    19b2:	c2 0f       	add	r28, r18
    19b4:	d3 1f       	adc	r29, r19
    19b6:	d1 fe       	sbrs	r13, 1
    19b8:	09 c0       	rjmp	.+18     	; 0x19cc <strtod+0x1f6>
    19ba:	01 15       	cp	r16, r1
    19bc:	11 05       	cpc	r17, r1
    19be:	31 f0       	breq	.+12     	; 0x19cc <strtod+0x1f6>
    19c0:	e1 e0       	ldi	r30, 0x01	; 1
    19c2:	ee 1a       	sub	r14, r30
    19c4:	f1 08       	sbc	r15, r1
    19c6:	d8 01       	movw	r26, r16
    19c8:	ed 92       	st	X+, r14
    19ca:	fc 92       	st	X, r15
    19cc:	0e 94 9f 09 	call	0x133e	; 0x133e <__floatunsisf>
    19d0:	2d 2d       	mov	r18, r13
    19d2:	23 70       	andi	r18, 0x03	; 3
    19d4:	23 30       	cpi	r18, 0x03	; 3
    19d6:	19 f0       	breq	.+6      	; 0x19de <strtod+0x208>
    19d8:	4b 01       	movw	r8, r22
    19da:	5c 01       	movw	r10, r24
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <strtod+0x214>
    19de:	4b 01       	movw	r8, r22
    19e0:	5c 01       	movw	r10, r24
    19e2:	b7 fa       	bst	r11, 7
    19e4:	b0 94       	com	r11
    19e6:	b7 f8       	bld	r11, 7
    19e8:	b0 94       	com	r11
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	c5 01       	movw	r24, r10
    19f2:	b4 01       	movw	r22, r8
    19f4:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__cmpsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	09 f4       	brne	.+2      	; 0x19fe <strtod+0x228>
    19fc:	3e c0       	rjmp	.+124    	; 0x1a7a <strtod+0x2a4>
    19fe:	d7 ff       	sbrs	r29, 7
    1a00:	06 c0       	rjmp	.+12     	; 0x1a0e <strtod+0x238>
    1a02:	d1 95       	neg	r29
    1a04:	c1 95       	neg	r28
    1a06:	d1 09       	sbc	r29, r1
    1a08:	05 e7       	ldi	r16, 0x75	; 117
    1a0a:	10 e0       	ldi	r17, 0x00	; 0
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <strtod+0x23c>
    1a0e:	0d e8       	ldi	r16, 0x8D	; 141
    1a10:	10 e0       	ldi	r17, 0x00	; 0
    1a12:	68 01       	movw	r12, r16
    1a14:	b8 e1       	ldi	r27, 0x18	; 24
    1a16:	cb 1a       	sub	r12, r27
    1a18:	d1 08       	sbc	r13, r1
    1a1a:	90 e2       	ldi	r25, 0x20	; 32
    1a1c:	e9 2e       	mov	r14, r25
    1a1e:	f1 2c       	mov	r15, r1
    1a20:	ce 15       	cp	r28, r14
    1a22:	df 05       	cpc	r29, r15
    1a24:	74 f0       	brlt	.+28     	; 0x1a42 <strtod+0x26c>
    1a26:	f8 01       	movw	r30, r16
    1a28:	25 91       	lpm	r18, Z+
    1a2a:	35 91       	lpm	r19, Z+
    1a2c:	45 91       	lpm	r20, Z+
    1a2e:	54 91       	lpm	r21, Z
    1a30:	c5 01       	movw	r24, r10
    1a32:	b4 01       	movw	r22, r8
    1a34:	0e 94 2d 0a 	call	0x145a	; 0x145a <__mulsf3>
    1a38:	4b 01       	movw	r8, r22
    1a3a:	5c 01       	movw	r10, r24
    1a3c:	ce 19       	sub	r28, r14
    1a3e:	df 09       	sbc	r29, r15
    1a40:	ef cf       	rjmp	.-34     	; 0x1a20 <strtod+0x24a>
    1a42:	04 50       	subi	r16, 0x04	; 4
    1a44:	11 09       	sbc	r17, r1
    1a46:	f5 94       	asr	r15
    1a48:	e7 94       	ror	r14
    1a4a:	0c 15       	cp	r16, r12
    1a4c:	1d 05       	cpc	r17, r13
    1a4e:	41 f7       	brne	.-48     	; 0x1a20 <strtod+0x24a>
    1a50:	8a 2d       	mov	r24, r10
    1a52:	88 0f       	add	r24, r24
    1a54:	8b 2d       	mov	r24, r11
    1a56:	88 1f       	adc	r24, r24
    1a58:	8f 3f       	cpi	r24, 0xFF	; 255
    1a5a:	49 f0       	breq	.+18     	; 0x1a6e <strtod+0x298>
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	a9 01       	movw	r20, r18
    1a62:	c5 01       	movw	r24, r10
    1a64:	b4 01       	movw	r22, r8
    1a66:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__cmpsf2>
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	06 c0       	rjmp	.+12     	; 0x1a7a <strtod+0x2a4>
    1a6e:	82 e2       	ldi	r24, 0x22	; 34
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	90 93 48 01 	sts	0x0148, r25
    1a76:	80 93 47 01 	sts	0x0147, r24
    1a7a:	c5 01       	movw	r24, r10
    1a7c:	b4 01       	movw	r22, r8
    1a7e:	09 c0       	rjmp	.+18     	; 0x1a92 <strtod+0x2bc>
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	80 e8       	ldi	r24, 0x80	; 128
    1a86:	9f ef       	ldi	r25, 0xFF	; 255
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <strtod+0x2bc>
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	80 ec       	ldi	r24, 0xC0	; 192
    1a90:	9f e7       	ldi	r25, 0x7F	; 127
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	ec e0       	ldi	r30, 0x0C	; 12
    1a98:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__epilogue_restores__+0xc>

00001a9c <isspace>:
    1a9c:	91 11       	cpse	r25, r1
    1a9e:	56 c0       	rjmp	.+172    	; 0x1b4c <__ctype_isfalse>
    1aa0:	80 32       	cpi	r24, 0x20	; 32
    1aa2:	19 f0       	breq	.+6      	; 0x1aaa <isspace+0xe>
    1aa4:	89 50       	subi	r24, 0x09	; 9
    1aa6:	85 50       	subi	r24, 0x05	; 5
    1aa8:	d0 f7       	brcc	.-12     	; 0x1a9e <isspace+0x2>
    1aaa:	08 95       	ret

00001aac <strncasecmp_P>:
    1aac:	fb 01       	movw	r30, r22
    1aae:	dc 01       	movw	r26, r24
    1ab0:	41 50       	subi	r20, 0x01	; 1
    1ab2:	50 40       	sbci	r21, 0x00	; 0
    1ab4:	88 f0       	brcs	.+34     	; 0x1ad8 <strncasecmp_P+0x2c>
    1ab6:	8d 91       	ld	r24, X+
    1ab8:	81 34       	cpi	r24, 0x41	; 65
    1aba:	1c f0       	brlt	.+6      	; 0x1ac2 <strncasecmp_P+0x16>
    1abc:	8b 35       	cpi	r24, 0x5B	; 91
    1abe:	0c f4       	brge	.+2      	; 0x1ac2 <strncasecmp_P+0x16>
    1ac0:	80 5e       	subi	r24, 0xE0	; 224
    1ac2:	65 91       	lpm	r22, Z+
    1ac4:	61 34       	cpi	r22, 0x41	; 65
    1ac6:	1c f0       	brlt	.+6      	; 0x1ace <strncasecmp_P+0x22>
    1ac8:	6b 35       	cpi	r22, 0x5B	; 91
    1aca:	0c f4       	brge	.+2      	; 0x1ace <strncasecmp_P+0x22>
    1acc:	60 5e       	subi	r22, 0xE0	; 224
    1ace:	86 1b       	sub	r24, r22
    1ad0:	61 11       	cpse	r22, r1
    1ad2:	71 f3       	breq	.-36     	; 0x1ab0 <strncasecmp_P+0x4>
    1ad4:	99 0b       	sbc	r25, r25
    1ad6:	08 95       	ret
    1ad8:	88 1b       	sub	r24, r24
    1ada:	fc cf       	rjmp	.-8      	; 0x1ad4 <strncasecmp_P+0x28>

00001adc <strrev>:
    1adc:	dc 01       	movw	r26, r24
    1ade:	fc 01       	movw	r30, r24
    1ae0:	67 2f       	mov	r22, r23
    1ae2:	71 91       	ld	r23, Z+
    1ae4:	77 23       	and	r23, r23
    1ae6:	e1 f7       	brne	.-8      	; 0x1ae0 <strrev+0x4>
    1ae8:	32 97       	sbiw	r30, 0x02	; 2
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <strrev+0x18>
    1aec:	7c 91       	ld	r23, X
    1aee:	6d 93       	st	X+, r22
    1af0:	70 83       	st	Z, r23
    1af2:	62 91       	ld	r22, -Z
    1af4:	ae 17       	cp	r26, r30
    1af6:	bf 07       	cpc	r27, r31
    1af8:	c8 f3       	brcs	.-14     	; 0x1aec <strrev+0x10>
    1afa:	08 95       	ret

00001afc <__cmpsf2>:
    1afc:	03 d0       	rcall	.+6      	; 0x1b04 <__fp_cmp>
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <__cmpsf2+0x6>
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	08 95       	ret

00001b04 <__fp_cmp>:
    1b04:	99 0f       	add	r25, r25
    1b06:	00 08       	sbc	r0, r0
    1b08:	55 0f       	add	r21, r21
    1b0a:	aa 0b       	sbc	r26, r26
    1b0c:	e0 e8       	ldi	r30, 0x80	; 128
    1b0e:	fe ef       	ldi	r31, 0xFE	; 254
    1b10:	16 16       	cp	r1, r22
    1b12:	17 06       	cpc	r1, r23
    1b14:	e8 07       	cpc	r30, r24
    1b16:	f9 07       	cpc	r31, r25
    1b18:	c0 f0       	brcs	.+48     	; 0x1b4a <__fp_cmp+0x46>
    1b1a:	12 16       	cp	r1, r18
    1b1c:	13 06       	cpc	r1, r19
    1b1e:	e4 07       	cpc	r30, r20
    1b20:	f5 07       	cpc	r31, r21
    1b22:	98 f0       	brcs	.+38     	; 0x1b4a <__fp_cmp+0x46>
    1b24:	62 1b       	sub	r22, r18
    1b26:	73 0b       	sbc	r23, r19
    1b28:	84 0b       	sbc	r24, r20
    1b2a:	95 0b       	sbc	r25, r21
    1b2c:	39 f4       	brne	.+14     	; 0x1b3c <__fp_cmp+0x38>
    1b2e:	0a 26       	eor	r0, r26
    1b30:	61 f0       	breq	.+24     	; 0x1b4a <__fp_cmp+0x46>
    1b32:	23 2b       	or	r18, r19
    1b34:	24 2b       	or	r18, r20
    1b36:	25 2b       	or	r18, r21
    1b38:	21 f4       	brne	.+8      	; 0x1b42 <__fp_cmp+0x3e>
    1b3a:	08 95       	ret
    1b3c:	0a 26       	eor	r0, r26
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <__fp_cmp+0x3e>
    1b40:	a1 40       	sbci	r26, 0x01	; 1
    1b42:	a6 95       	lsr	r26
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	81 1d       	adc	r24, r1
    1b48:	81 1d       	adc	r24, r1
    1b4a:	08 95       	ret

00001b4c <__ctype_isfalse>:
    1b4c:	99 27       	eor	r25, r25
    1b4e:	88 27       	eor	r24, r24

00001b50 <__ctype_istrue>:
    1b50:	08 95       	ret

00001b52 <__prologue_saves__>:
    1b52:	2f 92       	push	r2
    1b54:	3f 92       	push	r3
    1b56:	4f 92       	push	r4
    1b58:	5f 92       	push	r5
    1b5a:	6f 92       	push	r6
    1b5c:	7f 92       	push	r7
    1b5e:	8f 92       	push	r8
    1b60:	9f 92       	push	r9
    1b62:	af 92       	push	r10
    1b64:	bf 92       	push	r11
    1b66:	cf 92       	push	r12
    1b68:	df 92       	push	r13
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	ca 1b       	sub	r28, r26
    1b7c:	db 0b       	sbc	r29, r27
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	09 94       	ijmp

00001b8a <__epilogue_restores__>:
    1b8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1b8c:	39 88       	ldd	r3, Y+17	; 0x11
    1b8e:	48 88       	ldd	r4, Y+16	; 0x10
    1b90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1b9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1ba0:	df 80       	ldd	r13, Y+7	; 0x07
    1ba2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ba4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ba6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ba8:	1b 81       	ldd	r17, Y+3	; 0x03
    1baa:	aa 81       	ldd	r26, Y+2	; 0x02
    1bac:	b9 81       	ldd	r27, Y+1	; 0x01
    1bae:	ce 0f       	add	r28, r30
    1bb0:	d1 1d       	adc	r29, r1
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	ed 01       	movw	r28, r26
    1bbe:	08 95       	ret

00001bc0 <_exit>:
    1bc0:	f8 94       	cli

00001bc2 <__stop_program>:
    1bc2:	ff cf       	rjmp	.-2      	; 0x1bc2 <__stop_program>
